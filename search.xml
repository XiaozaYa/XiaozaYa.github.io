<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SQL语法</title>
      <link href="/2023/04/03/sql/sql/"/>
      <url>/2023/04/03/sql/sql/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="登录数据库"><a href="#登录数据库" class="headerlink" title="登录数据库"></a>登录数据库</h3><p>cmd命令行输入：</p><p>mysql -u username -p</p><p>or </p><p>mysql -u username -ppassword(这里-p要和你的密码紧靠在一起)</p><p><img src="/./SQL/1.png" alt="1"></p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="创建数据库、表"><a href="#创建数据库、表" class="headerlink" title="创建数据库、表"></a>创建数据库、表</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> dbname<span class="token punctuation">;</span> <span class="token comment">#创建数据库</span><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> dbname<span class="token punctuation">;</span>  <span class="token comment">#删除数据库</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> table_name； <span class="token comment">#删除表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> table_name <span class="token comment">#创建数据库中的表</span><span class="token punctuation">(</span>column_name1 data_type<span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token punctuation">(</span>constraint_name<span class="token punctuation">)</span><span class="token punctuation">,</span>column_name2 data_type<span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token punctuation">(</span>constraint_name<span class="token punctuation">)</span><span class="token punctuation">,</span>column_name3 data_type<span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token punctuation">(</span>constraint_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>column_name：参数规定表中列的名称<span class="token punctuation">;</span>data_type：参数规定列的数据类型（例如 <span class="token keyword">varchar</span>、<span class="token keyword">integer</span>、<span class="token keyword">decimal</span>、<span class="token keyword">date</span> 等等）<span class="token punctuation">;</span>size：参数规定表中列的最大长度；constraint_name<span class="token punctuation">(</span>可选<span class="token punctuation">)</span>：约束名。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>约束(Constraints)</strong></p><p>SQL 约束用于规定表中的数据规则。如果存在违反约束的数据行为，行为会被约束终止。<strong>约束可以在创建表时规定（通过 CREATE TABLE 语句），或者在表创建之后规定（通过 ALTER TABLE 语句）</strong>。</p><p>在 SQL 中，我们有如下约束：</p><ul><li><strong>NOT NULL</strong> - 指示某列不能存储 NULL 值。</li><li><strong>UNIQUE</strong> - 保证某列的每行必须有唯一的值。</li><li><strong>PRIMARY KEY</strong> - NOT NULL 和 UNIQUE 的结合。确保某列（或两个列多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。</li><li><strong>FOREIGN KEY</strong> - 保证一个表中的数据匹配另一个表中的值的参照完整性。</li><li><strong>CHECK</strong> - 保证列中的值符合指定的条件。</li><li><strong>DEFAULT</strong> - 规定没有给列赋值时的默认值。</li></ul><h4 id="ALTER"><a href="#ALTER" class="headerlink" title="ALTER"></a>ALTER</h4><h4 id="DROP"><a href="#DROP" class="headerlink" title="DROP"></a>DROP</h4><p>注意：SQL语言中每条命令以<code>;</code>结尾；</p><p>show databases;   ==&gt;  展现所有数据库名</p><p>show tables;  ==&gt; 展现当前数据库的所有表名</p><p>use databaseName;  ==&gt; 使用databaseName数据库</p><p><img src="/./SQL/2.png" alt="2"></p><h3 id="数据查询语句"><a href="#数据查询语句" class="headerlink" title="数据查询语句"></a>数据查询语句</h3><h4 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h4><p>SELECT：用于从数据库中选取数据；</p><p>基本格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>column1, column2, …：要选择的字段名称，可以为多个字段。如果不指定字段名称或指定为<code>*</code>，则会选择所有字段;</li><li>table_name：要查询的表名称。</li></ul><p><img src="/./SQL/3.png" alt="3"></p><h4 id="SELECT-DISTINCT"><a href="#SELECT-DISTINCT" class="headerlink" title="SELECT DISTINCT"></a>SELECT DISTINCT</h4><p>SELECT DISTINCT：用于返回唯一不同的值。</p><p>基本格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>**column1, column2, …**：要选择的字段名称，可以为多个字段。如果不指定字段名称或指定为<code>*</code>，则会选择所有字段;</li><li><strong>table_name</strong>：要查询的表名称。</li></ul><p>如下：去除了city列中的重复值；</p><p><img src="/./SQL/4.png" alt="4"></p><p><strong>Note：</strong>若指定了多个column，则表示排除column都相等的；</p><h4 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h4><p>WHERE：该子句用于过滤记录；用于提取那些满足指定条件的记录。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> table_name<span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>condition：指定的条件，可以用<code>AND/&amp;&amp;</code>或者<code>OR/||</code>连接多个条件，或在condition前加NOT表示否定;优先级：()&gt;not&gt;and&gt;or;</li><li>column，table_name解释如上SELECT;</li></ul><p><img src="/./img/SQL/5.png" alt="5"></p><p><strong>Note：</strong>SQL 使用单引号<code>''</code>来环绕文本值(可双引号<code>""</code>)；如果是数值字段，请不要使用引号。</p><h5 id="可在where子句中使用的运算符"><a href="#可在where子句中使用的运算符" class="headerlink" title="可在where子句中使用的运算符"></a>可在where子句中使用的运算符</h5><table><thead><tr><th align="left">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">=</td><td align="center">等于</td></tr><tr><td align="left">&lt;&gt;</td><td align="center">不等于。<strong>注释：</strong>在 SQL 的一些版本中，该操作符可被写成 !=</td></tr><tr><td align="left">&gt;</td><td align="center">大于</td></tr><tr><td align="left">&lt;</td><td align="center">小于</td></tr><tr><td align="left">&gt;=</td><td align="center">大于等于</td></tr><tr><td align="left">&lt;=</td><td align="center">小于等于</td></tr><tr><td align="left">BETWEEN</td><td align="center">在某个范围内</td></tr><tr><td align="left">LIKE</td><td align="center">搜索某种模式</td></tr><tr><td align="left">IN</td><td align="center">指定针对某个列的多个可能值</td></tr></tbody></table><h6 id="LIKE运算符"><a href="#LIKE运算符" class="headerlink" title="LIKE运算符"></a>LIKE运算符</h6><p>LIKE：该操作符用于在WHERE 子句中搜索列中的指定模式。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> table_name<span class="token keyword">WHERE</span> column_ <span class="token operator">LIKE</span> pattern<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>column_：要匹配的字段名称；</li><li>pattern：搜索模式。</li></ul><p><strong>通配符：</strong>可用于替代字符串中的任何其他字符。</p><table><thead><tr><th align="left">通配符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">%</td><td align="center">替代 0 个或多个字符</td></tr><tr><td align="left">_</td><td align="center">替代一个字符</td></tr><tr><td align="left">[<em>charlist</em>]</td><td align="center">字符列中的任何单一字符</td></tr><tr><td align="left">[^<em>charlist</em>] 或 [!<em>charlist</em>]</td><td align="center">不在字符列中的任何单一字符</td></tr></tbody></table><p><strong>LIKE 与 通配符 配合使用：</strong></p><p>当 like后面直接加具体的值(column like value)则相当于 column=vlaue，可以用来饶过<code>=</code>过滤；</p><p><img src="/./img/SQL/8.png" alt="8"></p><p><strong>[charlist]通配符：</strong>MySQL 中使用 <strong>REGEXP</strong> 或 <strong>NOT REGEXP</strong> 运算符 (或 RLIKE 和 NOT RLIKE) 来操作正则表达式。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> table_name<span class="token keyword">WHERE</span> column_ <span class="token operator">REGEXP</span> pattern<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>column_：要匹配的字段名称；</li><li>pattern：正则表达式。</li></ul><p><img src="/./img/SQL/9.png" alt="9"></p><h6 id="IN运算符"><a href="#IN运算符" class="headerlink" title="IN运算符"></a>IN运算符</h6><p>IN：该操作符允许您在 WHERE 子句中规定多个值。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> table_name<span class="token keyword">WHERE</span> column_ <span class="token operator">IN</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>column_：要匹配的字段名称；</li><li>value1, value2, …：要查询的值，可以为多个值。</li></ul><p><img src="/./img/SQL/10.png" alt="10"></p><p>Note：其实就相当于 column_ = value1 || column_ = value2 || …</p><h6 id="BETWEEN运算符"><a href="#BETWEEN运算符" class="headerlink" title="BETWEEN运算符"></a>BETWEEN运算符</h6><p>BETWEEN：该操作符用于选取介于两个值之间的数据范围内的值。这些值可以是数值、文本或者日期。</p><p>格式：BETWEEN … AND ….</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> table_name<span class="token keyword">WHERE</span> column_ <span class="token operator">BETWEEN</span> value1 <span class="token operator">AND</span> value2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>column_：要匹配的字段名称；</li><li>value1、value2：范围的起始值和结束值。</li></ul><p><img src="/./img/SQL/6.png" alt="6"></p><p>Note：如果是文本的话，按照字符对应的数值依此比较；如下：</p><p><img src="/./img/SQL/7.png" alt="7"></p><p><strong>Note：</strong></p><ul><li>在某些数据库中，BETWEEN 不包括两个测试值的字段；</li><li>在某些数据库中，BETWEEN 包括两个测试值的字段；</li><li>在某些数据库中，BETWEEN 包括第一个但不包括最后一个测试值的字段。</li></ul><p><strong>WHERE特殊使用情况：</strong></p><ul><li>直接 where 0(非0); 0时返回空，1时返回所有查询的列的值</li></ul><p><img src="/./img/SQL/11.png" alt="11"></p><ul><li>空值判断：is null</li></ul><p>eg：select * from p where color is null; 查询color列中的空值。</p><h4 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h4><p>order by： 该关键字用于对结果集<strong>按照一个列或者多个列进行排序</strong>。默认按照升序排序。如果需要按照降序排序，可使用 DESC 关键字。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> table_name<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>column1, column2, …：要排序的字段名称，column1全局排序，column2,…则是局部排序；</li><li>ASC：表示按升序排序；</li><li>DESC：表示按降序排序。</li></ul><p><img src="/./img/SQL/12.png" alt="12"></p><p>可以看出：qty是降序的，而jno在qty相同的情况下是升序的</p><h4 id="LIMIT"><a href="#LIMIT" class="headerlink" title="LIMIT"></a>LIMIT</h4><p>LIMIT：用于规定要返回的记录的数目。</p><p>格式：（MySQL中</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">FROM</span> table_name<span class="token keyword">LIMIT</span> number<span class="token punctuation">;</span> <span class="token comment">#number为返回记录的数目</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/./img/SQL/16.png" alt="16"></p><h4 id="AS-SQL-别名"><a href="#AS-SQL-别名" class="headerlink" title="AS(SQL 别名)"></a>AS(SQL 别名)</h4><p>通过SQL，可以为表名称或列名称指定别名。 </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#列的 SQL 别名语法</span><span class="token keyword">SELECT</span> column_name <span class="token keyword">AS</span> alias_name<span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span><span class="token comment">#表的 SQL 别名语法</span><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">FROM</span> table_name <span class="token keyword">AS</span> alias_name<span class="token punctuation">;</span><span class="token comment">#Note：如果列名称包含空格，要求使用双引号或方括号：</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在下面的情况下，使用别名很有用：</p><ul><li>在查询中涉及超过一个表</li><li>在查询中使用了函数</li><li>列名称很长或者可读性差</li><li>需要把两个列或者多个列结合在一起</li></ul><h4 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h4><p>JOIN ：用于把来自两个或多个表的行结合起来，基于这些表之间的<strong>共同字段</strong>。</p><p>在使用 <strong>join</strong> 时，<strong>on</strong> 和 <strong>where</strong> 条件的区别如下：</p><ul><li><strong>on</strong> 条件是在生成临时表时使用的条件，它不管 <strong>on</strong> 中的条件是否为真，都会返回左边表中的记录。</li><li><strong>where</strong> 条件是在临时表生成好后，再对临时表进行过滤的条件。这时已经没有 <strong>left join</strong> 的含义（必须返回左边表的记录）了，条件不为真的就全部过滤掉。</li></ul><p><strong>A inner join B</strong> 取交集；</p><p><strong>A left join B</strong> 取 A 全部，B 没有对应的值为 null；</p><p><strong>A right join B</strong> 取 B 全部 A 没有对应的值为 null；</p><p><strong>A full outer join B</strong> 取并集，彼此没有对应的值为 null。</p><h5 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a>INNER JOIN</h5><p>INNER JOIN：在表中存在至少一个匹配时返回行；等同于JOIN。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">FROM</span> table1<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> table2<span class="token keyword">ON</span> table1<span class="token punctuation">.</span>column_name<span class="token operator">=</span>table2<span class="token punctuation">.</span>column_name<span class="token punctuation">;</span><span class="token operator">or</span><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">FROM</span> table1<span class="token keyword">JOIN</span> table2<span class="token keyword">ON</span> table1<span class="token punctuation">.</span>column_name<span class="token operator">=</span>table2<span class="token punctuation">.</span>column_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>column_name(s)：要显示的列名。</li><li>table1：表1的名称。</li><li>table2：表2的名称。</li><li>tablex.column_name：表中用于连接的列名。</li></ul><p><img src="/./img/SQL/17.png" alt="17"></p><h5 id="LEFT-JOIN"><a href="#LEFT-JOIN" class="headerlink" title="LEFT JOIN"></a>LEFT JOIN</h5><p>LEFT JOIN：从左表（table1）返回所有的行，即使右表（table2）中没有匹配。如果右表中没有匹配，则结果为 NULL。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">FROM</span> table1<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> table2<span class="token keyword">ON</span> table1<span class="token punctuation">.</span>column_name<span class="token operator">=</span>table2<span class="token punctuation">.</span>column_name<span class="token punctuation">;</span><span class="token operator">or</span><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">FROM</span> table1<span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> table2<span class="token keyword">ON</span> table1<span class="token punctuation">.</span>column_name<span class="token operator">=</span>table2<span class="token punctuation">.</span>column_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/./img/SQL/18.png" alt="18"></p><h5 id="RIGHT-JOIN"><a href="#RIGHT-JOIN" class="headerlink" title="RIGHT JOIN"></a>RIGHT JOIN</h5><p>与LEFT JOIN相反，使用相同把left 改为 right即可。</p><h5 id="FULL-JOIN"><a href="#FULL-JOIN" class="headerlink" title="FULL JOIN"></a>FULL JOIN</h5><p>FULL OUTER JOIN：关键字只要左表（table1）和右表（table2）其中一个表中存在匹配，则返回行；结合了 LEFT JOIN 和 RIGHT JOIN 的结果。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">FROM</span> table1<span class="token keyword">FULL</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> table2<span class="token keyword">ON</span> table1<span class="token punctuation">.</span>column_name<span class="token operator">=</span>table2<span class="token punctuation">.</span>column_name<span class="token punctuation">;</span><span class="token operator">&gt;</span>_<span class="token operator">&lt;</span> 我电脑版本好像不支持<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h4><p>UNION：合并两个或多个 SELECT 语句的结果。</p><p><strong>Note：</strong>UNION 内部的每个 SELECT 语句必须拥有<strong>相同数量的列</strong>。列也必须拥有<strong>相似的数据类型</strong>。同时，每个 SELECT 语句中的<strong>列的顺序必须相同</strong>。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#UNION 操作符选取不同的值。如果允许重复的值，则使用UNION ALL；</span><span class="token comment">#UNION 结果集中的列名等于UNION中第一个 SELECT 语句中的列名。</span><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">FROM</span> table1<span class="token keyword">UNION</span><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">FROM</span> table2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/./img/SQL/19.png" alt="19"></p><h3 id="数据更新语句"><a href="#数据更新语句" class="headerlink" title="数据更新语句"></a>数据更新语句</h3><h4 id="插入：INSERT-INTO语句"><a href="#插入：INSERT-INTO语句" class="headerlink" title="插入：INSERT INTO语句"></a>插入：INSERT INTO语句</h4><p>INSERT INTO：用于向表中插入新记录。</p><p>格式1 ：无需指定要插入数据的列名，只需提供被插入的值即可：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name<span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">,</span>value3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>格式2：指定列名及被插入的值：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name <span class="token punctuation">(</span>column1<span class="token punctuation">,</span>column2<span class="token punctuation">,</span>column3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">,</span>value3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>column为table_name表中的字段；</li></ul><p><img src="/./img/SQL/13.png" alt="13"></p><h4 id="更新：UPDATE语句"><a href="#更新：UPDATE语句" class="headerlink" title="更新：UPDATE语句"></a>更新：UPDATE语句</h4><p>UPDATE：用于更新表中<strong>已存在</strong>的记录。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> table_name<span class="token keyword">SET</span> column1 <span class="token operator">=</span> value1<span class="token punctuation">,</span> column2 <span class="token operator">=</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>able_name：要修改的表名称；</li><li>column1, column2, …：要修改的字段名称，可以为多个字段；</li><li>value1, value2, …：要修改的值，可以为多个值；</li><li>condition：修改条件，用于指定哪些数据要修改。</li></ul><p><img src="/./img/SQL/14.png" alt="14"></p><p><strong>Note：</strong>update更新数据时，切记不要忘记带where子句，否则你的表中的相应字段的值都会被修改。</p><h4 id="删除：DELETE语句"><a href="#删除：DELETE语句" class="headerlink" title="删除：DELETE语句"></a>删除：DELETE语句</h4><p>DELETE：用于删除表中的行。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> table_name<span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>table_name：要删除的表名称;</p></li><li><p>condition：删除条件，用于指定哪些数据要删除。</p></li></ul><p><img src="/./img/SQL/15.png" alt="15"></p><p><strong>Note：</strong></p><ul><li>delete删除数据时，切记不要忘记带where子句，否则你表中的所有记录都会被修改。</li><li>可以在不删除表的情况下，删除表中所有的行。这意味着表结构、属性、索引将保持不变：DELETE FROM <em>table_name</em>;</li></ul><h4 id="复制：INSERT-INTO-SELECT"><a href="#复制：INSERT-INTO-SELECT" class="headerlink" title="复制：INSERT INTO SELECT"></a>复制：INSERT INTO SELECT</h4><p>INSERT INTO SELECT 语句从一个表复制数据，然后把数据插入到一个<strong>已存在的表中</strong>。目标表中任何已存在的行都不会受影响。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table2<span class="token punctuation">[</span><span class="token punctuation">(</span>column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token punctuation">[</span>columns_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">FROM</span> table1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/./img/SQL/20.png" alt="20"></p><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><h3 id="SQL函数"><a href="#SQL函数" class="headerlink" title="SQL函数"></a>SQL函数</h3>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RE-VM例题</title>
      <link href="/2023/04/02/2023-04-02-re-vm-liti/"/>
      <url>/2023/04/02/2023-04-02-re-vm-liti/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="DDCTF2018-黑盒破解"><a href="#DDCTF2018-黑盒破解" class="headerlink" title="[DDCTF2018] 黑盒破解"></a>[DDCTF2018] 黑盒破解</h1>]]></content>
      
      
      <categories>
          
          <category> CTF-RE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-RE </tag>
            
            <tag> VM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My First Blog</title>
      <link href="/2023/04/02/start-blog/"/>
      <url>/2023/04/02/start-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown-标题"><a href="#Markdown-标题" class="headerlink" title="Markdown 标题"></a>Markdown 标题</h1><p>“#”   =&gt; 一级标题<br>“##” =&gt; 二级标题，以此类推，一共六级标题。</p><h1 id="Markdown文本"><a href="#Markdown文本" class="headerlink" title="Markdown文本"></a>Markdown文本</h1><ul><li>斜体：可以在需要标注为斜体文本前及斜体文本结尾，输入一个星号<code>*</code>或者一个下划线 <code>_</code>；<br>eg：<code>*斜体*</code> ⇒ <em>斜体</em>   <code>_斜体_</code>⇒ <em>斜体</em></li><li>粗体：<code>**</code>或者<code>__</code></li><li>斜粗体：<code>***</code>或者<code>___</code></li></ul><h1 id="Markdown列表"><a href="#Markdown列表" class="headerlink" title="Markdown列表"></a>Markdown列表</h1><p>1）无序列表：使用星号(<code>*</code>)、加号(<code>+</code>)或是减号(<code>-</code>)，再加一个空格作为列表标记；<br>2）有序列表：使用数字并加上 <code>.</code> 号，再加一个空格作为列表标记；<br>note：如果要控制列表的层级，则需要在符号 前使用 <code>tab</code>，如下：</p><ul><li>无序列表 1</li><li>无序列表 2<ul><li>无序列表 2.1</li><li>无序列表 2.2</li></ul></li></ul><h1 id="Markdown链接"><a href="#Markdown链接" class="headerlink" title="Markdown链接"></a>Markdown链接</h1><p>格式：<code>[链接名称](链接地址)</code>或者&lt;链接地址&gt;<br>eg:<a href="https://blog.csdn.net/qq_61670993?spm=1018.2226.3001.5343">XiaozaYa</a>或者<a href="https://blog.csdn.net/qq_61670993?spm=1018.2226.3001.5343">https://blog.csdn.net/qq_61670993?spm=1018.2226.3001.5343</a></p><h1 id="Markdown引用"><a href="#Markdown引用" class="headerlink" title="Markdown引用"></a>Markdown引用</h1><p>格式：在符号 <code>&gt;</code> 后面书写文字，或者加一个空格再加文字；<br>eg：</p><blockquote><p>hello:<br>Welcome</p></blockquote><p>除正常引用外，还可以嵌套，一个 <code>&gt;</code> 符号在第一层，两个 <code>&gt;</code> 符号是第二层，以此类推，如下：</p><blockquote><p>这是一个引用:</p><blockquote><p>welcome</p><blockquote><p>快来玩啊！</p></blockquote></blockquote></blockquote><h1 id="Markdown分割线"><a href="#Markdown分割线" class="headerlink" title="Markdown分割线"></a>Markdown分割线</h1><h2 id="格式：在一行中用三个-或者-来建立一个分隔线，同时需要在分隔线的上面空一行；如果不留空格，当用-时就会变成放大上面的字；eg-Welcome-我爱你！"><a href="#格式：在一行中用三个-或者-来建立一个分隔线，同时需要在分隔线的上面空一行；如果不留空格，当用-时就会变成放大上面的字；eg-Welcome-我爱你！" class="headerlink" title="格式：在一行中用三个 - 或者 * 来建立一个分隔线，同时需要在分隔线的上面空一行；如果不留空格，当用-时就会变成放大上面的字；eg:Welcome!***我爱你！"></a>格式：在一行中用三个 <code>-</code> 或者 <code>*</code> 来建立一个分隔线，同时需要在分隔线的上面空一行；如果不留空格，当用<code>-</code>时就会变成放大上面的字；<br>eg:<br>Welcome!<br>***<br>我爱你！</h2><hr><hr><h1 id="Markdown删除线"><a href="#Markdown删除线" class="headerlink" title="Markdown删除线"></a>Markdown删除线</h1><p>格式：在需要删除的文字前后各使用两个 <code>~</code>；<br>eg：<br><del>删除线</del></p><h1 id="Markdown下划线"><a href="#Markdown下划线" class="headerlink" title="Markdown下划线"></a>Markdown下划线</h1><p>格式：在需要添加下划线的文字首部和尾部加上 <code>&lt;u&gt;文本&lt;/u&gt;</code>；<br>eg：<br><u>下划线</u></p><h1 id="Markdown表格"><a href="#Markdown表格" class="headerlink" title="Markdown表格"></a>Markdown表格</h1><p>格式：表格使用 <code>|</code> 来分隔不同的单元格，使用 <code>-</code> 来分隔表头和其他行，如果想调整表格的左对齐、右对齐、居中对齐:</p><ul><li><code>:-</code>：将表头及单元格的内容左对齐；</li><li><code>-:</code>：将表头及单元格的内容左对齐；</li><li><code>:-:</code>：将表头及单元格的内容居中对齐；<br>eg：<br>|姓名|年龄|工作|<br>| :—– | :–: | ——-:|<br>| 小可爱 |  18  | 吃可爱多  |<br>| 小小勇敢 |  20  | 爬棵勇敢树  |<br>| 小小小机智 |  22  | 看一本机智书 |</li></ul><p>|姓名|年龄|工作|<br>| :—– | :–: | ——-:|<br>| 小可爱 |  18  | 吃可爱多  |<br>| 小小勇敢 |  20  | 爬棵勇敢树  |<br>| 小小小机智 |  22  | 看一本机智书 |</p><h1 id="Markdown图片"><a href="#Markdown图片" class="headerlink" title="Markdown图片"></a>Markdown图片</h1><p>格式：<code>![图片描述](图片地址)</code><br>note：</p><ul><li>如果是行内图片则无图例，否则有图例；</li><li>仅支持 https 的图片，图片粘贴到网页编辑器后，会自动上传到服务器；如果是本地编辑器，需要有一个相对路径用来存储保存的图片。</li><li>支持 <code>jpg、png、gif、svg</code> 等图片格式，<strong>其中 svg 文件仅可在微信公众平台中使用</strong>。<br><img src="http://image.luokangyuan.com/4027734.jpeg" alt="图片:【heihei】"></li></ul><h1 id="Markdown脚注"><a href="#Markdown脚注" class="headerlink" title="Markdown脚注"></a>Markdown脚注</h1><p>格式：<code>[文字](脚注解释 "脚注名字")</code><br>eg：<br>脚注：<a href="%E8%84%9A%E6%B3%A8%E8%A7%A3%E9%87%8A" title="脚注名字">文字</a></p><h1 id="Markdown代码块"><a href="#Markdown代码块" class="headerlink" title="Markdown代码块"></a>Markdown代码块</h1><p>格式：如果在一个行内需要引用代码，只要用反引号引起来就好；<br>eg：Use the <code>printf()</code> function.</p><ul><li>如果是在一个块内需要引用代码，则在需要高亮的代码块的前一行及后一行使用三个反引号，同时 <strong>第一行反引号后面表示代码块所使用的语言</strong>，如下：<pre class="line-numbers language-none"><code class="language-none">#include&lt;stdio.h&gt;int main(){printf("Hello World\n");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
